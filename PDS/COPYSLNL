         TITLE ' C O P Y S L N L - STRIP LABELS OFF SL TAPES'
*------------------------------------------------------------------*
*                                                                  *
*        This is COPYSLNL, a program used to copy selected         *
*        files from a SL to an NL tape, stripping off the          *
*        tape labels in the copy process.  All control is          *
*        via SYSIN cards.  The presence of a TAPELOUT DD name      *
*        causes a printout of tape label information.  The         *
*        presence of a LABLDUMP DD card in the JCL causes a        *
*        dump of the actual input tape labels, in "COPYMODS        *
*        LABLDUMP" format, to an FB-80 output file.                *
*                                                                  *
*   This program is not-reentrant and not-reusable, etc.           *
*   because it modifies itself quite extensively (SBG).            *
*                                                                  *
* COURTESY:  Jim Marshall, Capt, USAF-Ret                          *
*                                                                  *
* WRITTEN:  Mr Frank Yates, Aerospace Corp while at multipurpose   *
*           Facility, Lowry AFB, CO for use in OS/MVT.             *
*                                                                  *
* MODIFIED:  1. Sam Golob                                          *
*                                                                  *
* NOTES:    1. LKED AC=1                                           *
*           2. NEEDS APPENDAGE IGG019WE                            *
*           3. NEEDS SUBROUTINES TLPRNT & MSGWRITE                 *
*                                                                  *
* CHANGE LOG:                                                      *
*                                                                  *
*    All references to PARM=TAPEL and GETMAIN of the tape label    *
*    storage areas, are references to the way this program used    *
*    to work.  The COPYSLNL program does not work this way now.    *
*    Now, the tape label printing is controlled solely by the      *
*    presence or absence of the TAPELOUT DD name in the execution  *
*    JCL.  If tape label printing has been turned on, then the     *
*    labels are printed at the time they are read from the         *
*    input tape.  Since there are no labels in the output tape,    *
*    any label information has to be taken from the original       *
*    input tape labels.                                            *
*                                                                  *
*    All notes from before 21 OCT 1997 refer to the COPYFILE       *
*    program, from which this program was derived.                 *
*                                                                  *
*    12 MAR 74 - ADDED WORD 'ALL' AS A VALID OPTION ON THE         *
*                CONTROL CARDS.                                    *
*                                                                  *
*    22 AUG 81 - INSTALLED AIR FORCE DATA SERVICES CENTER,         *
*                PENTAGON, WASHINGTON D.C. WITH FOLLOWING CHANGES  *
*                1. CLEANED UP CODE AND DOCUMENTED CODE ( WILL     *
*                   CONTINUE AS THE CODE IS SLICK AND FRANK        *
*                   WROTE IT FOR HIMSELF).                         *
*                2. CHANGED CONTROL CARD SCAN TO ONLY LOOK AT      *
*                   72 COLUMNS VERSUS 80. MPF HAD NO TSO.          *
*                3. INSTALLED AND YOU MUST MARK IT AUTHORIZED      *
*                   TO RUN IM MVS.                                 *
*                4. CHANGED SOME UNIQUE SAVE AND RETURN MACROS     *
*                   TO STANDARD IBM MACROS.                        *
*                5. IN MVS YOU MUST SUPPLY DSNAMES ON THE JCL      *
*                   FOR BOTH INPUT AND OUTPUT DD CARDS. THEY ARE   *
*                   NOT USED BUT MUST BE THERE  ( WITH MVT YOU     *
*                   YOU CAN LEAVE THOSE OUT ).                     *
*                6. CREATED DOCUMENTATION IN A SEPARATE MEMBER.    *
*                   LOOK AT COPYFIL#. THIS WAS TAKEN FROM MY BOOK  *
*                   'KING JAMES VERSION OF THE HOLY YATES'.        *
*                                                                  *
*     9 OCT 81 - 0C4 WHEN YOU ARE SPECIFING PARM=TAPEL. THE        *
*                LABEL POOL USED BY PGM WAS BEING FREED BEFORE     *
*                HE WENT TO SUBROUTINE 'TLPRINT'.                  *
*                                                                  *
*    10 OCT 81 - PRINTOUT TELLING YOU WHAT FILE WAS COPIED TO      *
*                WHAT FILE WAS ONLY SETUP FOR LESS THAN 99 FILES   *
*                NOW WILL HANDLE UP TO 999 FILES.                  *
*                                                                  *
*    27 JAN 93 - ADDED SUPPORT TO COPY MULTIPLE CONSECUTIVE FILES  *
*                BUT NOT TO THE END OF THE TAPE.  LAST INPUT FILE  *
*                IS CODED AFTER A DASH.  E.G.  101/101 -200        *
*                WHICH COPIES FILES 101 THRU 200 FROM ONE TAPE     *
*                TO THE OTHER.                                     *
*                                                                  *
*    21 OCT 97 - CONVERTED THIS PROGRAM TO PRODUCE NL              *
*                OUTPUT TAPE FROM SL INPUT TAPE.  PROGRAM          *
*                IN EFFECT STRIPS OFF TAPE LABELS, UNDER           *
*                CONTROL OF SYSIN CARD INPUT.                      *
*                                                                  *
*    25 NOV 97 - FIX BUGS AT PROGRAM ENDING                        *
*                                                                  *
*    03 FEB 00 - FORCE BIG BLOCKSIZE OF 65535 ALWAYS.              *
*                                                                  *
*    27 MAR 00 - ADDED EYECATCHER. FIXED HALFWORD LOGIC.           *
*                                                                  *
*    09 APR 00 - REMOVE DEPENDENCE ON VALUE OF BLOCK SIZE          *
*                IN THE HDR2 OF THE STANDARD LABELS. MODERN        *
*                COMPUTERS CAN RUN LARGER REGIONS, AND WE NOW      *
*                ALWAYS FIX THE BLOCK SIZE AT 65535, AND THE       *
*                GETMAIN FOR THE 2 BUFFERS AT TWICE THAT.          *
*                                                                  *
*    06 AUG 03 - REPLACE CONTROL CARD SELECTION WITH SELCARDS      *
*                PROGRAM.  There are many advantages to that:      *
*                                                                  *
*                1.  Almost impossible to make control card        *
*                    errors because the TRANSLATE cleans all       *
*                    control cards of irrelevant characters        *
*                    before scanning.                              *
*                                                                  *
*                2.  The SELREPT DD name, which is optional,       *
*                    will show a trace of the control card scan.   *
*                                                                  *
*                3.  Some rules have been extended.  For example,  *
*                    you can now code several dashes in one set    *
*                    of control cards, so you can copy say, from   *
*                    files 51 to 100, and then from files 150 to   *
*                    200, of the input tape.  Coding is like:      *
*                    //SYSIN DD  *                                 *
*                       3/1 7  51 -100 150 -200                    *
*                    /*                                            *
*                    which is now valid.  Previously, only one     *
*                    dash could be coded.                          *
*                                                                  *
*    04 SEP 03 - Get rid of the restriction that the INPUT file    *
*                numbers have to be in ascending order.  Same for  *
*                the OUTPUT file writing, except that a warning    *
*                message is written to SYSPRINT if the same output *
*                file number is written over twice, and a return   *
*                code of 4 is issued by the program.               *
*                                                                  *
*                Backward positioning of the tape is done by a     *
*                rewind and a re-skip of the file numbers          *
*                starting from 1.  This further takes advantage    *
*                of the SELCARDS program control card scanning     *
*                capabilities.                                     *
*                                                                  *
*                Further expanded tape file numbers to 5 digits    *
*                instead of 3 digits in the SYSPRINT display.      *
*                We can now show up to File 99999 in the display.  *
*                                                                  *
*                Cleaned up the code in general, and re-commented  *
*                a lot of it.  Got rid of all the EQU * for labels *
*                and replaced them with DS 0H.                     *
*                                                                  *
*    30 NOV 03 - Allow the printing of a "limitless" number of     *
*                labels.  The label contents used to be dumped     *
*                to a GETMAINed area and printed at the end of     *
*                the output tape write (in the case of COPYFILE)   *
*                or at the end of tape read (in the case of        *
*                COPYSLNL where there are no output labels.)       *
*                This limited the number of labels to the number   *
*                that would fit into the GETMAINed area.           *
*                                                                  *
*                The new PARM=TAPEL routine, called TLPRNT, now    *
*                prints the labels as they are written to output   *
*                (in the case of COPYFILE) or as they are read     *
*                in from input (in the case of COPYSLNL).  TLPRNT  *
*                is called, one label at a time, as each label     *
*                is encountered on the tape.  Thus, the printing   *
*                of label contents keeps going on, as the tapes    *
*                are being read/written.  There is no limitation   *
*                by the number of labels or tape files anymore.    *
*                                                                  *
*                Changed Frank Yates' "Qn" labels to names that    *
*                are more descriptive.                             *
*                                                                  *
*    17 MAR 05 - Add an optional ddname of LABLDUMP, which, if it  *
*                is present, allows the dumping of all tape labels *
*                for files copied, to a sequential FB-80 dataset.  *
*                The labels are as is, but extra cards are added   *
*                in the format of COPYMODS LABLDUMP, so that this  *
*                "label file" can later be used to add labels to   *
*                an NL version of the same tape.                   *
*                                                                  *
*                The extra cards in the label file are in the      *
*                following format:                                 *
*                                                                  *
*       LABELITH DC    CL80'----ENDOFLABELHEADER '                 *
*       LABELITI DC    CL80'----ENDOFLABELHEADERINIT'              *
*       LABELITR DC    CL80'----ENDOFLABELTRAILER'                 *
*       LABELITV DC    CL80'----ENDOFLABELTRAILEREOV'              *
*                                                                  *
*    19 SEP 05 - Make the TAPELOUT ddname a fully optional ddname  *
*                which is not dependent on PARM=TAPEL being coded. *
*                This now makes sense, since there is no limit     *
*                on how many labels this program can handle.  So   *
*                the control of "label printing" can depend on     *
*                the mere presence of the ddname, as opposed to    *
*                the presence of PARM=TAPEL, and you don't have    *
*                to worry about not exceeding the capacity of the  *
*                program to process a lot of labels.               *
*                                                                  *
*    27 FEB 11 - At z/OS 1.11 level or thereabouts, COPYFILE and   *
*                COPYSLNL were starting to get ABEND400's in the   *
*                middle of copying long tapes.  I decided to       *
*                replace Frank Yates' double buffering with        *
*                straightforward single buffering like COPYMODS    *
*                uses, with the buffer area actually inside the    *
*                program itself (label INAREA) rather than being   *
*                GETMAINed.  More sure-fire (hopefully).   SBG     *
*                                                                  *
*      The JCL used to execute the utility follows:                *
*                                                                  *
*      //COPY     EXEC PGM=COPYSLNL,REGION=3000K                   *
*      //TAPELOUT DD SYSOUT=A                         (OPTIONAL)   *
*      //MSG      DD SYSOUT=A                                      *
*      //SELREPT  DD SYSOUT=A                         (OPTIONAL)   *
*      //LABLDUMP DD DISP=SHR,DSN=yourid.FB80.dataset (OPTIONAL)   *
*      //IN       DD DSN=INPUT.FILES,UNIT=TAPE,                    *
*      //            DISP=OLD,VOL=SER=XXXXXX                       *
*      //TAPELIN  DD DSN=OUTPUT.FILES,UNIT=TAPE,                   *
*      //            DISP=(,KEEP),VOL=SER=YYYYYY                   *
*      //SYSIN    DD *                                             *
*        ----  CONTROL  CARDS  ----                                *
*      /*                                                          *
*                                                                  *
*-$DOC$------------------------------------------------------------*
         SPACE
         MACRO
.* ----------------------------------------------------------------- *
.*  Take a label image and run it through the TLPRNT routine to      *
.*  print the contents out.  This is the only call to TLPRNT from    *
.*  the calling program, one label image at a time.                  *
.* ----------------------------------------------------------------- *
&NAME    SAVEL &WHERE
&NAME    TM    TAPELFLG,X'01'           IS TAPEL ENABLED?
         BZ    SAV&SYSNDX               NO. DON'T SAVE THIS LABEL.
         TM    FLAGSYSL,X'08'           Is TAPELOUT DD in the JCL?
         BZ    SAV&SYSNDX               NO. DON'T SAVE THIS LABEL.
         STM   R14,R2,SAV14TO2          SAVE REGISTERS
         MVI   MAINLABL,X'40'           MOVE BLANK TO 1ST BYTE
         MVC   MAINLABL+1(79),MAINLABL  BLANK ENTIRE AREA
         MVC   MAINLABL(80),&WHERE      COPY A LABEL TO STAGE AREA
         MVC   FLAGSYSK(1),FLAGSYSL     DRAG ALONG FLAG AFTER LABEL
         MVC   OPENSYSK(1),OPENSYSL     DRAG ALONG FLAG AFTER LABEL
         LA    R1,MAINLABL              POINT TO LABEL AREA FOR PASSING
         L     R15,SAVOUTTL             ENTRY POINT FOR TLPRNT
         BALR  R14,R15                  CALL TLPRNT
         LM    R14,R2,SAV14TO2          RESTORE REGISTERS
SAV&SYSNDX DS  0H
         MEND
         SPACE
COPYSLNL AMODE 24
COPYSLNL RMODE 24
COPYSLNL CSECT
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'COPYSLNL - SL TO NL TAPE FILE COPY PROGRAM - '
         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'---'
EYECATCH DS    0D             ENSURE ALIGNMENT
         STM   R14,R12,12(R13)
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         DROP  R15
         USING COPYSLNL,R12,R11
         LR    R15,R13                OLD SAVE AREA ADDRESS
         LA    R13,SAVEAREA           NEW SAVE AREA ADDRESS
         ST    R15,4(,R13)            LINK SAVE AREAS
         ST    R13,8(,R13)            LINK SAVE AREAS
         B     INITPRGM               BRANCH AROUND SAVEAREA
SAVEAREA DC    18F'0'                 YE OLDE SAVE AREA
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
* ------------------------------------------------------------------- *
*                   I N I T I A L I Z A T I O N                       *
* ------------------------------------------------------------------- *
* Tape Label Printing Notes:  Tape label printing is caused by        *
*       the presence of the TAPELOUT DD name in the execution JCL.    *
*       PARM=TAPEL is not necessary any more, and it doesn't do       *
*       anything.                                                     *
*                                                                     *
*  The presence of the TAPELOUT DD name now turns on a flag:          *
*           OI    TAPELFLG,X'01'                                      *
*  If this flag is on, then tape label printing is enabled.           *
*                                                                     *
*  Tape Label printing is now done, one label at a time, through a    *
*  call to the TLPRNT routine by the SAVEL macro.  The calling        *
*  program OPENs the TLPRINT DCB through its entry point OUTTL.       *
*  The TLPRINT file CLOSE is controlled by the calling program, by    *
*  doing a SAVEL from an 80-byte label area whose first byte is       *
*  X'00'.  In this program, that area is at label ENDLABEL.           *
* ------------------------------------------------------------------- *
INITPRGM DS    0H
         L     R0,=V(SELCARDS)   Get address of called program
         ST    R0,ENTRYPT        Store it in our program.
         L     R0,=V(TLPRNT)     Entry point of label printing program
         ST    R0,SAVOUTTL       Store it here
         L     R0,=V(OUTTL)      Entry point of TLPRINT DCB
         ST    R0,SVOUTTL        Store it here
         L     R0,=V(LABLDUMP)   Entry point of LABLDUMP DCB
         ST    R0,SAVLBLDM       Store it for later use
* ------------------------------------------------------------------- *
         ST    R1,SAVEPARM
         SPACE
* ----------------------------------------------------------------- *
TIOTSCAN DS    0H             Determine the presence of Optional
*                             DDNAME :  LABLDUMP.
* ----->                      OPEN them if there is JCL for it.
* ----------------------------------------------------------------- *
         L     R5,16          R5=CVT
         L     R5,0(,R5)      R5=TCB WORDS
         L     R5,4(,R5)      R5=MY TCB
         L     R5,12(,R5)     R5=TIOT
         LA    R5,24(,R5)     R5=FIRST DD ENTRY
TIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?
         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES
         CLC   4(8,R5),LABLDUMC     LABLDUMP DDNAME THERE?
         BNE   TIOTTLOT       NO
         OI    FLAGSYSL,X'04'       SHOW PRESENCE OF LABLDUMP DD
         B     TIOTNEXT       CONTINUE
TIOTTLOT CLC   4(8,R5),TAPELOUC
         BNE   TIOTNEXT
         OI    FLAGSYSL,X'08'       SHOW PRESENCE OF TAPELOUT DD
         B     TIOTNEXT
TIOTNEXT SR    R3,R3
         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY
         AR    R5,R3          R5=NEXT DD ENTRY
         B     TIOTLOOP       GO CHECK IT
FLAGSYSL DC    X'00'
OPENSYSL DC    X'00'
LABLDUMC DC    C'LABLDUMP'
TAPELOUC DC    C'TAPELOUT'
TIOTSEND DS    0H
* ------------------------------------------------------------------ *
         L     R1,SAVEPARM
         L     R1,0(,R1)         See if PARM of TAPEL was coded.
         CLC   =C'TAPEL',2(R1)   TAPEL only depends on DDname present.
         BE    TAPELTON          Here only for compatibility.
TAPELTON DS    0H
         TM    FLAGSYSL,X'08'    Is TAPELOUT DD present?
         BZ    NOTAPEL           No. Don't do TLPRNT of labels.
         OI    TAPELFLG,X'01'    ENABLE TAPEL.
         ST    R2,SAVE2RG1       Save Register
         L     R2,SVOUTTL        Entry point of TLPRINT DCB in TLPRNT
         OPEN  ((2),OUTPUT)      OPEN it for OUTPUT
         OI    OPENSYSL,X'08'    Indicate that the file is open.
         L     R2,SAVE2RG1       Restore Register
NOTAPEL  DS    0H
         TM    FLAGSYSL,X'04'
         BZ    NOLBLDMP
         ST    R2,SAVE2RG1
         L     R2,SAVLBLDM
         OPEN  ((2),OUTPUT)
         OI    OPENSYSL,X'04'
         L     R2,SAVE2RG1
NOLBLDMP DS    0H
* ------------------------------------------------------------------ *
OPEN     DS    0H
         RDJFCB IN
         MVI   INJFCB+66,X'10'     Force BLP processing in our JFCB.
         LOAD  EP=IGG019WE         Get Channel End Appendage for OPEN.
         OPEN  IN,TYPE=J
         RDJFCB OUT
         MVI   OUTJFCB+66,X'10'    Force BLP processing in our JFCB.
         B     EXCP1
         SPACE
* ------------------------------------------------------------------- *
EXCP1    DS    0H                  Test if input tape is correct volser
         EXCP  STARTS
         WAIT  ECB=ECB1
         TM    ECB1,X'7F'          Was the EXCP good?
         BO    SW1                 Yes, go test the serial number.
         DC    H'0'                No. ABEND.
SW1      DS    0H
         CLC   INVOL1+4(6),INJFCB+118  Test input volser number.
         BE    STRTOUT                 OK. Now deal the output tape.
         CLOSE IN                      Not OK. CLOSE and reOPEN input.
         OPEN  IN,TYPE=J               Ask for new tape mount.
         B     EXCP1                   Try input test with new tape.
STRTOUT  SAVEL INVOL1                  Print out input's VOL1 label.
STRTOPEN OPEN  (OUT,OUTPUT),TYPE=J     Now OPEN the output tape.
         EXCP  STARTN                  Position it to the beginning.
         WAIT  ECB=ECB8
         TM    ECB8,X'7F'              Was the EXCP done right?
         BO    STRTOSCR                Yes. Test the output tape JFCB.
         DC    H'0'                    No. ABEND.
STRTOSCR DS    0H
         TM    OUTJFCB+118,X'FF'   TEST FOR SCRATCH OUTPUT.
         BNO   NOTSCRT                                        10/97 SBG
         MVC   OUTVOL1+4(6),=C'SCRTCH'    USE OVOL OF SCRTCH  10/97 SBG
         B     STRTCOPY                   START WRITING MSGS  10/97 SBG
* ------------------------------------------------------------------- *
NOTSCRT  MVC   OUTVOL1+4(6),OUTJFCB+118   TRUST JCL TO SUPPLY 10/97 SBG
*                                         NAME OF OUTPUT VOL  10/97 SBG
         B     STRTCOPY                   START WRITING MSGS  10/97 SBG
*  THIS CODE IS NOT EXECUTED  --  BELOW                       10/97 SBG
*  THE WRONG TAPE WAS MOUNTED FOR OUTPUT.
         L     R1,16               CVT
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           TCB
         L     R1,12(,R1)          TIOT
         AH    R1,OUT+40           ADD OFFSET TO DD ENTRY.
         TM    1(R1),2             SEE IF DISP=KEEP.
         BZ    PASS
         CLOSE OUT
         B     STRTOUT                                        10/97 SBG
PASS     MSGZ '***TAPE NO. ',(C,OUTVOL1,6,4),' WAS MOUNTED FOR OUTPUT',X
               '.  UNABLE TO RECOVER BECAUSE DISP=(,PASS).'
         B     RETURN
*  THIS CODE IS NOT EXECUTED  --  ABOVE                       10/97 SBG
STRTCOPY DS    0H
*        SAVE  OUTVOL1
         TM    OPENSYSL,X'04'
         BO    FSTMSGCC
         MVI   MSGCC,C'1'
         B     FSTMSGCX
FSTMSGCC DS    0H
         MVI   MSGCC,C'0'
FSTMSGCX DS    0H
         MSGZ '***SL TO NL FILES ARE BEING COPIED FROM VOL=SER=',      X
               (C,INVOL1,6,4),' TO VOL=SER=',(C,OUTVOL1,6,4)
         MVI   MSGCC,C'0'          DOUBLE SPACE THE NEXT MESSAGE.
         LA    R7,1                REG 7 = CURRENT INPUT FILE NO.
         LA    R8,1                REG 8 = CURRENT OUTPUT FILE NO.
         ST    R7,INCURRF          SAVE CURRENT INPUT FILE POSITION
         ST    R8,OUTCURRF         SAVE CURRENT OUTPUT FILE POSITION
         SPACE 2
* ------------------------------------------------------------------- *
*            M A I N    P R O C E S S I N G    L O O P                *
* ------------------------------------------------------------------- *
*   Processing consists of obtaining two file numbers from each
*   SYSIN control statement, using a call to the SELCARDS program.
*   These consist of an input file number, and an output file number.
*   Once each set of two numbers is obtained, COPYFILE copies the
*   selected input tape file to the selected output tape file, using
*   EXCP file skip channel commands when necessary, to get there.
* ------------------------------------------------------------------- *
LOOP     DS    0H                      Call SELCARDS to read the next
*                                      control statement and obtain a
*                                      pair of file numbers.
         L     R15,ENTRYPT        Get entry point for SELCARDS program.
         LA    R1,COLUMN          User area in our program - passed.
         BALR  R14,R15                 Do CALL.
         ST    R1,PASSADDR             Store address of returned values
         MVC   COLUMN(PASSLENG),0(R1)  Move called passarea to ours.
         TM    EOFFLAG,X'01'           Gotten to end of SYSIN?
         BO    STOP                    Yes. Stop the operation.
* ------------------------------------------------------------------- *
LEP1     BAL   R10,COPY                COPY A FILE.
         MSGZ 'FILE ',(D,INFILE,5),' WAS COPIED TO FILE ',(D,OUTFILE,5)X
               ,'   DSN=',(C,DSN)                           10SEP81
         MVI   MSGCC,C' '            SINGLE SPACE SUBSEQUENT LINES.
         B     LOOP
* ------------------------------------------------------------------- *
         SPACE 2
STOP     EXCP  TAPEMARK            WRITE A 2ND. TAPE MARK.
         WAIT  ECB=ECB7
         CLOSE (IN,,OUT)
TAPELSW  DS    0H
         TM    TAPELFLG,X'01'
         BZ    RETURN
         SAVEL ENDLABEL            Send an order to end TLPRNT activity
RETURN   DS    0H
         TM    TAPELFLG,X'01'      DID WE HAVE TAPEL ACTIVE ?
         BO    ENDIT
ENDIT    DS    0H
         L     R13,4(,R13)
         TM    RETCFLAG,X'01'      Was there a file overwrite ?
         BZ    ENDIT0              Nope. End with RC = 0.
         MVC   16(4,R13),=F'4'     Yes. End with RC = 4
         B     ENDITX
ENDIT0   DS    0H                  End with RC = 0
         MVC   16(4,R13),=F'0'
ENDITX   LM    R14,R12,12(R13)
         BR    R14
         SPACE 2
* ------------------------------------------------------------------- *
* --    F I L E    C O P Y    R O U T I N E                        -- *
* ------------------------------------------------------------------- *
COPY     DS    0H
         L     R2,INFILE           FULLWORD INPUT FILE NUMBER
         L     R3,OUTFILE          FULLWORD OUTPUT FILE NUMBER
         L     R7,INCURRF          Get current INPUT tape position
         L     R8,OUTCURRF         Get current OUTPUT tape position
* ------------------------------------------------------------------ *
SKIPOUT  DS    0H                  Adjust output file for the copy
SKIPOCMP CR    R3,R8               Compare current file pos to target
         BL    ADJUSOUT            Too high, rewind tape and try again
         BE    SKIPIN              Equal, get set to copy to this file
         LA    R8,1(,R8)           Advance output file number
         ST    R8,OUTCURRF         Save current output file position
*                                  Skip an output file
         EXCP  SKIPN
         WAIT  ECB=ECB9
         TM    ECB9,X'7F'          Did the SKIP work?
         BO    SKIPOCMP            Yes. Go try the next file.
         B     ABEND100            No. Abort here. Something wrong.
* ------------------------------------------------------------------ *
ADJUSOUT DS    0H                  Target file lower than current pos,
*                                  so rewind tape and start again.
         MSGZ '*****  >> WARNING <<  *****  >> WARNING <<  *****  >> WAX
               RNING <<  *****  >> WARNING << *****'
         MSGZ 'File ',(D,INFILE,5),' will write over previously writtenX
                output tape file, File ',(D,OUTFILE,5),'.'
         MVI   MSGCC,C' '          Single space subsequent lines.
         OI    RETCFLAG,X'01'      Return code = 4 for file overwrite.
         MVC   ECB11,=F'0'         Initialize ECB
         LA    R8,1                Set current output file to 1
         ST    R8,OUTCURRF         Save current output file position
*                                  Rewind the output tape.
         EXCP  REWINDO
         WAIT  ECB=ECB11
         TM    ECB11,X'7F'         Did the rewind work?
         BO    SKIPOCMP            Yes. Go do skips again.
         B     ABEND100            No. Show an abnormal end.
* ------------------------------------------------------------------ *
SKIPIN   DS    0H                  Adjust input file for the copy
SKIPICMP CR    R2,R7               Compare current file pos to target
         BL    ADJUSTIN            Too high, rewind tape and try again
         BE    HEADERS             Equal, get set to copy this file
         LA    R7,1(,R7)           Advance input file number
         ST    R7,INCURRF          Save current input file position
*                                  Skip an input file
         EXCP  SKIPS
         WAIT  ECB=ECB4
         TM    ECB4,X'7F'          Did the SKIP work?
         BO    SKIPICMP            Yes. Go try the next file.
         DC    H'0'                No. Abort here. Something wrong.
* ------------------------------------------------------------------ *
ADJUSTIN DS    0H                  Target file lower than current pos,
*                                  so rewind tape and start again.
         MVC   ECB10,=F'0'         Initialize the ECB.
         LA    R7,1                Set current input file to 1
         ST    R7,INCURRF          Save current input file position
*                                  Rewind the input tape, passing
*                                  the VOL1 label.
         EXCP  REWINDI
         WAIT  ECB=ECB10
         TM    ECB10,X'7F'         Did the rewind work?
         BO    SKIPICMP            Yes. Go do skips again.
         DC    H'0'                No. Show an abnormal end.
* ------------------------------------------------------------------ *
HEADERS  BAL   R9,LABELS           Copy the header labels.
         SAVEL LABEL1
         SAVEL LABEL2
         MVC   DSN,LABEL1+4        Save the DSN.
GETBUF   DS    0H
         CLC   =C'HDR2',LABEL2     Is the second label a HDR2?
         BE    TRYPSIZE            Yes, label integrity probably OK.
         B     ABEND200            No. Show an abnormal end.
* ------------------------------------------------------------------ *
TRYPSIZE DS    0H                  Replace COPYING Engine-single buffer
COPYLOOP EXCP  RDATA               READ A DATA BLOCK.
         WAIT  ECB=ECB5            WAIT FOR READ TO COMPLETE.
         TM    ECB5,X'7F'          Was READ OK?
         BO    ROK                 Yes.
         B     ABEND300            No. ABEND on bad READ.
ROK      DS    0H
*        LH    R1,CCW5+6           GET INPUT BLKSIZE.
*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.
         XC    FULLWRK1,FULLWRK1   CLEAR FULLWORK WORKAREA
         MVC   HALFWRK1(2),CCW5+6  INPUT BLKSIZE
         L     R1,FULLWRK1         PROPERLY LOAD REGISTER, TO 64K
*        SH    R1,RDATA+14         SUBTRACT UNUSED BYTES.
*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.
         XC    FULLWRK2,FULLWRK2   CLEAR FULLWORK WORKAREA
         MVC   HALFWRK2(2),RDATA+14   UNUSED BYTES
         S     R1,FULLWRK2         FULLWORD SUBTRACTION
         BZ    EODAD               EXIT AT END OF DATA FILE.
         STH   R1,CCW6+6           SET OUTPUT BLKSIZE.
         EXCP  WDATA               WRITE A DATA BLOCK.
         WAIT  ECB=ECB6            WAIT FOR WRITE TO COMPLETE.
         TM    ECB6,X'7F'          Was WRITE OK?
         BO    WOK                 Yes.
         B     ABEND400            No. ABEND on bad WRITE.
WOK      DS    0H
         B     COPYLOOP            Keep copying blocks till EOD.
         SPACE 2
EODAD    EXCP  TAPEMARK            WRITE THE END-OF-DATA TAPEMARK.
         WAIT  ECB=ECB7
         TM    ECB7,X'7F'
         BO    TRAILERS
         B     ABEND500
         SPACE 2
TRAILERS BAL   R9,LABELS           COPY THE TRAILER LABELS.
         SAVEL LABEL1
         SAVEL LABEL2
         CLC   DSN,LABEL1+4        TEST DSN.
         BE    TRAILADV            DSN is OK. Get ready for next file.
         DC    H'0'
TRAILADV LA    R7,1(,R7)           ADVANCE FILE NUMBERS.
         LA    R8,1(,R8)
         ST    R7,INCURRF          SAVE CURRENT INPUT FILE POSITION
         ST    R8,OUTCURRF         SAVE CURRENT OUTPUT FILE POSITION
         CLC   =C'EOV1',LABEL1
         BE    STOP                STOP AFTER EOV1 LABEL.
         BR    R10                 RETURN.
* ------------------------------------------------------------------- *
* --    E N D    O F    F I L E    C O P Y    R O U T I N E        -- *
* ------------------------------------------------------------------- *
         SPACE 2
* ------------------------------------------------------------------- *
* --    L A B E L    S A V E    R O U T I N E                      -- *
* ------------------------------------------------------------------- *
LABELS   EXCP  RLABELS             COPY TWO LABELS.
         WAIT  ECB=ECB2
         TM    ECB2,X'7F'          Did it work?
         BO    RLBLGOOD            Return if ok.
         B     ABEND600
RLBLGOOD CLC   =H'80',RLABELS+14   TEST FOR TAPE MARK.
         BE    STOP                STOP AT 2ND. TAPE MARK.
         BR    R9                  RETURN
* ------------------------------------------------------------------- *
         SPACE 2
ABEND100 ABEND 100
ABEND200 ABEND 200
ABEND300 ABEND 300
ABEND400 ABEND 400
ABEND500 ABEND 500
ABEND600 ABEND 600
         SPACE 2
* ------------------------------------------------------------------- *
***DATA AREA
ENDLABEL DC    80X'00'          Null label to mark end of label print
TAPELFLG DC    X'00'
TAPELON  EQU   X'01'
SAVEPARM DC    F'0'
SAVE1RG1 DC    F'0'
SAVE1RG2 DC    F'0'
SAVE2RG1 DC    F'0'
SAVOUTTL DC    F'0'
SVOUTTL  DC    F'0'
SAVLBLDM DC    F'0'
SAV14TO2 DC    6F'0'
         DS    0D               START ON DWORD BOUNDARY
FULLWRK1 DS    0F               FULLWORD WORK AREA
         DC    H'0'
HALFWRK1 DC    H'0'             HALFWORD WORK AREA
FULLWRK2 DS    0F               FULLWORD WORK AREA
         DC    H'0'
HALFWRK2 DC    H'0'             HALFWORD WORK AREA
BLKSIZE  DC    F'0'
CARD     DC    CL80' '          CONTROL CARD
DSN      DC    CL17' '
* --------------------------------------------------------------- *
*   ----   Passed Values   ----    *
*
COLUMN   DC    F'0'             Address of starting column for search
COLUMNX  DC    F'0'             Actual Column number out of 80
INFILE   DC    F'0'             Current INPUT file number
OUTFILE  DC    F'0'             Current OUTPUT file number
LINFILE  DC    F'0'             LAST INPUT FILE IF DASH USED
ALLSWICH DC    X'00'
*              X'01'            "ALL" PROCESSING IS IN EFFECT
*              X'02'            "ALL" PROCESSING WITH LIMIT
OPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN
*              X'01'          SYSIN    DD IS OPEN
*              X'02'          SELREPT  DD IS OPEN
CLOSWICH DC    X'00'          SIGNAL TO CLOSE FILES
*              X'01'          CLOSE SYSIN
*              X'02'          CLOSE SELREPT
EOFFLAG  DC    X'00'          EOF FLAG
*              X'01'          EOF REACHED ON SYSIN
HEADSWCH DC    X'00'          PRINT ENTIRE SELREPT HEADING
*              X'01'          JUST PRINT DATA LINE
CARDSWCH DC    X'01'          SHOULD WE GET ANOTHER CARD?
*              X'01'          YES. GET ANOTHER CARD.
BACKSWCH DC    X'00'          BACK TO NORMAL PROCESSING AFTER "ALL"
*              X'01'          WE HAVE COME BACK FROM A LIMITED "ALL"
FLAGSYST DC    X'00'          Flag indicating DD present in JCL.
*              X'01'          SYSIN    DD is present
*              X'02'          SELREPT  DD is present
         DS    F
PASSLENG EQU   *-COLUMN
* --------------------------------------------------------- *
         ENTRY MAINLABL
FULLLABL DS    0CL80
MAINLABL DC    CL60' '
         DC    CL20' '
FLAGSYSK DC    X'00'            TWO BYTES AFTER LABEL IMAGE FOR FLAG
OPENSYSK DC    X'00'            KEEP TOGETHER WITH FLAGSYSK
LABEL1   DC    CL80' '
LABEL2   DC    CL80' '
INVOL1   DC    CL80' '
OUTVOL1  DC    CL80' '
PACK     PACK  WORK,0(0,1)
MINMAX   DC    A(160,131070)    MIN AND MAX USEFUL POOL SIZES
INCURRF  DC    F'0'             CURRENT FILE POSITION OF INPUT TAPE
OUTCURRF DC    F'0'             CURRENT FILE POSITION OF OUTPUT TAPE
POOLSIZE DC    F'0'
ENTRYPT  DC    F'0'             ENTRY POINT OF SELCARDS
PARMSAVE DC    F'0'
PASSADDR DC    F'0'
RETCFLAG DC    X'00'            Maximum Return Code
WORK     DC    D'0'
SYSIN    DCB   DSORG=PS,MACRF=GM,EODAD=STOP,DDNAME=SYSIN
         DC    D'0'
IN       DCB   MACRF=E,EXLST=INEXLST,CENDA=WE,DDNAME=IN
         DC    D'0'
OUT      DCB   MACRF=E,EXLST=OUTEXLST,DDNAME=TAPELIN
INEXLST  DC    X'87',AL3(INJFCB)
OUTEXLST DC    X'87',AL3(OUTJFCB)
INJFCB   DC    44F'0'
OUTJFCB  DC    44F'0'
         SPACE 2
* --------------------------------------------------------- *
ECBLIST  DC    A(ECB5),X'80',AL3(ECB6)
ECB1     DC    F'0'
ECB2     DC    F'0'
ECB3     DC    F'0'
ECB4     DC    F'0'
ECB5     DC    F'0'
ECB6     DC    F'0'
ECB7     DC    F'0'
ECB8     DC    F'0'                                           10/97 SBG
ECB9     DC    F'0'                                           10/97 SBG
ECB10    DC    F'0'                                           10/97 SBG
ECB11    DC    F'0'                                           10/97 SBG
REWINDI  DC    X'40000000',A(ECB10,0,0,CCW1,IN,0,0)
REWINDO  DC    X'40000000',A(ECB11,0,0,CCW8,OUT,0,0)
STARTS   DC    X'40000000',A(ECB1,0,0,CCW1,IN,0,0)            10/97 SBG
STARTN   DC    X'40000000',A(ECB8,0,0,CCW8,OUT,0,0)           10/97 SBG
RLABELS  DC    X'40000000',A(ECB2,0,0,CCW2,IN,0,0)
WLABELS  DC    X'40000000',A(ECB3,0,0,CCW3,OUT,0,0)
SKIPS    DC    X'40000000',A(ECB4,0,0,CCW4,IN,0,0)            10/97 SBG
SKIPN    DC    X'40000000',A(ECB9,0,0,CCW9,OUT,0,0)           10/97 SBG
RDATA    DC    X'40000000',A(ECB5,0,0,CCW5,IN,0,0)
WDATA    DC    X'40000000',A(ECB6,0,0,CCW6,OUT,0,0)
TAPEMARK DC    X'40000000',A(ECB7,0,0,CCW7,OUT,0,0)
CCW1     CCW   7,0,X'60',1     REWIND.
         CCW   2,INVOL1,X'20',80      READ A VOLUME LABEL.
CCW2     CCW   2,LABEL1,X'40',80      READ LABEL1.
         CCW   2,LABEL2,X'60',80      READ LABEL2.
         CCW   X'3F',0,X'20',1        SKIP A TAPE MARK.
CCW3     CCW   1,LABEL1,X'60',80      WRITE LABEL1.
         CCW   1,LABEL2,X'60',80      WRITE LABEL2.
CCW7     CCW   X'1F',0,X'60',1        WRITE A TAPE MARK.
         CCW   3,0,X'20',1            NO OP
CCW4     CCW   X'3F',0,X'60',1        SKIP A FILE.  3 CCW'S   10/97 SBG
         CCW   X'3F',0,X'60',1
CCW9     CCW   X'3F',0,X'20',1        SKIP AN NL FILE         10/97 SBG
CCW8     CCW   7,0,X'20',1            REWIND.
CCW5     DC    X'02',AL3(INAREA),X'2000',X'FFFF'                         04929
CCW6     DC    X'01',AL3(INAREA),X'2000',X'FFFF'                         04930
         LTORG
COPYSLNL CSECT                                                           05596
INAREA   DS    CL65535                                                *  05597
         END
*          SELCARDS            AT LEVEL 1.6 AS OF 11/30/03
   TITLE 'SELCARDS -- SELECT FILES TO COPY FROM ONE TAPE TO ANOTHER'
**************************************************************
**************************************************************
**                                                          **
**                                                          **
**  MODULE:   SELCARDS - Read control commands on control   **
**                       cards and return two numbers:      **
**                       from-file number and to-file       **
**                       number.                            **
**                                                          **
**  AUTHOR:   Sam Golob                                     **
**                                                          **
**  PURPOSE:  This program is called by COPYSLNL            **
**            and tells COPYSLNL which files to copy,       **
**            using two numbers that are returned to        **
**            COPYSLNL after each call.                     **
**                                                          **
**            These numbers are produced from control       **
**            cards which are in COPYFILE format, and       **
**            will signify which input tape file is to      **
**            be copied to which output tape file.          **
**                                                          **
**            Required DD name is //SYSIN, which is an      **
**            FB-80 card-image file, of which the first     **
**            72 columns are scanned for control            **
**            information.                                  **
**                                                          **
**                                                          **
**  METHOD:   The //SYSIN DD name, once opened, is kept     **
**            open throughout the COPYSLNL run, and it      **
**            keeps track of which control statement has    **
**            last been read.  The program contains a       **
**            pointer that points just past that location.  **
**                                                          **
**            The SYSIN file stays open until all the       **
**            cards have been read.                         **
**                                                          **
**                                                          **
**    Input:  None.  Each call causes a scan of the         **
**            //SYSIN DD name until another control         **
**            statement has been read.  The SELCARDS        **
**            program returns a pair of numbers, which      **
**            reflects the last control statement that      **
**            was read from the file.                       **
**                                                          **
**            In order to process the ALL option, a flag    **
**            is set to cause SELCARDS to increment the     **
**            input file number and output file number by   **
**            one, with each successive call.               **
**                                                          **
**   Output:  Optional DD name of //SELREPT traces the      **
**            results of the control card scan.             **
**                                                          **
**                                                          **
**************************************************************
         EJECT
**************************************************************
**                                                          **
**  CHANGE LOG:                                             **
**                                                          **
**    Version 1.1  - First production version.              **
**     08/05/03                                             **
**                                                          **
**    Version 1.2  - Add trace data for SELREPT DD name.    **
**     08/05/03                                             **
**                                                          **
**    Version 1.3  - Only go back from the call when a new  **
**     08/05/03      result is obtained for INFILE and      **
**                   OUTFILE.                               **
**                                                          **
**    Version 1.4  - Fitted to COPYFILE program.  SELFILE   **
**     08/06/03      DD name changed to SYSIN.              **
**                                                          **
**    Version 1.5  - Fix SELREPT documentation.  Adjust     **
**     08/08/03      passed values a bit.                   **
**                                                          **
**    Version 1.6  - Fix doc.  Same release as COPYSLNL     **
**     08/08/03      and COPYNLNL version.                  **
**                                                          **
**                                                          **
**                                                          **
**************************************************************
**************************************************************
         EJECT
**************************************************************
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R4,HEX
         L     R4,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
         SPACE
**************************************************************
         GBLC  &LLEV
&LLEV    SETC  '1.6 '
         YREGS
FF       EQU   X'FF'
SELCARDS CSECT
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'SELCARDS - GET TWO NUMBERS FROM CONTROL CARDS'
         DC    C' - '
         DC    C'LEVEL '
SYSLEV   DC    C'&LLEV'
         DC    C' - '
SYSDAT   DC    C'&SYSDATE'
         DC    C'  ',C'&SYSTIME '
         DC    C'--- '            MAKE EYECATCHER VISIBLE
SAVEAREA DC    18F'0'
EYECATCH DS    0D             ENSURE ALIGNMENT
         SAVE  (14,12)
         LR    R5,R1          SAVE PASSAREA POINTER
         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR
         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR
         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR
         LR    R13,R1               NEW SAVE AREA ADDRESS
         DROP  R15
* -----                       SET UP BASE REGISTERS
         USING SELCARDS,R12,R11,R10
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LA    R10,4095(,R11)
         LA    R10,1(,R10)
         LR    R1,R5          Restore passarea pointer
         ST    R1,PARMSAVE    Renewed with each entry
         TM    HEADSWCH,X'02'
         BO    CALENTRY
* ----------------------------------------------------------------- *
TIOTSCAN DS    0H             Determine the presence of Optional
*                             DDNAMES:  SYSIN.
* ----->                      OPEN them if there is JCL for them.
* ----------------------------------------------------------------- *
         L     R5,16          R5=CVT
         L     R5,0(,R5)      R5=TCB WORDS
         L     R5,4(,R5)      R5=MY TCB
         L     R5,12(,R5)     R5=TIOT
         LA    R5,24(,R5)     R5=FIRST DD ENTRY
TIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?
         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES
         CLC   4(8,R5),SYSIN+40
         BNE   TIOTSELR       NO
         OI    FLAGSYST,X'01'       SHOW PRESENCE OF SYSIN    DD
         B     TIOTNEXT       CONTINUE
TIOTSELR CLC   4(8,R5),SELREPT+40
         BNE   TIOTNEXT
         OI    FLAGSYST,X'02'       SHOW PRESENCE OF SELREPT  DD
         B     TIOTNEXT
TIOTNEXT SR    R3,R3
         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY
         AR    R5,R3          R5=NEXT DD ENTRY
         B     TIOTLOOP       GO CHECK IT
TIOTSEND DS    0H
***********************************************************************
* GET SYSTEM DATE AND TIME - A standard way to get date and time      *
***********************************************************************
         STM   R14,R2,SAVE1402
         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY
         OI    DATE+4,X'0F'
         UNPK  DATED,DATE
         OI    TIME+3,X'0F'
         UNPK  TIMED,TIME
*                          FILL HEADDATE AREA WITH INFO TO REUSE
         MVC   HEADDATE(2),DATED
         MVI   HEADDATE+2,C'/'
         MVC   HEADDATE+3(2),DATED+2
         MVI   HEADDATE+5,C'/'
         MVC   HEADDATE+6(4),DATED+4
         MVC   HEADDATE+12(2),TIMED
         MVI   HEADDATE+14,C':'
         MVC   HEADDATE+15(2),TIMED+2
         MVI   HEADDATE+17,C':'
         MVC   HEADDATE+18(2),TIMED+4
         MVC   MESSAGE1+98(31),HEADDLIT    TODAY'S DATE AND TIME
         LM    R14,R2,SAVE1402
***********************************************************************
         MVC   LEVDATE(8),SYSDAT
***********************************************************************
         MVC   MESSAGE1+71(21),LEVELLIT    PROGRAM LEVEL AND
* ----------------------------------------------------------------- *
INITCONS DS    0H
         MVC   LINE(133),LINE-1            Clear print lines
         MVC   CNTLINE(133),CNTLINE-1
         MVC   OUTLINE(133),OUTLINE-1
         MVC   PRTLINE(133),PRTLINE-1
* ----------------------------------------------------------------- *
*    START OF MAIN PROCESSING
* ----------------------------------------------------------------- *
*
OPENREPT DS    0H
         TM    FLAGSYST,X'02'      IS SELREPT DDNAME IN JCL?
         BZ    OPENREND            No. Don't attempt to open it.
         OPEN  (SELREPT,OUTPUT)
         TM    SELREPT+48,X'12'    TEST FOR SUCCESSFUL OPEN.
         BNO   OPENREND            Not successful, don't indicate.
         OI    OPENDFLG,X'02'      INDICATE THAT FILE IS OPEN
OPENREND DS    0H
INITREPT DS    0H
         TM    OPENDFLG,X'02'           Do not attempt to write if
         BZ    INITREND                   the file is not opened.
         TM    HEADSWCH,X'01'           Title page to be printed?
         BO    INITREND                 Not after first call.
         MVC   CNTLINE(133),CNTLINE-1
         MVC   CNTLINE(133),MESSAGE1    MOVE IN TITLE
         PUT   SELREPT,CNTLINE
         PUT   SELREPT,LINE
         PUT   SELREPT,LINE
         MVC   CNTLINE(133),CNTLINE-1
         MVC   CNTLINE(133),MESSAGE3
         PUT   SELREPT,CNTLINE
         MVC   CNTLINE(133),CNTLINE-1
         MVC   CNTLINE(133),MESSAGE4
         PUT   SELREPT,CNTLINE
         PUT   SELREPT,LINE
         MVC   CNTLINE(133),CNTLINE-1   Clear title line.
         MVC   CNTLINE(133),MESSAGE2    And move in column headings.
         PUT   SELREPT,CNTLINE
         PUT   SELREPT,LINE
         OI    HEADSWCH,X'03'           Don't do this again.
INITREND DS    0H
*
* ----  CONTROL  CARD  SCAN  ROUTINE  -------  BELOW  ----- *
*
OPENIT   DS    0H
         OPEN  (SYSIN,INPUT)
         TM    SYSIN+48,X'12'      TEST FOR SUCCESSFUL OPEN.
         BNO   OPENITEN
         OI    OPENDFLG,X'01'      INDICATE THAT FILE IS OPEN
OPENITEN DS    0H
CALENTRY DS    0H                  Come here after first call.
         L     R1,PARMSAVE
         LR    R6,R1               CALLER'S PASSAREA
         MVC   CLOSWICH(1),CLOSWICH-COLUMN(R6)  Passed switches
         MVC   EOFFLAG(1),EOFFLAG-COLUMN(R6)      from caller
         TM    ALLSWICH,X'01'      Are we doing any ALL processing?
         BO    ALLPROC             Yes. Go to ALL routine.
         B     CONTROL             No. Just get single file values.
* ----- >>
ALLPROC  DS    0H                  ALL processing.
         TM    ALLSWICH,X'01'      Is the ALL switch on?
         BZ    ALLPREND            No. Just exit this routine.
         NI    CARDSWCH,FF-X'01'   Make sure you don't GET new card.
         L     R3,INFILE           Increment INFILE  by 1
         LA    R3,1(,R3)
         ST    R3,INFILE           And store the value away.
         L     R3,OUTFILE          Increment OUTFILE by 1
         LA    R3,1(,R3)
         ST    R3,OUTFILE          And store the value away.
         TM    ALLSWICH,X'02'      Did we limit the ALL processing?
         BZ    NOLIMITX            No. Then keep cycling.
         L     R3,INFILE           Yes. Recheck the INFILE number
         C     R3,LINFILE          And compare it to the limit.
         BNH   NOLIMITT            Not yet there, no action.
         NI    ALLSWICH,FF-X'03'   Above the limit, turn off ALL...
         L     R3,INFILE           We've passed the right file number
         BCTR  R3,0                So we subtract one,
         ST    R3,INFILE           And reset it to the correct value.
         L     R3,OUTFILE          We've passed the right file number
         BCTR  R3,0                So we subtract one,
         ST    R3,OUTFILE          And reset it to the correct value.
         OI    BACKSWCH,X'01'      Show you came back from ALL.
         B     CONTROL             Don't go to caller-look for hit.
NOLIMITX DS    0H
         MVC   LINFILE,=F'0'       Unlimited ALL, show LINFILE = F'0'
NOLIMITT DS    0H
         ST    R1,SAVER1C          *--------------------------*
         LA    R1,2                *  Identify from whence.   *
         ST    R7,SAVER7A          *  Save R7                 *
         BAL   R7,REPTLINE         *  Display current status. *
         L     R7,SAVER7A          *  Restore R7              *
         L     R1,SAVER1C          *--------------------------*
ALLPREND DS    0H
         NI    CARDSWCH,FF-X'01'   Make sure you don't GET new card.
         OI    BACKSWCH,X'01'      Extra switch for safety
         B     GOCALLER
* ----- >>
* ----  CONTROL  CARD  SCAN  ROUTINE  -------  Below  ----- *
CONTROL  DS    0H
         TM    CARDSWCH,X'01'      Are we getting a new card?
         BZ    OLDCARD             No, keep searching the old card.
         TM    EOFFLAG,X'01'       Have we signalled SYSIN finished?
         BO    SELFEND             Yes. Close up and get out.
         TM    CLOSWICH,X'01'      Have we ordered SYSIN closed?
         BO    SELFEND             Yes. Close it up and get out.
         TM    OPENDFLG,X'01'      Is SYSIN still open?
         BZ    OLDCARD             No. Don't look for a new record.
GETCARD  DS    0H                  Get a new SYSIN card.
         TM    CLOSWICH,X'01'      SYSIN ordered to be closed?
         BO    GETCARDE            Yes. Don't try to get a card.
         TM    EOFFLAG,X'01'       End of file in SYSIN reached?
         BO    GETCARDE            Yes. Don't try to get a card.
         STM   R14,R2,SAVE1402     Save a bunch of registers.
         GET   SYSIN,CARDIN
*---->>                            GET a control card, and filter it
*---->>                            to leave only valid nonblanks.
         TR    CARDIN(80),TRTBL0   Leave only numbers, - /, or ALL.
         LM    R14,R2,SAVE1402     Restore the bunch of registers.
         NI    CARDSWCH,FF-X'01'   Don't get a new card on next call.
         MVC   COLUMN,=A(CARDIN-1) Reset starting column to beginning.
GETCARDE DS    0H
OLDCARD  L     R1,COLUMN           REG 1 = Column to start search.
         LA    R14,CARDIN+71       REG 14 = END OF CARD ADDRESS
FINDWORD DS    0H
         LA    R1,1(,R1)           Bump search place holder by one.
         TM    EOFFLAG,X'01'       Protection if SYSIN at end.
         BO    NOFNDTST            If so, don't try to get another card
         CR    R1,R14              Test for end of card.
         BH    GETCARD             Past end, get another card.
         B     NOFNDGET            And pass the next test by.
NOFNDTST DS    0H                  Are we past the last card?
         CR    R1,R14              Test it for its end.
         BNH   NOFNDGET            Not there, resume processing.
         LA    R15,0               Put RC = 0
         B     SELFEND             And close SYSIN up.
NOFNDGET DS    0H                  Not at end of card yet.
         NI    CARDSWCH,FF-X'01'   Indicate that, so we don't get one.
         CLI   0(R1),C' '          Test for blank.
         BE    FINDWORD            If blank, look again.
         CLI   0(R1),C'-'          Is it a DASH ?
         BE    LIMALL              Yes. Start limited ALL processing.
         CLC   =C'ALL',0(R1)       Is it a real non-limited ALL?
         BNE   CQ1                 No. Just get the two values.
         ST    R3,SAVER3A          If unlimited ALL, then update
         LR    R3,R1               the current COLUMN value.
         LA    R3,3(,R3)           Point past end of the literal,
         ST    R3,COLUMN           And tuck the value away.
         L     R3,SAVER3A
         OI    ALLSWICH,X'01'      Say you'll copy rest of the files.
         B     ALLPROC             And actually go and do it.
         SPACE 3
* --------- >>>>>>>>>>>> Limited ALL processing >> -- Below ---->>>>
* --------   CODE TO HANDLE MULTIPLE FILES, NOT TO LAST ONE.
LIMALL   DS    0H                  ALL processing with upper limit.
         LR    R15,R1              Use R15 to search
         LA    R15,1(,R15)         Bump past DASH.
         LR    R1,R15              Tell R1 you're there too.
         TM    EOFFLAG,X'01'       Are there any more cards to GET?
         BO    NOFNDLIM            No. Don't try to GET any.
         CR    R15,R14             Is DASH the last column?
         BH    GETCARD             Yes. Get another card and ignore it.
NOFNDLIM DS    0H
         NI    CARDSWCH,FF-X'01'   Keep looking in this card.
FINDLIN  CLI   0(R15),C' '         Is BLANK after DASH?
         BNE   GETLIN              No. Figure out what the number is.
         LR    R1,R15      REDUNDANT, BUT MAKE SURE R1 PROPER
         B     FINDWORD            Treat isolated DASH as a BLANK.
GETLIN   LA    R15,1(,R15)         Bump past the last non-blank.
         CR    R15,R14             End of card yet?
         BNH   GETCONT             No. Keep searching for the number.
         OI    CARDSWCH,X'01'
         B     GETLLEN             Yes. Let's get the entire number.
GETCONT  CLI   0(R15),C' '         Delimiting BLANK?
         BNE   GETLIN              No, look further.
GETLLEN  DS    0H
         ST    R15,COLUMN          Save COLUMN pointer for next call.
         SR    R15,R1              Get length of number
         BCTR  R15,0               Subtract 1 FOR EXECUTE.
         EX    R15,PACK            Pack the number.
         CVB   R0,WORK             Convert it to binary.
         ST    R0,LINFILE          And store it away for reference.
         OI    ALLSWICH,X'03'      Show ALL + File Limiting, and
         B     ALLPROC             Go directly to ALL processing.
* --------   CODE TO HANDLE MULTIPLE FILES, NOT TO LAST ONE.
* --------- >>>>>>>>>>>> Limited ALL processing >> -- Above ---->>>>
         SPACE 3
CQ1      LR    R15,R1              REG 15 = Address of first file no.
FINDSL   LA    R15,1(,R15)         Look for the /.
         CR    R15,R14             Test for end of card.
         BNH   FINDCONT            Not at the end yet.
         OI    CARDSWCH,X'01'      Set up to get another card.
         B     MOD1                OUTPUT file defaulted to next.
FINDCONT CLI   0(R15),C' '         Test for BLANK.
         BE    MOD1                Blank. Means OUTPUT file defaulted.
         CLI   0(R15),C'/'         TEST FOR /.
         BNE   FINDSL              Neither blank nor /, loop back.
         LA    R2,1(,R15)          REG 2 = Address of second file no.
         SR    R15,R1              REG 15 = Length of first file no.
         BCTR  R15,0               One less for EXECUTE.
         EX    R15,PACK            Convert to packed
         CVB   R0,WORK             Convert to binary
         ST    R0,INFILE           And shove it into a fullword.
         LR    R1,R2               REG 1 = Address of second file
FINDEND  LA    R2,1(,R2)           Bop one up.
         CR    R2,R14              Test for end of card.
         BNH   Q2                  Not there, don't get another.
         OI    CARDSWCH,X'01'      Enable GETCARD.
         B     FOUNDIT             And assume you've gotten the number.
Q2       DS    0H
         NI    CARDSWCH,FF-X'01'   Turn off GETCARD switch.
         CLI   0(R2),C' '          Test for BLANK.
         BNE   FINDEND             Look further for end of the number.
FOUNDIT  ST    R2,COLUMN           Reset COLUMN for next search.
         SR    R2,R1               REG 2 = Length of second file no.
         BCTR  R2,0                One less for EXECUTE.
         EX    R2,PACK             Convert to packed.
         CVB   R0,WORK             Convert to binary
         ST    R0,OUTFILE          And store its value away.
         NI    ALLSWICH,FF-X'03'   Can't have ALL processing here.
         ST    R1,SAVER1C          *--------------------------*
         LA    R1,5                *  Identify from whence.   *
         ST    R7,SAVER7A          *  Save R7                 *
         BAL   R7,REPTLINE         *  Display current status. *
         L     R7,SAVER7A          *  Restore R7              *
         L     R1,SAVER1C          *--------------------------*
         B     GOCALLER            Return to caller since we have
*                                  a change in INPUT and OUTPUT
*                                  numbers.
*--------------------------------------------------------------------*
MOD1     DS    0H                 Mod #1.  AUTOMATIC OUTPUT FILE NO.
         ST    R15,COLUMN         Reset COLUMN for next search.
         SR    R15,R1             REG 15 = Length of file no.
         BCTR  R15,0              One less for EXECUTE.
         EX    R15,PACK           Convert to packed.
         CVB   R0,WORK            Convert to binary.
         ST    R0,INFILE          And store number in INFILE.
         ST    R1,SAVER1B
         L     R1,OUTFILE         Get old value of OUTFILE
         LA    R1,1(,R1)          Increase it by one automatically.
         ST    R1,OUTFILE         Store the new value in OUTFILE.
         L     R1,SAVER1B
         NI    ALLSWICH,FF-X'03'  We can't have ALL processing here.
         ST    R1,SAVER1C         *--------------------------*
         LA    R1,6               *  Identify from whence.   *
         ST    R7,SAVER7A         *  Save R7                 *
         BAL   R7,REPTLINE        *  Display current status. *
         L     R7,SAVER7A         *  Restore R7              *
         L     R1,SAVER1C         *--------------------------*
         B     GOCALLER           Return to caller since we have
*                                 a change in INPUT and OUTPUT
*                                 numbers.
         SPACE 2
* ----  CONTROL  CARD  SCAN  ROUTINE  -------  Above  ----- *
         SPACE 3
GOCALLER DS    0H
         TM    CLOSWICH,X'01'           Has caller ordered file close?
         BO    SELFEND                  Yes. Force it.
         L     R13,4(,R13)
         MVC   16(4,R13),=F'0'          Return code 0     in R15
         MVC   24(4,R13),=A(COLUMN)     Address of passed values in R1.
         LM    R14,R12,12(R13)
         BR    R14
SELFEND  DS    0H
         OI    EOFFLAG,X'01'
         TM    CLOSWICH,X'01'           Has caller ordered file close?
         BZ    SELFENCL                 No. Don't close.
         TM    OPENDFLG,X'01'           Is SYSIN currently open?
         BZ    SELFENCL                 No. Bypass the CLOSE.
         NI    OPENDFLG,FF-X'01'        OPEN, but we're closing it now.
         CLOSE SYSIN
SELFENCL DS    0H
         TM    OPENDFLG,X'02'           Is SELREPT currently open?
         BZ    SELFRNCL                 No. Bypass the CLOSE.
         TM    CLOSWICH,X'02'           Has caller ordered file close?
         BZ    SELFRNCL                 No. Don't close.
         ST    R1,SAVER1C          *--------------------------*
         LA    R1,9                *  Identify from whence.   *
         ST    R7,SAVER7A          *  Save R7                 *
         BAL   R7,REPTLINE         *  Display current status. *
         L     R7,SAVER7A          *  Restore R7              *
         L     R1,SAVER1C          *--------------------------*
         NI    OPENDFLG,FF-X'02'        OPEN, but we're closing it now.
         CLOSE SELREPT
SELFRNCL DS    0H
         L     R13,4(,R13)         Finish program execution.
         MVC   16(4,R13),=F'0'          Return code 0     in R15
         MVC   24(4,R13),=A(COLUMN)     Address of column in R1
         LM    R14,R12,12(R13)
         BR    R14
* ----------------------------------------------------------------- *
         LTORG
         SPACE 3
* ----------------------------------------------------------------- *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                   S U B R O U T I N E S                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV4HEX  DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
REPTLINE DS    0H                       Display status of File Numbers
         TM    OPENDFLG,X'02'           Do not attempt to write if
         BZ    REPTLEND                   the file is not opened.
         STC   R1,PLACEMRK              Identifier of particular call.
         MVC   OUTLINE(133),OUTLINE-1   Clear output line
         L     R0,COLUMN                Virtual address of COLUMN mark.
         S     R0,=A(CARDIN-1)          Subtract address of CARD
         ST    R0,COLUMNX               Get position within the card.
         HEX   OUTLINE+4,4,COLUMNX      And display that.
         HEX   OUTLINE+14,4,INFILE      Display INFILE number.
         HEX   OUTLINE+24,4,OUTFILE     Display OUTFILE number.
         HEX   OUTLINE+34,4,LINFILE     Display limited ALL limit numbr
         HEX   OUTLINE+44,1,ALLSWICH    Display status of ALLSWICH
         HEX   OUTLINE+54,1,OPENDFLG    Display which files are open
         HEX   OUTLINE+64,1,CARDSWCH    Display new card switch status
         HEX   OUTLINE+74,1,PLACEMRK    Display identifier of this call
         PUT   SELREPT,OUTLINE
REPTLEND DS    0H
         BR    R7
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
* ----------------------------------------------------------------- *
*
         DS    0D
*
PLACEMRK DC    X'00'          Identifier from where REPTLINE called.
* --------------------------------------------------------- *
*   ----   Passed Values   ----    *
*
COLUMN   DC    F'0'             Address of starting column for search
COLUMNX  DC    F'0'             Actual Column number out of 80
INFILE   DC    F'0'             Current INPUT file number
OUTFILE  DC    F'0'             Current OUTPUT file number
LINFILE  DC    F'0'             Last input file for limited "ALL"
ALLSWICH DC    X'00'
*              X'01'            "ALL" processing is in effect
*              X'02'            "ALL" processing with limit in effect
*
OPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN
*              X'01'          SYSIN    DD IS OPEN
*              X'02'          SELREPT  DD IS OPEN
CLOSWICH DC    X'00'          SIGNAL TO CLOSE FILES
*              X'01'          CLOSE SYSIN
*              X'02'          CLOSE SELREPT
EOFFLAG  DC    X'00'          EOF FLAG
*              X'01'          EOF REACHED ON SYSIN
HEADSWCH DC    X'00'          PRINT ENTIRE SELREPT HEADING
*              X'01'          JUST PRINT DATA LINE
CARDSWCH DC    X'01'          SHOULD WE GET ANOTHER CARD?
*              X'01'          YES. GET ANOTHER CARD.
BACKSWCH DC    X'00'          BACK TO NORMAL PROCESSING AFTER "ALL"
*              X'01'          WE HAVE COME BACK FROM A LIMITED "ALL"
FLAGSYST DC    X'00'          Flag indicating DD present in JCL.
*              X'01'          SYSIN    DD is present
*              X'02'          SELREPT  DD is present
         DS    F
PASSLENG EQU   *-COLUMN
* --------------------------------------------------------- *
         DC    H'0'
PACK     PACK  WORK,0(0,1)
WORK     DC    D'0'
MESSAGE1 DC    CL133'1SELCARDS - FILE SELECTION CONTROL CARDS REPORT'
MESSAGE2 DC    CL133'    COLUMN    INFILE    OUTFILE   LINFILE   ALLSWI-
               CH  OPENDFLG  CARDSWCH  TYPE'
MESSAGE3 DC    CL133'    All Numeric Values are in Hexadecimal. '
MESSAGE4 DC    CL133'    TYPE:  05 is M/N,  06 is M,  02 is ALL process-
               ing.  09 is EOF in SELFILE.'
         SPACE 3
PARMSAVE DC    F'0'
PASSADDR DC    F'0'
         DC    CL4' '
         DS    0F
* --------------------------------------------------------- *
         SPACE 3
SYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X
               EODAD=SELFEND
SELREPT  DCB   DDNAME=SELREPT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA
* --------------------------------------------------------- *
SAVE1402 DS    6F                 Extra fullword for safety
SAVER1A  DS    F                  Register storage
SAVER1B  DS    F
SAVER1C  DS    F
SAVER3A  DS    F
SAVER7A  DS    F
*    ------------------------ >   Constants for Date and Time - below
TIMED    DS    CL7
DATED    DS    CL9
DATETIME DS    4F
         ORG   DATETIME
TIME     DS    CL4
         DS    CL4
DATE     DS    CL5
         DS    CL3
HEADDLIT DS    0CL31              Literal for headings - date and time
         DC    CL6'Today:'
         DC    CL2' '
HEADDATE DC    CL23' '
LEVELLIT DS    0CL21              Level number display for headings
         DC    CL6'Level '
LEVELL   DC    CL4'&LLEV'
         DC    CL2' ('
LEVDATE  DC    CL8' '             Assembly date for this program
         DC    CL1')'
*    ------------------------ >   Constants for Date and Time - above
*    --------------- >            Output line buffers - below
         DC    CL3' '
         DC    C' '
LINE     DC    CL133' '
         DC    C' '
CNTLINE  DC    CL133' '
         DC    C' '
OUTLINE  DC    CL133' '
         DC    C' '
PRTLINE  DC    CL133' '
         DC    CL80' '            Padding
*    --------------- >            Output line buffers - above
*
CARDIN   DC    CL80' '            SYSIN CARD INPUT AREA
*              Translate table - only allow numbers, ALL, - or /,
*                                and uppercase "all".
TRTBL0   DS    0D
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'60614040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40C14040404040404040404040404040'
         DC    XL16'404040D3404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'40C14040404040404040404040404040'
         DC    XL16'404040D3404040404040404040404040'
         DC    XL16'40404040404040404040404040404040'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'
         END
         TITLE 'TLPRNT - PRINT TAPE LABELS A-LA TLPRINT BUT CALLABLE'
*--------------------------------------------------------------------*
*                                                                    *
*        TLPRNT  -  SUBSTITUTE TLPRINT - TAPE LABEL PRINT            *
*                                                                    *
* AUTHOR :  SAM GOLOB                                                *
*                                                                    *
* PURPOSE:  THIS PROGRAM IS LIKE THE TLPRINT LABEL PRINTING          *
*           SUBROUTINE THAT IS CALLED BY THE COPYFILE PROGRAM,       *
*           BUT IT IS CALLED ONE LABEL AT A TIME, INSTEAD OF ALL     *
*           AT ONCE, FROM THE END OF THE CALLING PROGRAM.            *
*                                                                    *
*           THIS ALLOWS COPYFILE TO PRINT LIMITLESS AMOUNTS OF       *
*           LABELS ON A TAPE.  YOU DO NOT HAVE TO GATHER ALL THE     *
*           LABELS READ, INTO A GETMAINED AREA.  YOU PRINT THEM      *
*           ONE AT A TIME, AS YOU READ THEM IN FROM THE INPUT        *
*           TAPE.                                                    *
*                                                                    *
*           ALSO, ASCII LABEL SUPPORT HAS BEEN ADDED.                *
*                                                                    *
* DIFFERENCES:   TO END THE LABEL PRINT, FEED A LABEL RECORD         *
*                WITH X'00' AS THE FIRST CHARACTER, INTO THE         *
*                LABELIN AREA, ADDRESSED BY REGISTER 1 UPON          *
*                ENTRY TO THIS PROGRAM.                              *
*                                                                    *
*--------------------------------------------------------------------*
         MACRO
&NAME    OUT   &LINE
&NAME    LA    R0,&LINE        R0 = ADDRESS OF LINE TO BE PRINTED
         BAL   R7,PRINT        LINK TO THE PRINT SUBROUTINE.
         MEND
         GBLC  &LLEV
&LLEV    SETC  '1.0 '
         YREGS
         ENTRY TLPRNT
TLPRNT   CSECT
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'TLPRNT - PRINT TAPE FILES IF THEY ARE LABELS'
         DC    C' - '
         DC    C'LEVEL '
SYSLEV   DC    C'&LLEV'
         DC    C' - '
SYSDAT   DC    C'&SYSDATE'
         DC    C'  ',C'&SYSTIME ',C'--- '
SAVEAREA DC    18F'0'
EYECATCH DS    0D                   ENSURE ALIGNMENT
         SAVE  (14,12)
         LR    R5,R1                SAVE REGISTER 1 INPUT TO PROGRAM
         LA    R1,SAVEAREA          NEW SAVE AREA ADDRESS
         ST    R1,8(,R13)           FORWARD SAVE AREA CHAIN PTR
         ST    R13,4(,R1)           BACKWARD SAVE AREA CHAIN PTR
         LR    R13,R1               NEW SAVE AREA ADDRESS
         DROP  R15
* -----                             SET UP BASE REGISTERS
         USING TLPRNT,R12,R11
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LR    R1,R5                RESTORE REGISTER 1 INPUT
* ----------------------------------------------------------------- *
         ST    R1,PARMSAVE          Address of parm flags in caller
* ----------------------------------------------------------------- *
INITCONS DS    0H                   Initialize necessary quantities.
         OI    FLAGSYSL,X'00'       Initialize flag for LABLDUMP DD.     06237
         TM    ENDFLAG,X'01'        Have we turned this program off?
         BO    THEEND               Yes. Just go to THEEND and get out.
         MVI   LINE-1,X'40'         Make sure the print line is blank.
         MVC   LINE,LINE-1
         MVC   LABELIN(80),0(R1)    Copy label input area to ours.
         MVC   FLAGSYSL(1),80(R1)   Send FLAGSYSL here too.
         MVC   OPENSYSL(1),81(R1)   OPENSYSL flag
         LA    R3,LABELIN           Point R3 to the label input area.
         CLI   0(R3),X'00'          Test for last label.
         BE    LASTFILE             If so, close up and turn off pgm.
* ----------------------------------------------------------------- *
INITPCT  DS    0H
         TM    INITFLAG,X'01'       Have we been here before?
         BO    ENDINIT1             Yes. Don't do initialization again.
         OI    INITFLAG,X'01'       Only do once.
         MVC   TOTALPCT,=F'0'       Reset volume use percentage.
ENDINIT1 DS    0H
*-------------------------------------------------------------------*
*        COMPLETE THE HEADER.                                       *
*-------------------------------------------------------------------*
         TIME  DEC                  TIME PLEASE
         STM   0,1,WORK             SAVE IT ALL OFF
         MVC   DATE,=X'40202061202120'   MOVE IN EDIT PATTERN
         ED    DATE,WORK+5          EDIT THE DATE
         UNPK  TIME(3),WORK(2)      NOW WE
         MVI   TIME+2,C'.'               DO
         UNPK  TIME+3(3),WORK+1(2)         THE
         MVI   TIME+5,C' '                    TIME
* ----------------------------------------------------------------- *
         TM    FLAGSYSL,X'04'     TEST IF LABLDUMP DD IS THERE.
         BZ    NOLBLDMP           ISN'T. NO POINT TO RDJFCB.
READJLDM DS    0H
         TM    INITFLAG,X'02'
         BO    NOLBLDMP
         OI    INITFLAG,X'02'
         RDJFCB LABLDUMP                MOVE JFCB TO AREA
         LTR   R15,R15                  DDNAME SHOULD BE THERE
         BNZ   NOLBLDMP                 IF NOT, FLAG
         ST    R7,SAVE7REG              SAVE R7
         LA    R7,LBLJFCB               POINT TO JFCB AREA
         USING JFCBLK,R7                MAP THE AREA
         MVC   LDMPOUTM+38(44),JFCBDSNM
         MVC   LDMPOUTM+89(8),JFCBELNM
         MVC   LDMPOUTM+105(6),JFCBVOLS
         PUT   OUTTL,LDMPOUTM
         MSGZ  ' LABELS ARE BEING DUMPED.  OUTPUT DSN= ',C'1',         X
               (C,JFCBDSNM,44,0),'  MEMBER=',(C,JFCBELNM,8,0),         X
               '  VOLUME=',(C,JFCBVOLS,6,0)
         MVI   MSGCC,C'0'          DOUBLE SPACE THE NEXT MESSAGE.
         L     R7,SAVE7REG              RESTORE R7
NOLBLDMP DS    0H
* ----------------------------------------------------------------- *
WHATLBL  DS    0H                   Sort out all the label types....
*                                      First by EBCDIC and ASCII....
         CLC   LABELIN(4),=C'VOL1'
         BE    WHATLBLE
         CLC   LABELIN(4),=C'HDR1'
         BE    WHATLBLE
         CLC   LABELIN(4),=C'EOF1'
         BE    WHATLBLE
         CLC   LABELIN(4),=C'EOV1'
         BE    WHATLBLE
         CLC   LABELIN(4),=C'HDR2'
         BE    WHATLBLE
         CLC   LABELIN(4),=C'EOF2'
         BE    WHATLBLE
         CLC   LABELIN(4),=C'EOV2'
         BE    WHATLBLE
         CLC   LABELIN(3),=C'UHL'
         BE    WHATLBLE
         CLC   LABELIN(3),=C'UTL'
         BE    WHATLBLE
         CLC   LABELIN(4),=X'564F4C31'     ASCII VOL1
         BE    WHATLBLA
         CLC   LABELIN(4),=X'48445231'     ASCII HDR1
         BE    WHATLBLA
         CLC   LABELIN(4),=X'454F4631'     ASCII EOF1
         BE    WHATLBLA
         CLC   LABELIN(4),=X'454F5631'     ASCII EOV1
         BE    WHATLBLA
         CLC   LABELIN(4),=X'48445232'     ASCII HDR2
         BE    WHATLBLA
         CLC   LABELIN(4),=X'454F4632'     ASCII EOF2
         BE    WHATLBLA
         CLC   LABELIN(4),=X'454F5632'     ASCII EOV2
         BE    WHATLBLA
         CLC   LABELIN(3),=X'564F4C'       ASCII VOLx
         BE    WHATLBLA
         CLC   LABELIN(3),=X'484452'       ASCII HDRx
         BE    WHATLBLA
         CLC   LABELIN(3),=X'454F46'       ASCII EOFx
         BE    WHATLBLA
         CLC   LABELIN(3),=X'454F56'       ASCII EOVx
         BE    WHATLBLA
         CLC   LABELIN(3),=X'55564C'       ASCII UVLx
         BE    WHATLBLA
         CLC   LABELIN(3),=X'55484C'       ASCII UHLx
         BE    WHATLBLA
         CLC   LABELIN(3),=X'55544C'       ASCII UTLx
         BE    WHATLBLA
         B     NOPRTEXT                    Not a label format
*
WHATLBLE DS    0H                          EBCDIC (IBM) Labels
*                                          Go to appropriate routine
         CLC   LABELIN(4),=C'VOL1'
         BE    PXTVOL1
         CLC   LABELIN(4),=C'HDR1'
         BE    PXT1PRH
         CLC   LABELIN(4),=C'EOF1'
         BE    PXT1PRE
         CLC   LABELIN(4),=C'EOV1'
         BE    PXT1PRE
         CLC   LABELIN(4),=C'HDR2'
         BE    PXT2PRH
         CLC   LABELIN(4),=C'EOF2'
         BE    PXT2PRE
         CLC   LABELIN(4),=C'EOV2'
         BE    PXT2PRE
         CLC   LABELIN(3),=C'UHL'
         BE    PXTUSE
         CLC   LABELIN(3),=C'UTL'
         BE    PXTUSE
         B     NOPRTEXT                    Not a label format
* ----------------------------------------------------------------- *
WHATLBLA DS    0H                          ASCII  Labels
*
*        Common ASCII preparation routines......
*
* -- >  Make an EBCDIC version of this label in the LABELEBC field.
         MVC   LABELEBC(80),LABELIN    Move LABEL area to workarea
         TR    LABELEBC(80),TRTA2E     Translate to EBCDIC for print
         LA    R3,LABELEBC             Point to EBCDIC label version.
* -- >
*
*        ASCII preparations done......
*                                          Go to appropriate routine
*
* ----------------------------------------------------------------- *
         CLC   LABELIN(4),=X'564F4C31'     ASCII VOL1
         BE    PXTVOL1A
         CLC   LABELIN(4),=X'48445231'     ASCII HDR1
         BE    PXT1PRHA
         CLC   LABELIN(4),=X'454F4631'     ASCII EOF1
         BE    PXT1PREA
         CLC   LABELIN(4),=X'454F5631'     ASCII EOV1
         BE    PXT1PREA
         CLC   LABELIN(4),=X'48445232'     ASCII HDR2
         BE    PXT2PRHA
         CLC   LABELIN(4),=X'454F4632'     ASCII EOF2
         BE    PXT2PREA
         CLC   LABELIN(4),=X'454F5632'     ASCII EOV2
         BE    PXT2PREA
         CLC   LABELIN(3),=X'564F4C'       ASCII VOLx
         BE    PXTUSEA
         CLC   LABELIN(3),=X'484452'       ASCII HDRx
         BE    PXTUSEA
         CLC   LABELIN(3),=X'454F46'       ASCII EOFx
         BE    PXTUSEA
         CLC   LABELIN(3),=X'454F56'       ASCII EOVx
         BE    PXTUSEA
         CLC   LABELIN(3),=X'55564C'       ASCII UVLx
         BE    PXTUSEA
         CLC   LABELIN(3),=X'55484C'       ASCII UHLx
         BE    PXTUSEA
         CLC   LABELIN(3),=X'55544C'       ASCII UTLx
         BE    PXTUSEA
         B     NOPRTEXT                    Not a label format
* ----------------------------------------------------------------- *
PXTVOL1  DS    0H
         BAL   R4,DUMPLABL
         MVC   SERIAL,4(R3)         Copy volume serial number.
         MVC   OWNER(10),41(R3)     Copy 10 character EBCDIC owner id.
         TM    OPENSYSL,X'04'
         BZ    NOINHDRX
         TM    INITFLAG,X'04'
         PUT   OUTTL,HEADER
         OI    INITFLAG,X'04'
NOINHDRX DS    0H
* ----------------------------------------------------------------- *
         TM    INITFLAG,X'02'       Have we been here before?
         BO    ENDINIT2             Yes. Don't do initialization again.
         OI    INITFLAG,X'02'
         PUT   OUTTL,HEADER
         LA    R6,0                 Reset file count for a new page.
         ST    R6,CURCOUNT          And store it so next call knows.
ENDINIT2 DS    0H
         B     NOPRTEXT             Return to caller.
* ---------------------- *
PXTVOL1A DS    0H
         BAL   R4,DUMPLABL
         MVC   SERIAL,4(R3)         Copy volume serial number.
         MVC   OWNER(14),37(R3)     Copy 14 character ASCII owner id.
* ----------------------------------------------------------------- *
         TM    INITFLAG,X'02'       Have we been here before?
         BO    ENDINIT3             Yes. Don't do initialization again.
         OI    INITFLAG,X'02'
         PUT   OUTTL,HEADER
         LA    R6,0                 Reset file count for a new page.
         ST    R6,CURCOUNT          And store it so next call knows.
ENDINIT3 DS    0H
         B     NOPRTEXT             Return to caller.
* ---------------------- *
PXT1PRH  DS    0H
         BAL   R4,DUMPLABL
         MVC   FILENO,31(R3)            COPY FILE NO.
         L     R1,CURCOUNT              Increment current count
         LA    R1,1(,R1)                  of files
         ST    R1,CURCOUNT                  on this page.
         OUT   LINE1                    PRINT LINE 1.
         MVC   DSN,4(R3)                COPY DSN.
         MVC   CRDATE,42(R3)            COPY CREATION DATE.
         MVC   EXDATE,48(R3)            COPY EXPIRATION DATE.
         B     NOPRTEXT
* ---------------------- *
PXT1PRHA DS    0H
         BAL   R4,DUMPLABL
         MVC   FILENO,31(R3)            COPY FILE NO.
         L     R1,CURCOUNT              Increment current count
         LA    R1,1(,R1)                  of files
         ST    R1,CURCOUNT                  on this page.
         OUT   LINE1                    PRINT LINE 1.
         MVC   DSN,4(R3)                COPY DSN.
         MVC   CRDATE,42(R3)            COPY CREATION DATE.
         MVC   EXDATE,48(R3)            COPY EXPIRATION DATE.
         B     NOPRTEXT
* ---------------------- *
PXT2PRH  DS    0H
         BAL   R4,DUMPLABL
         TM    OPENSYSL,X'04'
         BZ    NOPRHDRD
         PUT   LABLDUMP,LABELITH
NOPRHDRD DS    0H
         MVC   CREATOR(8),17(R3)        WHO CREATED THE TAPE
         MVC   RECFM(1),4(R3)           COPY DCB PARAMETERS.
         CLI   15(R3),C'0'              3480 FULL FUNCTION MODE ?JDM1
         BNE   N3480F                                            JDM1
         MVC   DENSPEC(7),=CL7' '       BLANK OUT WORDS          JDM1
         B     IS3480F                                           JDM1
N3480F   DS    0H                                                JDM1
         MVC   DEN(1),15(R3)            COPY DEN NO.
IS3480F  DS    0H                                                JDM1
         MVC   RECFM+1(1),38(R3)
         MVC   RECFM+2(1),36(R3)
         MVC   LRECL,10(R3)             MOVE IN LRECL
         MVC   BLKSIZE,5(R3)            MOVE IN BLKSIZE
         OUT   LINE2                    PRINT LINE 2.
         B     NOPRTEXT
* ---------------------- *
PXT2PRHA DS    0H
         BAL   R4,DUMPLABL
         MVC   CREATOR(8),17(R3)        WHO CREATED THE TAPE
         MVC   RECFM(1),4(R3)           COPY DCB PARAMETERS.
         CLI   15(R3),C'0'              3480 FULL FUNCTION MODE ?JDM1
         BNE   N3480FA                                           JDM1
         MVC   DENSPEC(7),=CL7' '       BLANK OUT WORDS          JDM1
         B     IS3480FA                                          JDM1
N3480FA  DS    0H                                                JDM1
         MVC   DEN(1),15(R3)            COPY DEN NO.
IS3480FA DS    0H                                                JDM1
         MVC   RECFM+1(1),38(R3)
         MVC   RECFM+2(1),36(R3)
         MVC   LRECL,10(R3)             MOVE IN LRECL
         MVC   BLKSIZE,5(R3)            MOVE IN BLKSIZE
         OUT   LINE2                    PRINT LINE 2.
         B     NOPRTEXT
* ---------------------- *
PXT1PRE  DS    0H
         BAL   R4,DUMPLABL
         MVC   BLOCKS,54(R3)       Copy number of blocks.
         MVC   VOLSEQNO,27(R3)     Copy volume sequence number.
         BAL   R4,COMPUTE          Compute % of volume used by file
         OUT   LINE3               Print line 3.
         CLC   VOLSEQNO,=C'0001'   Test for not volume 1.
         BNE   FOUNDEOV
         CLI   2(R3),C'V'          Test for EOV label.
         BNE   NOTFEOV             EOV not found.
FOUNDEOV DS    0H                  EOV found.
         OUT   MSG2                Print message 2.
NOTFEOV  DS    0H
         CLI   0(R3),X'00'         Test for turnoff, from caller.
         BE    LASTFILE            Turnoff "label" received here.
         B     NOPRTEXT            Not received, just exit.
* ---------------------- *
PXT1PREA DS    0H
         BAL   R4,DUMPLABL
         MVC   BLOCKS,54(R3)       Copy number of blocks.
         MVC   VOLSEQNO,27(R3)     Copy volume sequence number.
         BAL   R4,COMPUTE          Compute % of volume used by file
         OUT   LINE3               Print line 3.
         CLC   VOLSEQNO,=C'0001'   Test for not volume 1.
         BNE   FOUNAEOV
         CLI   2(R3),C'V'          Test for EOV label.
         BNE   NOTFEOVA            EOV not found.
FOUNAEOV DS    0H                  EOV found.
         OUT   MSG2                Print message 2.
NOTFEOVA DS    0H
         CLI   0(R3),X'00'         Test for turnoff, from caller.
         BE    LASTFILE            Turnoff "label" received here.
         B     NOPRTEXT            Not received, just exit.
* ---------------------- *
PXT2PRE  DS    0H                  No print request from EOF2, EOV2.
         BAL   R4,DUMPLABL
         TM    OPENSYSL,X'04'
         BZ    NOPREOFD
         CLI   LABELIN+2,C'F'
         BE    PRE2OFFF
         CLI   LABELIN+2,C'V'
         BE    PRE2OFFV
         B     PRE2OFFX
PRE2OFFF DS    0H
         PUT   LABLDUMP,LABELITR
         B     PRE2OFFX
PRE2OFFV DS    0H
         PUT   LABLDUMP,LABELITV
         B     PRE2OFFX
PRE2OFFX DS    0H
NOPREOFD DS    0H
         B     NOPRTEXT
* ---------------------- *
PXT2PREA DS    0H                  No print request from EOF2, EOV2.
         OI    OPENSYSL,X'04'
         BAL   R4,DUMPLABL
         NI    OPENSYSL,X'FF'-X'04'
         B     NOPRTEXT
* ---------------------- *
PXTUSE   DS    0H                  No print request from user labels.
         BAL   R4,DUMPLABL
         B     NOPRTEXT
* ---------------------- *
PXTUSEA  DS    0H                  No print request from user labels.
         BAL   R4,DUMPLABL
         B     NOPRTEXT
* ---------------------- *
NOPRTEXT DS    0H                  General exit from routines.
* ----------------------------------------------------------------- *
THEEND   DS    0H                  Finish call to this program.
         L     R13,4(,R13)
         MVC   16(4,R13),=F'0'     Return code 0 in R15
* - - - - - - - - - - Pass addresses of our passed areas back - none.
         LM    R14,R12,12(R13)
         BR    R14                 Go back to caller.
         EJECT
LASTFILE DS    0H                  At last call, calculate % of tape.
         L     R1,TOTALPCT
         C     R1,=F'10000'        Compare with 100 percent.
         BL    SUMMTOTM            Print summary total message
         L     R1,=F'10000'        Limit total to 100 percent.
SUMMTOTM DS    0H                  Summary total message.
         CVD   R1,WORK
         MVC   TOTPCT,=X'402021204B2020'
         ED    TOTPCT,WORK+5
         OUT   LASTLINE            Print volume summary line.
CLOSE    DS    0H
         OI    ENDFLAG,X'01'       This flag on, turns this program off
*                                  on subsequent calls.
         TM    OPENSYSL,X'08'
         BZ    NOCLOSET
         CLOSE OUTTL
         NI    OPENSYSL,X'FF'-X'08'
NOCLOSET DS    0H
         TM    OPENSYSL,X'04'
         BZ    NOCLOSEL
         CLOSE LABLDUMP
         NI    OPENSYSL,X'FF'-X'04'
NOCLOSEL DS    0H
         B     THEEND
* ----------------------------------------------------------------- *
* ---            S  U  B  R  O  U  T  I  N  E  S                --- *
* ----------------------------------------------------------------- *
PRINT    DS    0H
         L     R6,CURCOUNT         Count quantity stored from last call
         C     R6,MAXCOUNT         Test number of files already on page
         BH    PAGE                Start a new page if necessary.
         PUT   OUTTL               Print the line.
         BR    R7                  Return to caller.
PAGE     DS    0H
         LR    R2,R0               Save R0 which points to print line.
         PUT   OUTTL,HEADER        Print header line instead.
         LA    R6,1                Reset file count for a new page.
         ST    R6,CURCOUNT         And store it so next call knows.
         LR    R0,R2               Put print line back where it was.
         B     PRINT               Go and print the current line.
         SPACE
* ----------------------------------------------------------------- *
DUMPLABL DS    0H
         TM    OPENSYSL,X'04'
         BZ    DUMPLEND
         PUT   LABLDUMP,LABELIN
DUMPLEND DS    0H
         BR    R4
* ----------------------------------------------------------------- *
COMPUTE  DS    0H
         PACK  WORK,BLKSIZE
         CVB   R1,WORK             REG 1 = BLKSIZE
         SRL   R1,4                DIVIDE BY 16.
         LA    R1,70(,1)           ADD 70.
         PACK  WORK,BLOCKS
         CVB   R14,WORK            REG 14 = NO. OF BLOCKS
         MR    R0,14
         LA    R1,1400(,1)         ADD 5*280.
         D     R0,=F'280'          REG 1 = 100*(PERCENT OF VOLUME)
         C     R1,=F'10000'        COMPARE WITH 100 PERCENT.
         BL    TOTPCALC
         L     R1,=F'10000'        LIMIT RESULT TO 100 PERCENT.
TOTPCALC DS    0H
         CVD   R1,WORK
         A     R1,TOTALPCT         ACCUMULATE TOTAL FOR ALL FILES.
         ST    R1,TOTALPCT
         MVC   FILEPCT,=X'402021204B2020'
         ED    FILEPCT,WORK+5
         BR    R4                  RETURN.
         SPACE
* ----------------------------------------------------------------- *
*--OUTPUT FORMATS--***************************************************
         SPACE
HEADER   DC    C'1',13C'*',C' INFORMATION FROM LABELS OF TAPE NO. '
SERIAL   DC    C'XXXXXX',C' ON DATE'
DATE     DC    C' YY/DDD',C' AT TIME '
TIME     DC    C'HH.MM ',9C'*',C'   OWNER. '
OWNER    DC    CL10' '
OWNERE   DC    CL4' '
         DC    CL13' '
***********************************************************************
LINE1    DC    C'-   FILE NO. '
FILENO   DC    C'XXXX',CL116' '
***********************************************************************
LINE2    DC    CL4'0',C'DSN='
DSN      DC    CL17' ',CL3' ',C'CREATED '
CRDATE   DC    C'YYDDD',C' BY '
CREATOR  DC    CL8' ',C'   EXPIRES '
EXDATE   DC    C'YYDDD',CL1' ',C'RECFM='
RECFM    DC    C'XXX',C'   LRECL='
LRECL    DC    C'XXXXX',C'   BLKSIZE='
BLKSIZE  DC    C'XXXXX'                                          JDM1
DENSPEC  DC    C'   DEN='                                        JDM1
DEN      DC    CL4' '
         DC    CL13' '
***********************************************************************
LINE3    DC    CL8'0',C'THERE ARE '
BLOCKS   DC    C'XXXXXX',CL38' BLOCKS IN THIS FILE.'
         DC    C'THIS FILE OCCUPIES'
FILEPCT  DC    C' XXX.XX',CL46' PERCENT OF THE VOLUME.'
***********************************************************************
LASTLINE DC    C'-',13C'*'
TOTPCT   DC    C' XXX.XX'
         DC    CL112' PERCENT OF THIS VOLUME HAS BEEN USED.'
***********************************************************************
MSG1     DC    CL8'0',C'***THE '
MISLABEL DC    C'XXXX',CL114' LABEL WAS NOT FOUND.'
***********************************************************************
MSG2     DC    CL8'0',C'***THIS IS VOLUME '
VOLSEQNO DC    C'XXXX',CL103' OF A MULTI-VOLUME DATA SET.'
***********************************************************************
         LTORG
FLAGSYSL DC    X'00'          Flag indicating DD present in JCL.
*              X'04'          LABLDUMP DD is present
*              X'08'          TAPELOUT DD is present
OPENSYSL DC    X'00'          NEXT TO FLAGSYSL - KEEP TOGETHER
EOLGFLAG DC    X'00'          END OF LABEL GROUP FLAG - FOR LABLDUMP     08456
*              X'01'          WE ARE IN A HDR GROUP                      08457
*              X'02'          WE ARE IN A EOF GROUP                      08458
*              X'04'          WE ARE IN A EOV GROUP                      08459
* ------------------------------------------------------------------- *
LDMPOUTM DC    C' LABELS ARE BEING DUMPED.  OUTPUT DSN=               '  05107
         DC    C'                             MEMBER=         VOLUME= '  05108
         DC    C'                          '                             05109
SAVE7REG DC    F'0'
* ------------------------------------------------------------------- *
COUNT    EQU   6               REG 6 = COUNT OF FILES PER PAGE
         DC    X'40'
LINE     DC    CL133' '
* ------------------------------------------------------------------- *
LABELEBC DC    CL80' '
LABELIN  DS    0CL80
LABEL60  DC    CL60' '
LABEL20  DC    CL20' '
* ------------------------------------------------------------------- *
         ENTRY OUTTL
OUTTL    DCB   DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=133,BLKSIZE=133,      X
               DDNAME=TAPELOUT
         ENTRY LABLDUMP
LABLDUMP DCB   MACRF=PM,DDNAME=LABLDUMP,DSORG=PS,RECFM=FB,LRECL=80,    X
               EXLST=LBLEXLST
WORK     DC    D'0'
MAXCOUNT DC    F'7'            MAX NO. OF FILES PER PAGE
CURCOUNT DC    F'0'            CURRENT COUNT OF FILES PER PAGE
TOTALPCT DC    F'0'            100*(TOTAL %  OF VOLUME USED SO FAR)
PARMSAVE DC    F'0'
ENDFLAG  DC    X'00'
*              X'01'           DO NOT PRINT LABELS ANY MORE
INITFLAG DC    X'00'           Certain things only done once.
         DS    0D                                                     *  05361
LBLEXLST DC    X'87',AL3(LBLJFCB)                                        05362
LBLJFCB  DC    44F'0'                                                    05363
* ------------------------------------------------------------------- *
TRTA2E   DS    0D
         DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'405A7F7B5B6C507D4D5D5C4E6B604B61'
         DC    XL16'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'
         DC    XL16'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'
         DC    XL16'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'
         DC    XL16'79818283848586878889919293949596'
         DC    XL16'979899A2A3A4A5A6A7A8A9C04FD0A17F'
         DC    XL16'808182838485868788898A8B8C8D8E8F'
         DC    XL16'909192939495969798999A9B9C9D9E9F'
         DC    XL16'A0A14AB19FB26AB5BBB4AAABB0ADAFBC'
         DC    XL16'B08FB2B3BEA0B6B39DB99BB8B7B8B9AB'
         DC    XL16'C0C1C2C3C4C59EC7C8C9CACBCCCDCECF'
         DC    XL16'ACD1D2D3D4D5D6BFD8D9DADBDCDDAEDF'
         DC    XL16'E0E1E2E3E4E59CE7E8E9EAEBECEDEEEF'
         DC    XL16'8CF1F2F3F4F5F6E1F8F9FAFBFC8D8EFF'
* ------------------------------------------------------------------- *
LABELITH DC    CL80'----ENDOFLABELHEADER '                               05050
LABELITI DC    CL80'----ENDOFLABELHEADERINIT'                            05051
LABELITR DC    CL80'----ENDOFLABELTRAILER'                               05052
LABELITV DC    CL80'----ENDOFLABELTRAILEREOV'                            05053
JFCBLK   DSECT                                                           05594
         IEFJFCBN LIST=YES                                               05595
         END
