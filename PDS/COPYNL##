./ ADD NAME=COPYNLN$ 0126-00048-03220-1819-00031-00028-00000-SBGOLOB
//SBGOLOBU JOB (CCMVS),ASMLINK,
// NOTIFY=&SYSUID,
// CLASS=B,MSGCLASS=X,COND=(1,LT)
//*
//*     ASM LINKEDIT FROM SOURCE ASM
//*
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,BATCH,FLAG(5))
//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R14.MACLIB
//         DD DISP=SHR,DSN=SBGOLOB.R14.MODGEN
//         DD DISP=SHR,DSN=SBGOLOB.CBT462.FILE229
//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT462.FILE229(COPYNLNL)
//         DD DISP=SHR,DSN=SBGOLOB.CBT462.FILE229(MSGWRITE)
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,
//            DSN=&&TEMP
//*
//LKED   EXEC  PGM=HEWLKED,
//       PARM='NCAL,MAP,LIST,LET'
//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD
//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD
//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP
//SYSLIN   DD  *
 INCLUDE OBJECT
 ENTRY   COPYNLNL
 SETCODE AC(1)
 SETSSI  CB462229
 NAME    COPYNLNL(R)
/*
./ ADD NAME=COPYNLN# 0114-82142-03250-1106-00258-00182-00000-SBGOLOB
  * NOTE:  Control cards for the COPYSLNL and COPYNLNL programs
           are identical to those for the COPYFILE program.  The
           help for these control cards is included here.  Control
           card handling is now done by the called program SELCARDS,
           whose source code is included in the source code for all
           three programs.  Assembly of the source code must be
           done with PARM=BATCH in effect, for the assembler step.

    >>>    COPYNLNL has now been modified so that the restriction
    >>>    that input file numbers be in ASCENDING order does not
    >>>    apply anymore.  You can code 7/3  2  50  3  51 -100 now
    >>>    for a COPYNLNL run.

           COPYNLNL copies files from an INPUT NL tape to an
           OUTPUT NL tape, with the ability to select which files
           are to be copied.  COPYNLNL stops when it sees two
           consecutive tape marks on the input tape.

           COPYFILE (on CBT Tape File 229) does the same thing for
           SL to SL tapes.  COPYNLNL stops after two consecutive
           tape marks on the input tape.  COPYFILE and COPYSLNL,
           being written for SL input tapes, are considerably
           "smarter".

  * --------------------------------------------------------------- *

             C  O  P  Y  N  L  N  L

          RELEASE     07 SEP  2003


   FUNCTION:  COPY SELECTED FILES FROM A MULTIPLE-FILE INPUT TAPE
              TO A MULTIPLE FILE OUTPUT TAPE.

   EXEC PARAMETER:  IF PARM=TAPEL IS SPECIFIED ON THE EXEC CARD,
              A 'TAPEL' LISTING OF THE OUTPUT TAPE AFTER THE
              COPY OPERATION WILL BE PROVIDED.  (This does not
              apply to the COPYNLNL program, which assumes NL
              tapes for input and output.)

   PROCEDURE:

        //COPYNLNL PROC FROM=,TO=,DSP=KEEP
        //COPYSTEP EXEC PGM=COPYNLNL,REGION=2000K,PARM=' -OPTIONAL- '
        //MSG      DD SYSOUT=A
        //TAPELOUT DD SYSOUT=A
        //SELREPT  DD SYSOUT=A             (OPTIONAL)
        //IN       DD DSN=INPUT.FILE,UNIT=TAPE,DISP=OLD,
        //            VOL=SER=&FROM
        //TAPELIN  DD DSN=OUTPUT.FILE,UNIT=TAPE,VOL=SER=&TO,
        //            DISP=(NEW,&DSP)
        //         PEND


        //SYSIN    DD *
         - CONTROL CARDS -
         /*


   DATASETS:  (ALL PROVIDED BY THE PROCEDURE)

              //IN      DD     - THE INPUT TAPE -

              //TAPELIN DD     - THE OUTPUT TAPE, EITHER A SCRATCH
                                 TAPE OR ONE ALREADY CONTAINING SOME
                                 FILES TO BE PRESERVED.

              //MSG      DD SYSOUT=A

              //SELREPT  DD SYSOUT=A   -FILE SELECTION PROCESS REPORT
                                        (THIS IS AN OPTIONAL DDNAME)

              //TAPELOUT DD SYSOUT=A   -TAPEL LISTING FOR THE OUTPUT
                                        TAPE-



   CONTROL CARDS:

              THE COPYNLNL PROGRAM IS CONTROLLED BY SYSIN CARDS.
              ONE OR MORE CARDS MAY BE USED.  72 CARD COLUMNS ARE
              SCANNED.  THE CARDS CONTAIN THE NUMBERS OF THE FILES
              OF THE INPUT TAPE WHICH ARE TO BE COPIED TO THE
              OUTPUT TAPE.  THESE NUMBERS ARE NO LONGER REQUIRED
              TO BE IN ASCENDING ORDER.  IF THE FILES ARE TO BE
              COPIED TO AN EXISTING SET OF FILES ON THE OUTPUT
              TAPE, THE NUMBER OF THE FIRST NEW OUTPUT FILE IS
              ATTACHED TO THE NUMBER OF THE FIRST INPUT FILE WITH
              / . SEE THE EXAMPLES.

       >>>    It is now possible to write over the same output
       >>>    file twice.  If this happens, such as with cards:
       >>>       7/1  2  -30 31/27
       >>>    the process will work, but you will get a warning
       >>>    message in SYSPRINT, and the program gives a
       >>>    return code of 4, instead of a code of 0.

        New control card features:  (with the SELCARDS program)

              To copy a range of files, not to the end of the input
              tape, code the first file number in the range, followed
              by the last number in the range, preceded by a dash.

              For example, to copy files 51 to 100 from an input tape,
              code:   51 -100   with space(s) in between the two
              control numbers, as shown.  This will copy files 51,
              52, ...  and so forth, from the input tape, to
              consecutive files on the output tape, stopping after
              file 100 on the input tape.  Later files may be copied
              afterwards, for example:   51  -100 103   will copy
              files 51 thru 100 on the input tape, skip files 101
              and 102, and copy file 103.

   EXAMPLES:

              1. COPY FILES 3, 5, 6, 9 FROM TAPE 101003 TO A NEW
                 SCRATCH TAPE.

                 // EXEC COPYNLNL,FROM=101003
                 //SYSIN    DD *
                  3 5 6 9
                 /*

              2. ADD THE SAME FILES TO TAPE 007177, WHICH ALREADY
                 HAS SEVEN FILES WHICH ARE TO BE PRESERVED.

                 //   EXEC COPYNLNL,FROM=101003,TO=007177
                 //SYSIN  DD *
                   3/8  5  6  9
                 /*

              3. MERGE SELECTED FILES FROM THREE TAPES, AND PRODUCE
                 A TAPEL LISTING OF THE RESULT.

                 //  EXEC COPYNLNL,FROM=123770,TO=100022,DSP=PASS
                 //SYSIN   DD *
                  1  2  52  53
                 /*
                 //  EXEC COPYNLNL,FROM=101832,TO=100022,DSP=PASS
                 //SYSIN   DD *
                   7/5  7  12  13
                 /*
                 //  EXEC COPYNLNL,FROM=111333,TO=100022,
                 //      PARM=TAPEL
                 //SYSIN   DD *
                   12/9
                 /*


     NOTES:      1. FILES MUST BE COPIED FROM THE INPUT TAPE IN THE
                    SAME ORDER IN WHICH THEY APPEAR, I.E. EACH INPUT
                    FILE NUMBER IS LARGER THAN THE ONE SPECIFIED IN
                    THE PRECEDING CONTROL CARD.

                 2. NORMALLY THE FIRST OUTPUT FILE NUMBER SPECIFIED
                    WOULD BE ONE GREATER THAN THE LAST EXISTING FILE
                    ON THE OUTPUT TAPE. IF IT IS LESS, AN EXISTING
                    FILE WILL BE OVERWRITTEN. IF IT IS MORE, THE
                    TAPE WILL RUN OFF ITS REEL BY THE PROGRAM
                    SEARCHING FOR THE RIGHT STARTING POINT.

                 3. THE REGION REQUIRED IS 33K PLUS FIVE TIMES
                    ( MVT IS TWO TIMES ) THE LARGEST BLKSIZE OF
                    THE FILES COPIED. THE COPY TIME IS SUBSTANTIALLY
                    LESS THAN 1 MINUTE.

                 4. THE INPUT AND OUTPUT TAPES MUST HAVE STANDARD
                    LABELS.

                 5. DATASETS WITH ANY DCB PARAMETERS WILL BE COPIED
                    SUCCESSFULLY, EVEN IF THEY VARY FROM FILE TO FILE.
                    DCB PARAMETERS SHOULD NOT BE SPECIFIED AS AN
                    OVERRIDE TO THE PROCEDURE.


                 6. THE OUTPUT FILES SHOULD NOT BE CATALOGED VIA JCL.
                    EVEN THOUGH THE JOB CALLS FOR SL SCRATCH, IT APPEARS
                    THAT THE HEADER IS DESTROYED WHEN THE KEEP MSG
                    HAS L00100 ( EXAMPLE ) AS IF IT WAS A NL TAPE.
                    NEVER FEAR, THE OUTPUT LABEL IS INTACT.

               ADDENDUM TO THE COPYNLNL PROGRAM
               --------------------------------


    THE WORD 'ALL' MAY NOW BE USED ON CONTROL CARDS. IT CAUSES THE REST
  THE FILES ON THE INPUT TAPE TO BE COPIED TO THE OUTPUT TAPE.

    A DASH, FOLLOWED IMMEDIATELY BY A FILE NUMBER, HAS THE SAME EFFECT
  AS 'ALL', EXCEPT THAT THE MULTI-FILE COPY WILL STOP AT THE INPUT FILE
  NUMBER AFTER THE DASH.  FOR EXAMPLE, -35 WILL COPY THE FIRST 35 FILES
  OF A TAPE, AND WILL THEN STOP.  Other control statements may now be
  coded after a control statement with a dash.  To see the detailed
  action of the coded control statements, use the optional DD name of
  //SELREPT  DD  SYSOUT=*  .


   EXAMPLES:

   1. COPY ALL FILES FROM TAPE 100035 TO A NEW SCRATCH TAPE.

      //  EXEC COPYNLNL,FROM=100035
      //SYSIN  DD *
        ALL
      /*

   2. COPY FILES 3, 5, AND 7 THROUGH THE END OF THE TAPE TO A NEW
      SCRATCH TAPE.

     //  EXEC COPYNLNL,FROM=100035
      //SYSIN   DD *
       3  5  7  ALL
      /*

   2A. COPY FILES 3, 5, AND 7 THROUGH FILE 45 TO A NEW SCRATCH TAPE.

     //  EXEC COPYNLNL,FROM=100035
      //SYSIN   DD *
       3  5  7  -45
      /*

   2B. COPY FILES 3, 5, AND 7 THROUGH FILE 45  and 50 THROUGH 100
       TO A NEW SCRATCH TAPE.

     //  EXEC COPYNLNL,FROM=100035
      //SYSIN   DD *
       3  5  7  -45   50 -100
      /*

   3. ADD THE FILES FROM TAPE 100035 TO TAPE 100070 AFTER EXIST-
      ING FILE 8.

      //  EXEC COPYNLNL,FROM=100035,TO=100070
      //SYSIN  DD *
       1/9  ALL
      /*

   3A. ADD THE FILES FROM TAPE 100035 TO TAPE 100070 AFTER EXIST-
      ING FILE 8, BUT ONLY THE FIRST 10 FILES.

      //  EXEC COPYNLNL,FROM=100035,TO=100070
      //SYSIN  DD *
       1/9  -10
      /*

   4. ADD FILES 3 AND 5 THROUGH 12 ( THAT IS ALL THERE ARE ) FROM
      TAPE 100035 TO TAPE 100050 WHICH ALREADY CONTAINS THREE
      FILES WHICH ARE TO BE KEPT.

      //  EXEC COPYNLNL,FROM=100035,TO=100050
      //SYSIN    DD *
       3/4  5  ALL
      /*

 NOTE:  WITH THE LATEST EDITION OF COPYNLNL WHICH USES THE SELCARDS
        PROGRAM TO CHOOSE THE FILES TO BE COPIED, MORE THAN ONE DASH
        CAN BE CODED, TO COPY MORE THAN ONE RANGE OF FILE NUMBERS.

./ ADD NAME=COPYNLNL 0118-00086-03250-1102-01152-00427-00000-SBGOLOB
         TITLE ' C O P Y N L N L  '                           09/03 SBG
*------------------------------------------------------------------*
*                                                                  *
*        THIS IS COPYNLNL, A PGM USED TO COPY SELECTED FILES       *
*        FROM A NL TO AN NL TAPE, ALL CONTROL IS VIA SYSIN         *
*        CARDS.                                                    *
*                                                                  *
*   THIS PROGRAM IS NOT-REENTRANT AND NOT-REUSABLE, ETC.           *
*   BECAUSE IT MODIFIES ITSELF QUITE EXTENSIVELY (SBG).            *
*                                                                  *
* COURTESY:  JIM MARSHALL, CAPT, USAF-RET                          *
*                                                                  *
* ADAPTED FOR NL TO NL COPYING BY:   SAM GOLOB                     *
*                                                                  *
* ORIGINAL PROGRAM WAS COPYFILE, OR COPYSLSL, WHICH WAS WRITTEN    *
*        BY MR FRANK YATES, AEROSPACE CORP WHILE AT MULTIPURPOSE   *
*        FACILITY, LOWRY AFB, CO FOR USE IN OS/MVT.                *
*                                                                  *
* NOTES:    1. LKED AC=1                                           *
*           2. NEEDS APPENDAGE IGG019WE                            *
*           3. NEEDS SUBROUTINE MSGWRITE                           *
*                                                                  *
* CHANGE LOG:   (CONTROL CARDS ARE THE SAME AS FOR COPYFILE)       *
*                                                                  *
*    12 MAR 74 - ADDED WORD 'ALL' AS A VALID OPTION ON THE         *
*                CONTROL CARDS.                                    *
*                                                                  *
*    22 AUG 81 - INSTALLED AIR FORCE DATA SERVICES CENTER,         *
*                PENTAGON, WASHINGTON D.C. WITH FOLLOWING CHANGES  *
*                1. CLEANED UP CODE AND DOCUMENTED CODE ( WILL     *
*                   CONTINUE AS THE CODE IS SLICK AND FRANK        *
*                   WROTE IT FOR HIMSELF).                         *
*                2. CHANGED CONTROL CARD SCAN TO ONLY LOOK AT      *
*                   72 COLUMNS VERSUS 80. MPF HAD NO TSO.          *
*                3. INSTALLED AND YOU MUST MARK IT AUTHORIZED      *
*                   TO RUN IM MVS.                                 *
*                4. CHANGED SOME UNIQUE SAVE AND RETURN MACROS     *
*                   TO STANDARD IBM MACROS.                        *
*                5. IN MVS YOU MUST SUPPLY DSNAMES ON THE JCL      *
*                   FOR BOTH INPUT AND OUTPUT DD CARDS. THEY ARE   *
*                   NOT USED BUT MUST BE THERE  ( WITH MVT YOU     *
*                   YOU CAN LEAVE THOSE OUT ).                     *
*                6. CREATED DOCUMENTATION IN A SEPARATE MEMBER.    *
*                   LOOK AT COPYFIL#. THIS WAS TAKEN FROM MY BOOK  *
*                   'KING JAMES VERSION OF THE HOLY YATES'.        *
*                                                                  *
*    10 OCT 81 - PRINTOUT TELLING YOU WHAT FILE WAS COPIED TO      *
*                WHAT FILE WAS ONLY SETUP FOR LESS THAN 99 FILES   *
*                NOW WILL HANDLE UP TO 999 FILES.                  *
*                                                                  *
*    27 JAN 93 - ADDED SUPPORT TO COPY MULTIPLE CONSECUTIVE FILES  *
*                BUT NOT TO THE END OF THE TAPE.  LAST INPUT FILE  *
*                IS CODED AFTER A DASH.  E.G.  101/101 -200        *
*                WHICH COPIES FILES 101 THRU 200 FROM ONE TAPE     *
*                TO THE OTHER.                                     *
*                                                                  *
*    26 MAR 00 - WROTE COPYNLNL PROGRAM, LEAVING ALL THE           *
*                CONTROL CARD LOGIC INTACT AND UNCHANGED.          *
*                THIS PROGRAM ASSUMES AN NL INPUT TAPE,            *
*                AND DOESN'T HAVE SPECIFIC KNOWLEDGE               *
*                ABOUT STANDARD LABELS AS YET.  OUTPUT IS          *
*                AN NL TAPE AS WELL.                               *
*                                                                  *
*    27 MAR 00 - ADDED EYECATCHER.                                 *
*                                                                  *
*    29 MAR 00 - FIXED LOOPING THROUGH GETMAIN - TESTED BY         *
*                TOM BRENNAN.  THANKS, TOM.                        *
*                                                                  *
*    06 AUG 03 - REPLACE CONTROL CARD SELECTION WITH SELCARDS      *
*                PROGRAM.  There are many advantages to that:      *
*                                                                  *
*                1.  Almost impossible to make control card        *
*                    errors because the TRANSLATE cleans all       *
*                    control cards of irrelevant characters        *
*                    before scanning.                              *
*                                                                  *
*                2.  The SELREPT DD name, which is optional,       *
*                    will show a trace of the control card scan.   *
*                                                                  *
*                3.  Some rules have been extended.  For example,  *
*                    you can now code several dashes in one set    *
*                    of control cards, so you can copy say, from   *
*                    files 51 to 100, and then from files 150 to   *
*                    200, of the input tape.  Coding is like:      *
*                    //SYSIN DD  *                                 *
*                       3/1 7  51 -100 150 -200                    *
*                    /*                                            *
*                    which is now valid.  Previously, only one     *
*                    dash could be coded.                          *
*                                                                  *
*    07 SEP 03 - Get rid of the restriction that the INPUT file    *
*                numbers have to be in ascending order.  Same for  *
*                the OUTPUT file writing, except that a warning    *
*                message is issued to SYSPRINT if an output file   *
*                is written over twice.  Backward positioning of   *
*                the tape is done by a rewind and a re-skip of     *
*                the file numbers starting from 1.  This further   *
*                takes advantage of the SELCARDS program control   *
*                card scanning capabilities.                       *
*                                                                  *
*                Further expanded tape file numbers to 5 digits    *
*                instead of 3 digits in the SYSPRINT display.      *
*                We can now show up to File 99999 in the display.  *
*                                                                  *
*                Cleaned up the code in general, and re-commented  *
*                a lot of it.  Got rid of all the EQU * for labels *
*                and replaced them with DS 0H.                     *
*                                                                  *
*      THE JCL USED TO EXECUTE THE UTILITY FOLLOWS:                *
*                                                                  *
*        //COPY     EXEC PGM=COPYNLNL,REGION=3000K,PARM='OPTIONAL' *
*        //TAPELOUT DD SYSOUT=A                                    *
*        //MSG      DD SYSOUT=A                                    *
*        //SELREPT  DD SYSOUT=A             (OPTIONAL)             *
*        //IN       DD DSN=INPUT.FILES,UNIT=TAPE,                  *
*        //            DISP=OLD,VOL=SER=XXXXXX                     *
*        //TAPELIN  DD DSN=OUTPUT.FILES,UNIT=TAPE,                 *
*        //            DISP=(,KEEP),VOL=SER=YYYYYY                 *
*        //SYSIN    DD *                                           *
*          ----  CONTROL  CARDS  ----                              *
*        /*                                                        *
*-$DOC$------------------------------------------------------------*
         SPACE
         SPACE
COPYNLNL AMODE 24                                             10/97 SBG
COPYNLNL RMODE 24                                             10/97 SBG
COPYNLNL CSECT                                                          00260
         USING *,R15                                          SBG 03/00
         B     EYECATCH                                       SBG 03/00
         DC    C'--- '            MAKE EYECATCHER VISIBLE     SBG 03/00
         DC    C'COPYNLNL - NL TO NL TAPE FILE COPY PROGRAM - '   03/00
         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'---'          SBG 03/00
EYECATCH DS    0D             ENSURE ALIGNMENT                SBG 03/00
         STM   R14,R12,12(R13)
         LR    R12,R15
         LA    R11,4095(,R12)                                 10/97 SBG
         LA    R11,1(,R11)
         DROP  R15                                            SBG 03/00
         USING COPYNLNL,R12,R11                               10/97 SBG
         LR    R15,R13                OLD SAVE AREA ADDRESS
         LA    R13,SAVEAREA           NEW SAVE AREA ADDRESS
         ST    R15,4(,R13)            LINK SAVE AREAS
         ST    R13,8(,R13)            LINK SAVE AREAS
         B     INITS                  BRANCH AROUND SAVEAREA
SAVEAREA DC    18F'0'                 YE OLDE SAVE AREA       10/97 SBG
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
* ------------------------------------------------------------------- *
*            I N I T I A L I Z A T I O N                              *
* ------------------------------------------------------------------- *
INITS    MVI   TMFLAG,X'00'        MAKE SURE FLAG IS INITTED
         L     R0,=V(SELCARDS)     Get address of called program         01087
         ST    R0,ENTRYPT          Store it in our program.              01088
* ------------------------------------------------------------------- *
OPEN     DS    0H
         RDJFCB IN
         MVI   INJFCB+66,X'10'     BYPASS LABEL PROCESSING.
         LOAD  EP=IGG019WE         GET CHANNEL END APPENDAGE.
         OPEN  IN,TYPE=J
         RDJFCB OUT
         MVI   OUTJFCB+66,X'10'    BYPASS LABEL PROCESSING.
EXCP1    EXCP  STARTS              REWIND INPUT TAPE          03/00 SBG
         WAIT  ECB=ECB1
         TM    ECB1,X'7F'
         BO    SW1
         DC    H'0'                ABEND.
SW1      DS    0H                                             10/97 SBG
         MVC   INVOL1+4(6),INJFCB+118    GET INPUT VOLSER FROM JCL
Q1       OPEN  (OUT,OUTPUT),TYPE=J
         EXCP  STARTN                                         10/97 SBG
         WAIT  ECB=ECB8                                       10/97 SBG
         TM    ECB8,X'7F'                                     10/97 SBG
         BO    Q4                                             10/97 SBG
         DC    H'0'                ABEND.                     10/97 SBG
Q4       DS    0H
         TM    OUTJFCB+118,X'FF'   TEST FOR SCRATCH OUTPUT.
         BNO   NOTSCRT                                        10/97 SBG
         MVC   OUTVOL1+4(6),=C'SCRTCH'    USE OVOL OF SCRTCH  10/97 SBG
         B     Q4A                        START WRITING MSGS  10/97 SBG
NOTSCRT  MVC   OUTVOL1+4(6),OUTJFCB+118   TRUST JCL TO SUPPLY 10/97 SBG
*                                      NAME OF OUTPUT VOLSER  10/97 SBG
* ----------------------------------  NOW START WRITING MSGS  03/00 SBG
Q4A      DS    0H
         MSGZ '***NL TO NL FILES ARE BEING COPIED FROM VOL=SER=',C'1', X
               (C,INVOL1,6,4),' TO VOL=SER=',(C,OUTVOL1,6,4)
         MVI   MSGCC,C'0'          DOUBLE SPACE THE NEXT MESSAGE.
         LA    R7,1                REG 7 = CURRENT INPUT FILE NO.
         LA    R8,1                REG 8 = CURRENT OUTPUT FILE NO.
         ST    R7,INCURRF          SAVE CURRENT INPUT FILE POSITION
         ST    R8,OUTCURRF         SAVE CURRENT OUTPUT FILE POSITION
         SPACE 2
* ------------------------------------------------------------------- *
*            M A I N    P R O C E S S I N G    L O O P                *
* ------------------------------------------------------------------- *
*   Processing consists of obtaining two file numbers from each
*   SYSIN control statement, using a call to the SELCARDS program.
*   These consist of an input file number, and an output file number.
*   Once each set of two numbers is obtained, COPYFILE copies the
*   selected input tape file to the selected output tape file, using
*   EXCP file skip channel commands when necessary, to get there.
* ------------------------------------------------------------------- *
LOOP     DS    0H                      Call SELCARDS to read the next
*                                      control statement and obtain a
*                                      pair of file numbers.
         L     R15,ENTRYPT        Get entry point for SELCARDS program.  01089
         LA    R1,COLUMN          User area in our program - passed.     01090
         BALR  R14,R15                 Do CALL.                          01091
         ST    R1,PASSADDR             Store address of returned values  01092
         MVC   COLUMN(PASSLENG),0(R1)  Move called passarea to ours.     01094
         TM    EOFFLAG,X'01'           Gotten to end of SYSIN?
         BO    STOP                    Yes. Stop the operation.
* ------------------------------------------------------------------- *
LEP1     BAL   R10,COPY                COPY A FILE.
         MSGZ 'FILE ',(D,INFILE,5),' WAS COPIED TO FILE ',(D,OUTFILE,5)
         MVI   MSGCC,C' '              SINGLE SPACE SUBSEQUENT LINES.
         B     LOOP
* ------------------------------------------------------------------- *
         SPACE 2
STOP     EXCP  TAPEMARK                WRITE A 2ND. TAPE MARK.
         WAIT  ECB=ECB7
         CLOSE (IN,,OUT)
TAPELSW  B     RETURN
RETURN   DS    0H
         L     R13,4(,R13)
         TM    RETCFLAG,X'01'
         BZ    ENDIT0
         MVC   16(4,R13),=F'4'
         B     ENDITX
ENDIT0   DS    0H
         MVC   16(4,R13),=F'0'
ENDITX   LM    14,12,12(13)
         BR    14
         SPACE 2
* ------------------------------------------------------------------- *
* --    F I L E    C O P Y    R O U T I N E                        -- *
* ------------------------------------------------------------------- *
COPY     BC    0,LOADFLES          SKIP AFTER GETTING BUFFERS
GETBUFRS DS    0H                  GETMAIN FOR BUFFERS ONCE
         L     R2,=F'65535'        FORCE LARGEST BLOCKSIZE
         ST    R2,BLKSIZE          SAVE IT AS THE BLKSIZE
         STH   R2,CCW5+6           SET READ BLKSIZE - GOOD TO 64K
         SLL   R2,1                REG 2 = POOLSIZE (BLKSIZE * 2)
         ST    R2,POOLSIZE         MULTIPLIED BY 2
         LR    R0,R2               LOAD REG 0 FOR GETMAIN
         SRL   R2,1                Reset R2 to blocksize value.
         GETMAIN R,LV=(0)
         ST    R1,POOLAD           SAVE POOL ADDRESS.
         OI    COPY+1,X'F0'        BRANCH AROUND - NEXT PASS
* ------------------------------------------------------------------ *
LOADFLES L     R2,INFILE           FULLWORD INPUT FILE NUMBER
         L     R3,OUTFILE          FULLWORD OUTPUT FILE NUMBER
         L     R7,INCURRF          Get current INPUT tape position
         L     R8,OUTCURRF         Get current OUTPUT tape position
* ------------------------------------------------------------------ *
SKIPOUT  DS    0H                  Adjust output file for the copy
Q5       CR    R3,R8               Compare current file pos to target
         BL    ADJUSOUT            Too high, rewind tape and try again
         BE    SKIPIN              Equal, get set to copy to this file
         LA    R8,1(,R8)           Advance output file number
         ST    R8,OUTCURRF         Save current output file position
*                                  Skip an output file
         EXCP  SKIPN
         WAIT  ECB=ECB9
         TM    ECB9,X'7F'          Did the SKIP work?
         BO    Q5                  Yes. Go try the next file.
         B     ABEND100            No. Abort here. Something wrong.
* ------------------------------------------------------------------ *
ADJUSOUT DS    0H                  Target file lower than current pos,
*                                  so rewind tape and start again.
         MSGZ '*****  >> WARNING <<  *****  >> WARNING <<  *****  >> WAX
               RNING <<  *****  >> WARNING << *****'
         MSGZ 'File ',(D,INFILE,5),' will write over previously writtenX
                output tape file, File ',(D,OUTFILE,5),'.'
         MVI   MSGCC,C' '          Single space subsequent lines.
         OI    RETCFLAG,X'01'      Return code = 4 for file overwrite.
         MVC   ECB11,=F'0'         Initialize ECB
         LA    R8,1                Set current output file to 1
         ST    R8,OUTCURRF         Save current output file position
*                                  Rewind the output tape.
         EXCP  REWINDO
         WAIT  ECB=ECB11
         TM    ECB11,X'7F'         Did the rewind work?
         BO    Q5                  Yes. Go do skips again.
         B     ABEND100            No. Show an abnormal end.
* ------------------------------------------------------------------ *
SKIPIN   DS    0H                  Adjust input file for the copy
Q5A      CR    R2,R7               Compare current file pos to target
         BL    ADJUSTIN            Too high, rewind tape and try again
         BE    Q7A                 Equal, get set to copy this file
         LA    R7,1(,R7)           Advance input file number
         ST    R7,INCURRF          Save current input file position
*                                  Skip an input file
         EXCP  SKIPS
         WAIT  ECB=ECB4
         TM    ECB4,X'7F'          Did the SKIP work?
         BO    Q5A                 Yes. Go try the next file.
         DC    H'0'                No. Abort here. Something wrong.
* ------------------------------------------------------------------ *
ADJUSTIN DS    0H                  Target file lower than current pos,
*                                  so rewind tape and start again.
         MVC   ECB10,=F'0'         Initialize the ECB.
         LA    R7,1                Set current input file to 1
         ST    R7,INCURRF          Save current input file position
*                                  Rewind the input tape, passing
*                                  the VOL1 label.
         EXCP  REWINDI
         WAIT  ECB=ECB10
         TM    ECB10,X'7F'         Did the rewind work?
         BO    Q5A                 Yes. Go do skips again.
         DC    H'0'                No. Show an abnormal end.
* ------------------------------------------------------------------ *
Q7A      L     R1,POOLAD           Load pool address.
         ST    R1,CCW5             Put buffer address into CCW5.
         L     R2,BLKSIZE          Get maximum blocksize.
         STH   R2,CCW5+6           Set READ blksize - good to 64K
         MVI   CCW5,2              Restore command code in high order
         A     R1,BLKSIZE          Point to second buffer
         ST    R1,CCW6             Put buffer address into CCW6.
         MVI   CCW6,1              Restore command code in high order
         SPACE 2
* ------------------------------------------------------------------ *
COPYDATA DS    0H
         MVI   ECB6,X'7F'          POST WRITE ECB FOR STARTERS
*                                  BECAUSE YOU'RE STARTING WITH JUST
*                                  A READ, AND WAITING ON BOTH ECB'S
COPYLOOP EXCP  RDATA               READ A DATA BLOCK.
         WAIT 2,ECBLIST=ECBLIST    WAIT FOR READ AND WRITE TO COMPLETE.
         TM    ECB5,X'7F'
         BO    TESTTM
         B     ABEND300
TESTTM   TM    RDATA+12,X'01'      TAPE MARK DETECTED?
         BNO   RNOTMK              NO, REAL READ. TURN OFF TMFLAGS.
         TM    TMFLAG,X'01'        ALREADY READ A TAPE MARK?
         BNO   FLAGTM1             YES. THIS IS SECOND ONE.
         OI    TMFLAG,X'02'        SHOW TWO IN A ROW.
         B     STOP                GO FINISH PROCESSING
FLAGTM1  OI    TMFLAG,X'01'        MARK THAT A TAPE MARK WAS READ
         B     EODAD               GO WRITE THE OUTPUT TM AND BUMP
RNOTMK   MVI   TMFLAG,X'00'        CLEAR TAPE MARK FLAGS IF REAL
*                                  DATA HAS BEEN READ.
ROK      TM    ECB6,X'7F'          WAS THE READ OK?
         BO    WOK                 YES, GO WRITE.
         B     ABEND400
WOK      L     R0,CCW5             SWITCH BUFFERS.
         L     R1,CCW6
         ST    R0,CCW6
         MVI   CCW6,1              RESTORE COMMAND CODE.
         ST    R1,CCW5
         MVI   CCW5,2              RESTORE COMMAND CODE.
*        LH    R1,CCW5+6           GET INPUT BLKSIZE.
*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.
         XC    FULLWRK1,FULLWRK1   CLEAR FULLWORK WORKAREA
         MVC   HALFWRK1(2),CCW5+6  INPUT BLKSIZE
         L     R1,FULLWRK1         PROPERLY LOAD REGISTER, TO 64K
*        SH    R1,RDATA+14         SUBTRACT UNUSED BYTES.
*  -----    CHANGE HALFWORD ARITHMETIC TO FULLWORD.
         XC    FULLWRK2,FULLWRK2   CLEAR FULLWORK WORKAREA
         MVC   HALFWRK2(2),RDATA+14   UNUSED BYTES
         S     R1,FULLWRK2         FULLWORD SUBTRACTION
         BZ    COPYLOOP            END OF DATA FILE, BUT WE TRY
*                                  ANOTHER READ, WHICH WILL DETECT
*                                  THE TAPEMARK, AND THEN WE WILL
*                                  END THE FILE AND WRITE A TAPEMARK
*                                  TO THE OUTPUT TAPE.
         STH   R1,CCW6+6           SET OUTPUT BLKSIZE.
*  -----    THIS IS RIGHT, BECAUSE STH STORES THE ENTIRE HALFWORD.
         EXCP  WDATA               WRITE A DATA BLOCK.
         B     COPYLOOP
         SPACE 2
* ------------------------------------------------------------------ *
EODAD    EXCP  TAPEMARK            WRITE THE END-OF-DATA TAPEMARK.
         WAIT  ECB=ECB7
         TM    ECB7,X'7F'
         BO    BUMPFILE
         B     ABEND500
* ------------------------------------------------------------------ *
         SPACE 2
BUMPFILE LA    R7,1(,R7)           ADVANCE FILE NUMBERS.
         LA    R8,1(,R8)
         ST    R7,INCURRF          SAVE CURRENT INPUT FILE POSITION
         ST    R8,OUTCURRF         SAVE CURRENT OUTPUT FILE POSITION
         BR    R10                 RETURN.
* ------------------------------------------------------------------ *
         SPACE 2
ABEND100 ABEND 100
ABEND200 ABEND 200
ABEND300 ABEND 300
ABEND400 ABEND 400
ABEND500 ABEND 500
ABEND600 ABEND 600
         SPACE 2
* ------------------------------------------------------------------ *
***DATA AREA
         DS    0D               START ON DWORD BOUNDARY
FULLWRK1 DS    0F               FULLWORD WORK AREA
         DC    H'0'
HALFWRK1 DC    H'0'             HALFWORD WORK AREA
FULLWRK2 DS    0F               FULLWORD WORK AREA
         DC    H'0'
HALFWRK2 DC    H'0'             HALFWORD WORK AREA
BLKSIZE  DC    F'0'
CARD     DC    CL80' '          CONTROL CARD
TMFLAG   DC    X'00'            ALREADY READ ONE TAPEMARK?
DSN      DC    CL17' '
* --------------------------------------------------------------- *
*   ----   Passed Values   ----    *
*
COLUMN   DC    F'0'             Address of starting column for search
COLUMNX  DC    F'0'             Actual Column number out of 80
INFILE   DC    F'0'             Current INPUT file number
OUTFILE  DC    F'0'             Current OUTPUT file number
LINFILE  DC    F'0'             LAST INPUT FILE IF DASH USED
ALLSWICH DC    X'00'
*              X'01'            "ALL" PROCESSING IS IN EFFECT
*              X'02'            "ALL" PROCESSING WITH LIMIT
OPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN
*              X'01'          SYSIN    DD IS OPEN
*              X'02'          SELREPT  DD IS OPEN
CLOSWICH DC    X'00'          SIGNAL TO CLOSE FILES
*              X'01'          CLOSE SYSIN
*              X'02'          CLOSE SELREPT
EOFFLAG  DC    X'00'          EOF FLAG
*              X'01'          EOF REACHED ON SYSIN
HEADSWCH DC    X'00'          PRINT ENTIRE SELREPT HEADING
*              X'01'          JUST PRINT DATA LINE
CARDSWCH DC    X'01'          SHOULD WE GET ANOTHER CARD?
*              X'01'          YES. GET ANOTHER CARD.
BACKSWCH DC    X'00'          BACK TO NORMAL PROCESSING AFTER "ALL"
*              X'01'          WE HAVE COME BACK FROM A LIMITED "ALL"
FLAGSYST DC    X'00'          Flag indicating DD present in JCL.
*              X'01'          SYSIN    DD is present
*              X'02'          SELREPT  DD is present
         DS    F
PASSLENG EQU   *-COLUMN
* --------------------------------------------------------- *
* --------------------------------------------------------------- *
LABEL1   DC    CL80' '
LABEL2   DC    CL80' '
INVOL1   DC    CL80' '
OUTVOL1  DC    CL80' '
PACK     PACK  WORK,0(0,1)
MINMAX   DC    A(160,131070)     MIN AND MAX USEFUL POOL SIZES
INCURRF  DC    F'0'             CURRENT FILE POSITION OF INPUT TAPE
OUTCURRF DC    F'0'             CURRENT FILE POSITION OF OUTPUT TAPE
POOLAD   DC    F'0'             ADDRESS OF BUFFER POOL
POOLSIZE DC    F'0'
POOL2    DC    F'0'             ADDRESS OF LABEL POOL
ENTRYPT  DC    F'0'             ENTRY POINT OF SELCARDS
PARMSAVE DC    F'0'
PASSADDR DC    F'0'
RETCFLAG DC    X'00'            Maximum Return Code
WORK     DC    D'0'
         DC    D'0'
IN       DCB   MACRF=E,EXLST=INEXLST,CENDA=WE,DDNAME=IN
         DC    D'0'
OUT      DCB   MACRF=E,EXLST=OUTEXLST,DDNAME=TAPELIN
INEXLST  DC    X'87',AL3(INJFCB)
OUTEXLST DC    X'87',AL3(OUTJFCB)
INJFCB   DC    44F'0'
OUTJFCB  DC    44F'0'
         SPACE 2
ECBLIST  DC    A(ECB5),X'80',AL3(ECB6)
ECB1     DC    F'0'
ECB2     DC    F'0'
ECB3     DC    F'0'
ECB4     DC    F'0'
ECB5     DC    F'0'
ECB6     DC    F'0'
ECB7     DC    F'0'
ECB8     DC    F'0'                                           10/97 SBG
ECB9     DC    F'0'                                           10/97 SBG
ECB10    DC    F'0'                                           10/97 SBG
ECB11    DC    F'0'                                           10/97 SBG
REWINDI  DC    X'40000000',A(ECB10,0,0,CCW8,IN,0,0)
REWINDO  DC    X'40000000',A(ECB11,0,0,CCW8,OUT,0,0)
STARTS   DC    X'40000000',A(ECB1,0,0,CCW8,IN,0,0)            10/97 SBG
STARTN   DC    X'40000000',A(ECB8,0,0,CCW8,OUT,0,0)           10/97 SBG
RSKIPTM  DC    X'40000000',A(ECB2,0,0,CCW2,IN,0,0)
WSKIPTM  DC    X'40000000',A(ECB3,0,0,CCW3,OUT,0,0)
SKIPS    DC    X'40000000',A(ECB4,0,0,CCW9,IN,0,0)            10/97 SBG
SKIPN    DC    X'40000000',A(ECB9,0,0,CCW9,OUT,0,0)           10/97 SBG
RDATA    DC    X'40000000',A(ECB5,0,0,CCW5,IN,0,0)
WDATA    DC    X'40000000',A(ECB6,0,0,CCW6,OUT,0,0)
TAPEMARK DC    X'40000000',A(ECB7,0,0,CCW7,OUT,0,0)
CCW1     CCW   7,0,X'60',1     REWIND.
         CCW   2,INVOL1,X'20',80      READ A VOLUME LABEL.
CCW2     CCW   X'3F',0,X'20',1        SKIP A TAPE MARK.
CCW3     EQU   *
CCW7     CCW   X'1F',0,X'60',1        WRITE A TAPE MARK.
         CCW   X'C3',0,X'20',1        NO OP
CCW4     CCW   X'3F',0,X'60',1        SKIP A FILE.  3 CCW'S   10/97 SBG
         CCW   X'3F',0,X'60',1
CCW9     CCW   X'3F',0,X'20',1        SKIP AN NL FILE         10/97 SBG
CCW5     CCW   2,0,X'20',0            READ A DATA BLOCK.
CCW6     CCW   1,0,X'20',0            WRITE A DATA BLOCK.
CCW8     CCW   7,0,X'20',1            REWIND.
         LTORG
         END
*          SELCARDS            AT LEVEL 1.6 AS OF 08/08/03
   TITLE 'SELCARDS -- SELECT FILES TO COPY FROM ONE TAPE TO ANOTHER'
**************************************************************
**************************************************************
**                                                          **
**                                                          **
**  MODULE:   SELCARDS - Read control commands on control   **
**                       cards and return two numbers:      **
**                       from-file number and to-file       **
**                       number.                            **
**                                                          **
**  AUTHOR:   Sam Golob                                     **
**                                                          **
**  PURPOSE:  This program is called by COPYNLNL            **
**            and tells COPYNLNL which files to copy,       **
**            using two numbers that are returned to        **
**            COPYNLNL after each call.                     **
**                                                          **
**            These numbers are produced from control       **
**            cards which are in COPYFILE format, and       **
**            will signify which input tape file is to      **
**            be copied to which output tape file.          **
**                                                          **
**            Required DD name is //SYSIN, which is an      **
**            FB-80 card-image file, of which the first     **
**            72 columns are scanned for control            **
**            information.                                  **
**                                                          **
**                                                          **
**  METHOD:   The //SYSIN DD name, once opened, is kept     **
**            open throughout the COPYNLNL run, and it      **
**            keeps track of which control statement has    **
**            last been read.  The program contains a       **
**            pointer that points just past that location.  **
**                                                          **
**            The SYSIN file stays open until all the       **
**            cards have been read.                         **
**                                                          **
**                                                          **
**    Input:  None.  Each call causes a scan of the         **
**            //SYSIN DD name until another control         **
**            statement has been read.  The SELCARDS        **
**            program returns a pair of numbers, which      **
**            reflects the last control statement that      **
**            was read from the file.                       **
**                                                          **
**            In order to process the ALL option, a flag    **
**            is set to cause SELCARDS to increment the     **
**            input file number and output file number by   **
**            one, with each successive call.               **
**                                                          **
**   Output:  Optional DD name of //SELREPT traces the      **
**            results of the control card scan.             **
**                                                          **
**                                                          **
**************************************************************
         EJECT
**************************************************************
**                                                          **
**  CHANGE LOG:                                             **
**                                                          **
**    Version 1.1  - First production version.              **
**     08/05/03                                             **
**                                                          **
**    Version 1.2  - Add trace data for SELREPT DD name.    **
**     08/05/03                                             **
**                                                          **
**    Version 1.3  - Only go back from the call when a new  **
**     08/05/03      result is obtained for INFILE and      **
**                   OUTFILE.                               **
**                                                          **
**    Version 1.4  - Fitted to COPYFILE program.  SELFILE   **
**     08/06/03      DD name changed to SYSIN.              **
**                                                          **
**    Version 1.5  - Fix SELREPT documentation.  Adjust     **
**     08/08/03      passed values a bit.                   **
**                                                          **
**    VERSION 1.6  - Fitted to COPYNLNL program.            **
**     08/08/03                                             **
**                                                          **
**                                                          **
**                                                          **
**************************************************************
**************************************************************
         EJECT
**************************************************************
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R4,HEX
         L     R4,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
         SPACE
**************************************************************
         GBLC  &LLEV
&LLEV    SETC  '1.6 '
         YREGS
FF       EQU   X'FF'
SELCARDS CSECT
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'SELCARDS - GET TWO NUMBERS FROM CONTROL CARDS'
         DC    C' - '
         DC    C'LEVEL '
SYSLEV   DC    C'&LLEV'
         DC    C' - '
SYSDAT   DC    C'&SYSDATE'
         DC    C'  ',C'&SYSTIME '
         DC    C'--- '            MAKE EYECATCHER VISIBLE
SAVEAREA DC    18F'0'
EYECATCH DS    0D             ENSURE ALIGNMENT
         SAVE  (14,12)
         LR    R5,R1          SAVE PASSAREA POINTER
         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR
         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR
         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR
         LR    R13,R1               NEW SAVE AREA ADDRESS
         DROP  R15
* -----                       SET UP BASE REGISTERS
         USING SELCARDS,R12,R11,R10
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LA    R10,4095(,R11)
         LA    R10,1(,R10)
         LR    R1,R5          Restore passarea pointer
         ST    R1,PARMSAVE    Renewed with each entry
         TM    HEADSWCH,X'02'
         BO    CALENTRY
* ----------------------------------------------------------------- *
TIOTSCAN DS    0H             Determine the presence of Optional
*                             DDNAMES:  SYSIN.
* ----->                      OPEN them if there is JCL for them.
* ----------------------------------------------------------------- *
         L     R5,16          R5=CVT
         L     R5,0(,R5)      R5=TCB WORDS
         L     R5,4(,R5)      R5=MY TCB
         L     R5,12(,R5)     R5=TIOT
         LA    R5,24(,R5)     R5=FIRST DD ENTRY
TIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?
         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES
         CLC   4(8,R5),SYSIN+40
         BNE   TIOTSELR       NO
         OI    FLAGSYST,X'01'       SHOW PRESENCE OF SYSIN    DD
         B     TIOTNEXT       CONTINUE
TIOTSELR CLC   4(8,R5),SELREPT+40
         BNE   TIOTNEXT
         OI    FLAGSYST,X'02'       SHOW PRESENCE OF SELREPT  DD
         B     TIOTNEXT
TIOTNEXT SR    R3,R3
         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY
         AR    R5,R3          R5=NEXT DD ENTRY
         B     TIOTLOOP       GO CHECK IT
TIOTSEND DS    0H
***********************************************************************
* GET SYSTEM DATE AND TIME - A standard way to get date and time      *
***********************************************************************
         STM   R14,R2,SAVE1402
         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY
         OI    DATE+4,X'0F'
         UNPK  DATED,DATE
         OI    TIME+3,X'0F'
         UNPK  TIMED,TIME
*                          FILL HEADDATE AREA WITH INFO TO REUSE
         MVC   HEADDATE(2),DATED
         MVI   HEADDATE+2,C'/'
         MVC   HEADDATE+3(2),DATED+2
         MVI   HEADDATE+5,C'/'
         MVC   HEADDATE+6(4),DATED+4
         MVC   HEADDATE+12(2),TIMED
         MVI   HEADDATE+14,C':'
         MVC   HEADDATE+15(2),TIMED+2
         MVI   HEADDATE+17,C':'
         MVC   HEADDATE+18(2),TIMED+4
         MVC   MESSAGE1+98(31),HEADDLIT    TODAY'S DATE AND TIME
         LM    R14,R2,SAVE1402
***********************************************************************
         MVC   LEVDATE(8),SYSDAT
***********************************************************************
         MVC   MESSAGE1+71(21),LEVELLIT    PROGRAM LEVEL AND
* ----------------------------------------------------------------- *
INITCONS DS    0H
         MVC   LINE(133),LINE-1            Clear print lines
         MVC   CNTLINE(133),CNTLINE-1
         MVC   OUTLINE(133),OUTLINE-1
         MVC   PRTLINE(133),PRTLINE-1
* ----------------------------------------------------------------- *
*    START OF MAIN PROCESSING
* ----------------------------------------------------------------- *
*
OPENREPT DS    0H
         TM    FLAGSYST,X'02'      IS SELREPT DDNAME IN JCL?
         BZ    OPENREND            No. Don't attempt to open it.
         OPEN  (SELREPT,OUTPUT)
         TM    SELREPT+48,X'12'    TEST FOR SUCCESSFUL OPEN.
         BNO   OPENREND            Not successful, don't indicate.
         OI    OPENDFLG,X'02'      INDICATE THAT FILE IS OPEN
OPENREND DS    0H
INITREPT DS    0H
         TM    OPENDFLG,X'02'           Do not attempt to write if
         BZ    INITREND                   the file is not opened.
         TM    HEADSWCH,X'01'           Title page to be printed?
         BO    INITREND                 Not after first call.
         MVC   CNTLINE(133),CNTLINE-1
         MVC   CNTLINE(133),MESSAGE1    MOVE IN TITLE
         PUT   SELREPT,CNTLINE
         PUT   SELREPT,LINE
         PUT   SELREPT,LINE
         MVC   CNTLINE(133),CNTLINE-1
         MVC   CNTLINE(133),MESSAGE3
         PUT   SELREPT,CNTLINE
         MVC   CNTLINE(133),CNTLINE-1
         MVC   CNTLINE(133),MESSAGE4
         PUT   SELREPT,CNTLINE
         PUT   SELREPT,LINE
         MVC   CNTLINE(133),CNTLINE-1   Clear title line.
         MVC   CNTLINE(133),MESSAGE2    And move in column headings.
         PUT   SELREPT,CNTLINE
         PUT   SELREPT,LINE
         OI    HEADSWCH,X'03'           Don't do this again.
INITREND DS    0H
*
* ----  CONTROL  CARD  SCAN  ROUTINE  -------  BELOW  ----- *
*
OPENIT   DS    0H
         OPEN  (SYSIN,INPUT)
         TM    SYSIN+48,X'12'      TEST FOR SUCCESSFUL OPEN.
         BNO   OPENITEN
         OI    OPENDFLG,X'01'      INDICATE THAT FILE IS OPEN
OPENITEN DS    0H
CALENTRY DS    0H                  Come here after first call.
         L     R1,PARMSAVE
         LR    R6,R1               CALLER'S PASSAREA                     04984
         MVC   CLOSWICH(1),CLOSWICH-COLUMN(R6)  Passed switches          04985
         MVC   EOFFLAG(1),EOFFLAG-COLUMN(R6)      from caller            04985
         TM    ALLSWICH,X'01'      Are we doing any ALL processing?
         BO    ALLPROC             Yes. Go to ALL routine.
         B     CONTROL             No. Just get single file values.
* ----- >>
ALLPROC  DS    0H                  ALL processing.
         TM    ALLSWICH,X'01'      Is the ALL switch on?
         BZ    ALLPREND            No. Just exit this routine.
         NI    CARDSWCH,FF-X'01'   Make sure you don't GET new card.
         L     R3,INFILE           Increment INFILE  by 1
         LA    R3,1(,R3)
         ST    R3,INFILE           And store the value away.
         L     R3,OUTFILE          Increment OUTFILE by 1
         LA    R3,1(,R3)
         ST    R3,OUTFILE          And store the value away.
         TM    ALLSWICH,X'02'      Did we limit the ALL processing?
         BZ    NOLIMITX            No. Then keep cycling.
         L     R3,INFILE           Yes. Recheck the INFILE number
         C     R3,LINFILE          And compare it to the limit.
         BNH   NOLIMITT            Not yet there, no action.
         NI    ALLSWICH,FF-X'03'   Above the limit, turn off ALL...
         L     R3,INFILE           We've passed the right file number
         BCTR  R3,0                So we subtract one,
         ST    R3,INFILE           And reset it to the correct value.
         L     R3,OUTFILE          We've passed the right file number
         BCTR  R3,0                So we subtract one,
         ST    R3,OUTFILE          And reset it to the correct value.
         OI    BACKSWCH,X'01'      Show you came back from ALL.
         B     CONTROL             Don't go to caller-look for hit.
NOLIMITX DS    0H
         MVC   LINFILE,=F'0'       Unlimited ALL, show LINFILE = F'0'
NOLIMITT DS    0H
         ST    R1,SAVER1C          *--------------------------*
         LA    R1,2                *  Identify from whence.   *
         ST    R7,SAVER7A          *  Save R7                 *
         BAL   R7,REPTLINE         *  Display current status. *
         L     R7,SAVER7A          *  Restore R7              *
         L     R1,SAVER1C          *--------------------------*
ALLPREND DS    0H
         NI    CARDSWCH,FF-X'01'   Make sure you don't GET new card.
         OI    BACKSWCH,X'01'      Extra switch for safety
         B     GOCALLER
* ----- >>
* ----  CONTROL  CARD  SCAN  ROUTINE  -------  Below  ----- *
CONTROL  DS    0H
         TM    CARDSWCH,X'01'      Are we getting a new card?
         BZ    OLDCARD             No, keep searching the old card.
         TM    EOFFLAG,X'01'       Have we signalled SYSIN finished?
         BO    SELFEND             Yes. Close up and get out.
         TM    CLOSWICH,X'01'      Have we ordered SYSIN closed?
         BO    SELFEND             Yes. Close it up and get out.
         TM    OPENDFLG,X'01'      Is SYSIN still open?
         BZ    OLDCARD             No. Don't look for a new record.
GETCARD  DS    0H                  Get a new SYSIN card.
         TM    CLOSWICH,X'01'      SYSIN ordered to be closed?
         BO    GETCARDE            Yes. Don't try to get a card.
         TM    EOFFLAG,X'01'       End of file in SYSIN reached?
         BO    GETCARDE            Yes. Don't try to get a card.
         STM   R14,R2,SAVE1402     Save a bunch of registers.
         GET   SYSIN,CARDIN
*---->>                            GET a control card, and filter it
*---->>                            to leave only valid nonblanks.
         TR    CARDIN(80),TRTBL0   Leave only numbers, - /, or ALL.
         LM    R14,R2,SAVE1402     Restore the bunch of registers.
         NI    CARDSWCH,FF-X'01'   Don't get a new card on next call.
         MVC   COLUMN,=A(CARDIN-1) Reset starting column to beginning.
GETCARDE DS    0H
OLDCARD  L     R1,COLUMN           REG 1 = Column to start search.
         LA    R14,CARDIN+71       REG 14 = END OF CARD ADDRESS
FINDWORD DS    0H
         LA    R1,1(,R1)           Bump search place holder by one.
         TM    EOFFLAG,X'01'       Protection if SYSIN at end.
         BO    NOFNDTST            If so, don't try to get another card
         CR    R1,R14              Test for end of card.
         BH    GETCARD             Past end, get another card.
         B     NOFNDGET            And pass the next test by.
NOFNDTST DS    0H                  Are we past the last card?
         CR    R1,R14              Test it for its end.
         BNH   NOFNDGET            Not there, resume processing.
         LA    R15,0               Put RC = 0
         B     SELFEND             And close SYSIN up.
NOFNDGET DS    0H                  Not at end of card yet.
         NI    CARDSWCH,FF-X'01'   Indicate that, so we don't get one.
         CLI   0(R1),C' '          Test for blank.
         BE    FINDWORD            If blank, look again.
         CLI   0(R1),C'-'          Is it a DASH ?
         BE    CQ3                 Yes. Start limited ALL processing.
         CLC   =C'ALL',0(R1)       Is it a real non-limited ALL?
         BNE   CQ1                 No. Just get the two values.
         ST    R3,SAVER3A          If unlimited ALL, then update
         LR    R3,R1               the current COLUMN value.
         LA    R3,3(,R3)           Point past end of the literal,
         ST    R3,COLUMN           And tuck the value away.
         L     R3,SAVER3A
         OI    ALLSWICH,X'01'      Say you'll copy rest of the files.
         B     ALLPROC             And actually go and do it.
         SPACE 3
* --------- >>>>>>>>>>>> Limited ALL processing >> -- Below ---->>>>
* --------   CODE TO HANDLE MULTIPLE FILES, NOT TO LAST ONE.
CQ3      DS    0H                  ALL processing with upper limit.
         LR    R15,R1              Use R15 to search
         LA    R15,1(,R15)         Bump past DASH.
         LR    R1,R15              Tell R1 you're there too.
         TM    EOFFLAG,X'01'       Are there any more cards to GET?
         BO    NOFNDLIM            No. Don't try to GET any.
         CR    R15,R14             Is DASH the last column?
         BH    GETCARD             Yes. Get another card and ignore it.
NOFNDLIM DS    0H
         NI    CARDSWCH,FF-X'01'   Keep looking in this card.
FINDLIN  CLI   0(R15),C' '         Is BLANK after DASH?
         BNE   GETLIN              No. Figure out what the number is.
         LR    R1,R15      REDUNDANT, BUT MAKE SURE R1 PROPER
         B     FINDWORD            Treat isolated DASH as a BLANK.
GETLIN   LA    R15,1(,R15)         Bump past the last non-blank.
         CR    R15,R14             End of card yet?
         BNH   GETCONT             No. Keep searching for the number.
         OI    CARDSWCH,X'01'
         B     GETLLEN             Yes. Let's get the entire number.
GETCONT  CLI   0(R15),C' '         Delimiting BLANK?
         BNE   GETLIN              No, look further.
GETLLEN  DS    0H
         ST    R15,COLUMN          Save COLUMN pointer for next call.
         SR    R15,R1              Get length of number
         BCTR  R15,0               Subtract 1 FOR EXECUTE.
         EX    R15,PACK            Pack the number.
         CVB   R0,WORK             Convert it to binary.
         ST    R0,LINFILE          And store it away for reference.
         OI    ALLSWICH,X'03'      Show ALL + File Limiting, and
         B     ALLPROC             Go directly to ALL processing.
* --------   CODE TO HANDLE MULTIPLE FILES, NOT TO LAST ONE.
* --------- >>>>>>>>>>>> Limited ALL processing >> -- Above ---->>>>
         SPACE 3
CQ1      LR    R15,R1              REG 15 = Address of first file no.
FINDSL   LA    R15,1(,R15)         Look for the /.
         CR    R15,R14             Test for end of card.
         BNH   FINDCONT            Not at the end yet.
         OI    CARDSWCH,X'01'      Set up to get another card.
         B     MOD1                OUTPUT file defaulted to next.
FINDCONT CLI   0(R15),C' '         Test for BLANK.
         BE    MOD1                Blank. Means OUTPUT file defaulted.
         CLI   0(R15),C'/'         TEST FOR /.
         BNE   FINDSL              Neither blank nor /, loop back.
         LA    R2,1(,R15)          REG 2 = Address of second file no.
         SR    R15,R1              REG 15 = Length of first file no.
         BCTR  R15,0               One less for EXECUTE.
         EX    R15,PACK            Convert to packed
         CVB   R0,WORK             Convert to binary
         ST    R0,INFILE           And shove it into a fullword.
         LR    R1,R2               REG 1 = Address of second file
FINDEND  LA    R2,1(,R2)           Bop one up.
         CR    R2,R14              Test for end of card.
         BNH   Q2                  Not there, don't get another.
         OI    CARDSWCH,X'01'      Enable GETCARD.
         B     FOUNDIT             And assume you've gotten the number.
Q2       DS    0H
         NI    CARDSWCH,FF-X'01'   Turn off GETCARD switch.
         CLI   0(R2),C' '          Test for BLANK.
         BNE   FINDEND             Look further for end of the number.
FOUNDIT  ST    R2,COLUMN           Reset COLUMN for next search.
         SR    R2,R1               REG 2 = Length of second file no.
         BCTR  R2,0                One less for EXECUTE.
         EX    R2,PACK             Convert to packed.
         CVB   R0,WORK             Convert to binary
         ST    R0,OUTFILE          And store its value away.
         NI    ALLSWICH,FF-X'03'   Can't have ALL processing here.
         ST    R1,SAVER1C          *--------------------------*
         LA    R1,5                *  Identify from whence.   *
         ST    R7,SAVER7A          *  Save R7                 *
         BAL   R7,REPTLINE         *  Display current status. *
         L     R7,SAVER7A          *  Restore R7              *
         L     R1,SAVER1C          *--------------------------*
         B     GOCALLER            Return to caller since we have
*                                  a change in INPUT and OUTPUT
*                                  numbers.
*--------------------------------------------------------------------*
MOD1     DS    0H                 Mod #1.  AUTOMATIC OUTPUT FILE NO.
         ST    R15,COLUMN         Reset COLUMN for next search.
         SR    R15,R1             REG 15 = Length of file no.
         BCTR  R15,0              One less for EXECUTE.
         EX    R15,PACK           Convert to packed.
         CVB   R0,WORK            Convert to binary.
         ST    R0,INFILE          And store number in INFILE.
         ST    R1,SAVER1B
         L     R1,OUTFILE         Get old value of OUTFILE
         LA    R1,1(,R1)          Increase it by one automatically.
         ST    R1,OUTFILE         Store the new value in OUTFILE.
         L     R1,SAVER1B
         NI    ALLSWICH,FF-X'03'  We can't have ALL processing here.
         ST    R1,SAVER1C         *--------------------------*
         LA    R1,6               *  Identify from whence.   *
         ST    R7,SAVER7A         *  Save R7                 *
         BAL   R7,REPTLINE        *  Display current status. *
         L     R7,SAVER7A         *  Restore R7              *
         L     R1,SAVER1C         *--------------------------*
         B     GOCALLER           Return to caller since we have
*                                 a change in INPUT and OUTPUT
*                                 numbers.
         SPACE 2
* ----  CONTROL  CARD  SCAN  ROUTINE  -------  Above  ----- *
         SPACE 3
GOCALLER DS    0H
         TM    CLOSWICH,X'01'           Has caller ordered file close?
         BO    SELFEND                  Yes. Force it.
         L     R13,4(,R13)                                               05292
         MVC   16(4,R13),=F'0'          Return code 0     in R15         05293
         MVC   24(4,R13),=A(COLUMN)     Address of passed values in R1.  05294
         LM    R14,R12,12(R13)                                           05296
         BR    R14                                                       05297
SELFEND  DS    0H
         OI    EOFFLAG,X'01'
         TM    CLOSWICH,X'01'           Has caller ordered file close?
         BZ    SELFENCL                 No. Don't close.
         TM    OPENDFLG,X'01'           Is SYSIN currently open?
         BZ    SELFENCL                 No. Bypass the CLOSE.
         NI    OPENDFLG,FF-X'01'        OPEN, but we're closing it now.
         CLOSE SYSIN
SELFENCL DS    0H
         TM    OPENDFLG,X'02'           Is SELREPT currently open?
         BZ    SELFRNCL                 No. Bypass the CLOSE.
         TM    CLOSWICH,X'02'           Has caller ordered file close?
         BZ    SELFRNCL                 No. Don't close.
         ST    R1,SAVER1C          *--------------------------*
         LA    R1,9                *  Identify from whence.   *
         ST    R7,SAVER7A          *  Save R7                 *
         BAL   R7,REPTLINE         *  Display current status. *
         L     R7,SAVER7A          *  Restore R7              *
         L     R1,SAVER1C          *--------------------------*
         NI    OPENDFLG,FF-X'02'        OPEN, but we're closing it now.
         CLOSE SELREPT
SELFRNCL DS    0H
         L     R13,4(,R13)         Finish program execution.             05292
         MVC   16(4,R13),=F'0'          Return code 0     in R15         05293
         MVC   24(4,R13),=A(COLUMN)     Address of column in R1          05294
         LM    R14,R12,12(R13)                                           05296
         BR    R14                                                       05297
* ----------------------------------------------------------------- *
         LTORG
         SPACE 3
* ----------------------------------------------------------------- *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                   S U B R O U T I N E S                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV4HEX  DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
REPTLINE DS    0H                       Display status of File Numbers
         TM    OPENDFLG,X'02'           Do not attempt to write if
         BZ    REPTLEND                   the file is not opened.
         STC   R1,PLACEMRK              Identifier of particular call.
         MVC   OUTLINE(133),OUTLINE-1   Clear output line
         L     R0,COLUMN                Virtual address of COLUMN mark.
         S     R0,=A(CARDIN-1)          Subtract address of CARD
         ST    R0,COLUMNX               Get position within the card.
         HEX   OUTLINE+4,4,COLUMNX      And display that.
         HEX   OUTLINE+14,4,INFILE      Display INFILE number.
         HEX   OUTLINE+24,4,OUTFILE     Display OUTFILE number.
         HEX   OUTLINE+34,4,LINFILE     Display limited ALL limit numbr
         HEX   OUTLINE+44,1,ALLSWICH    Display status of ALLSWICH
         HEX   OUTLINE+54,1,OPENDFLG    Display which files are open
         HEX   OUTLINE+64,1,CARDSWCH    Display new card switch status
         HEX   OUTLINE+74,1,PLACEMRK    Display identifier of this call
         PUT   SELREPT,OUTLINE
REPTLEND DS    0H
         BR    R7
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
* ----------------------------------------------------------------- *
*
         DS    0D
*
PLACEMRK DC    X'00'          Identifier from where REPTLINE called.
* --------------------------------------------------------- *
*   ----   Passed Values   ----    *
*
COLUMN   DC    F'0'             Address of starting column for search
COLUMNX  DC    F'0'             Actual Column number out of 80
INFILE   DC    F'0'             Current INPUT file number
OUTFILE  DC    F'0'             Current OUTPUT file number
LINFILE  DC    F'0'             Last input file for limited "ALL"
ALLSWICH DC    X'00'
*              X'01'            "ALL" processing is in effect
*              X'02'            "ALL" processing with limit in effect
*
OPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN
*              X'01'          SYSIN    DD IS OPEN
*              X'02'          SELREPT  DD IS OPEN
CLOSWICH DC    X'00'          SIGNAL TO CLOSE FILES
*              X'01'          CLOSE SYSIN
*              X'02'          CLOSE SELREPT
EOFFLAG  DC    X'00'          EOF FLAG
*              X'01'          EOF REACHED ON SYSIN
HEADSWCH DC    X'00'          PRINT ENTIRE SELREPT HEADING
*              X'01'          JUST PRINT DATA LINE
CARDSWCH DC    X'01'          SHOULD WE GET ANOTHER CARD?
*              X'01'          YES. GET ANOTHER CARD.
BACKSWCH DC    X'00'          BACK TO NORMAL PROCESSING AFTER "ALL"
*              X'01'          WE HAVE COME BACK FROM A LIMITED "ALL"
FLAGSYST DC    X'00'          Flag indicating DD present in JCL.
*              X'01'          SYSIN    DD is present
*              X'02'          SELREPT  DD is present
         DS    F
PASSLENG EQU   *-COLUMN
* --------------------------------------------------------- *
         DC    H'0'
PACK     PACK  WORK,0(0,1)
WORK     DC    D'0'
MESSAGE1 DC    CL133'1SELCARDS - FILE SELECTION CONTROL CARDS REPORT'
MESSAGE2 DC    CL133'    COLUMN    INFILE    OUTFILE   LINFILE   ALLSWI-
               CH  OPENDFLG  CARDSWCH  TYPE'
MESSAGE3 DC    CL133'    All Numeric Values are in Hexadecimal. '
MESSAGE4 DC    CL133'    TYPE:  05 is M/N,  06 is M,  02 is ALL process-
               ing.  09 is EOF in SELFILE.'
         SPACE 3
PARMSAVE DC    F'0'
PASSADDR DC    F'0'
         DC    CL4' '
         DS    0F
* --------------------------------------------------------- *
         SPACE 3
SYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X
               EODAD=SELFEND
SELREPT  DCB   DDNAME=SELREPT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA
* --------------------------------------------------------- *
SAVE1402 DS    6F                 Extra fullword for safety
SAVER1A  DS    F                  Register storage
SAVER1B  DS    F
SAVER1C  DS    F
SAVER3A  DS    F
SAVER7A  DS    F
*    ------------------------ >   Constants for Date and Time - below
TIMED    DS    CL7
DATED    DS    CL9
DATETIME DS    4F
         ORG   DATETIME
TIME     DS    CL4
         DS    CL4
DATE     DS    CL5
         DS    CL3
HEADDLIT DS    0CL31              Literal for headings - date and time
         DC    CL6'Today:'
         DC    CL2' '
HEADDATE DC    CL23' '
LEVELLIT DS    0CL21              Level number display for headings
         DC    CL6'Level '
LEVELL   DC    CL4'&LLEV'
         DC    CL2' ('
LEVDATE  DC    CL8' '             Assembly date for this program
         DC    CL1')'
*    ------------------------ >   Constants for Date and Time - above
*    --------------- >            Output line buffers - below
         DC    CL3' '
         DC    C' '
LINE     DC    CL133' '
         DC    C' '
CNTLINE  DC    CL133' '
         DC    C' '
OUTLINE  DC    CL133' '
         DC    C' '
PRTLINE  DC    CL133' '
         DC    CL80' '            Padding
*    --------------- >            Output line buffers - above
*
CARDIN   DC    CL80' '            SYSIN CARD INPUT AREA
*              Translate table - only allow numbers, ALL, - or /,
*                                and uppercase "all".
TRTBL0   DS    0D                                                        04451
         DC    XL16'40404040404040404040404040404040'                    04452
         DC    XL16'40404040404040404040404040404040'                    04453
         DC    XL16'40404040404040404040404040404040'                    04454
         DC    XL16'40404040404040404040404040404040'                    04455
         DC    XL16'40404040404040404040404040404040'                    04456
         DC    XL16'40404040404040404040404040404040'                    04457
         DC    XL16'60614040404040404040404040404040'                    04458
         DC    XL16'40404040404040404040404040404040'                    04459
         DC    XL16'40C14040404040404040404040404040'                    04460
         DC    XL16'404040D3404040404040404040404040'                    04461
         DC    XL16'40404040404040404040404040404040'                    04462
         DC    XL16'40404040404040404040404040404040'                    04463
         DC    XL16'40C14040404040404040404040404040'                    04464
         DC    XL16'404040D3404040404040404040404040'                    04465
         DC    XL16'40404040404040404040404040404040'                    04466
         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                    04467
         END
