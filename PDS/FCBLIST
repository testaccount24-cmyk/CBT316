FCBLIST  TITLE '   F C B L I S T  VER 2.0'
* ------------------------------------------------------------------- *
*
*          F C B L I S T    V E R S I O N   2.0  (10/15/2005)
*          -------------
*
*
*   HISTORY:
*
*        THIS CODE WAS OBTAINED FROM THE SHARE MODS TAPE BACK WHEN
*        I WAS AT THE AIR FORCE DATA SERVICES CENTER (A VERY LONG
*        TIME AGO). JIM MARSHALL
*
*        PROGRAM WRITTEN BY ART BROWN OF SOUTHERN CALIFORNIA EDISON.
*
*        THIS PROGRAM LISTS THE FCBS IN SYS1.IMAGELIB FOR 3211 AND
*        3800'S. YOU CAN FIND INFORMATION FOR CREATING FCB'S IN THE
*        IBM UTILITY MANUAL FOR IEBIMAGE. FCB'S FOR FCB2 MODULES
*        ARE ALSO LOCATED IN THE DFP SYSTEM PROGRAMMERS MANUAL.
*
*        KEEP IN MIND THE MODULES ARE NAMED LIKE THIS
*
*        FCB1....  - 1403 PRINTERS
*        FCB2....  - 3211 PRINTERS (MAY BE USE WITH 3203, 3262-5,
*                    4248, OR 4245)
*        FCB3....  - 3800 PRINTERS
*        FCB4....  - 4248 PRINTERS (MAY BE USE WITH 3203, 3211,
*                    3262-5, OR 4245)
*
*
*        //*       THIS JCL LISTS ALL FCB2 AND FCB3 MODULES
*        //LIST     EXEC PGM=FCBLIST
*        //SYSPRINT DD SYSOUT=*
*        //SYSUT1   DD DSN=SYS1.IMAGELIB,DISP=SHR
*
*        //*       THIS JCL LISTS ALL FCB2 AND FCB3 MODULES
*        //LIST     EXEC PGM=FCBLIST,PARM=ALL
*        //SYSPRINT DD SYSOUT=*
*        //SYSUT1   DD DSN=SYS1.IMAGELIB,DISP=SHR
*
*        //*       THIS JCL LISTS SELECTED MODULES (STRING OUT NAMES)
*        //LIST     EXEC PGM=FCBLIST,
*        //         PARM='FCB3STD3,FCB26,FCB28'
*        //SYSPRINT DD SYSOUT=*
*        //SYSUT1   DD DSN=SYS1.IMAGELIB,DISP=SHR
*
*   NOTE: THE CODE PRESENTLY WILL GIVE YOU A RC=0 IF YOU SPECIFY A
*         SPECIFIC FCB IMAGE AND IT DOES NOT EXIST. THIS WILL BE
*         FIXED LATER.
*
*
*   CHANGE LOG -
*
*   09/15/2005 - CLEANED CODE TO MAKE IT MORE READABLE PRIOR TO  JDM
*                ADDING 4248 OR "FCB4" SUPPORT.                  JDM
*   10/15/2005 - BEGIN ADDING THE CODE FOR 4248.                 JDM1
* ------------------------------------------------------------------- *
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                 BAL REGISTER
R11      EQU   11
R12      EQU   12                 BASE REGISTER
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
FCBLIST  AMODE 24
FCBLIST  RMODE 24
FCBLIST  CSECT
         SAVE  (14,12),,FCBLIST_&SYSDATE._&SYSTIME
         LR    R12,R15
         USING FCBLIST,R12
         LA    R11,SA
         ST    R13,SA+4
         ST    R11,8(R13)
         LR    R13,R11
         SPACE 1
* ------------------------------------------------------------------- *
*        PARAMETER FIELD PROCESSING
* ------------------------------------------------------------------- *
         SPACE 1
         L     R1,0(,R1)          ADDR OF PARM FIELD
         LH    R2,0(,R1)          LENGTH OF PARM FIELD
         LA    R1,2(,R1)          ADDR OF FIRST PARM
         LR    R3,R1              SAVE 1ST PARM ADDR
         LA    R5,PARMTBL         ADDR OF MEMBER NAME TABLE
         LTR   R2,R2              ANY PARMS ?
         BP    LOOP               YES, PROCESS THEM
         OI    PARMBR+1,X'F0'     FORCE ALL MEMBERS
         B     PARMEND            BEGIN PROCESSING
         SPACE 1
LOOP     EQU   *
         CLI   0(R1),C','         DELIMITER CHARACTER ?  ASF  ,8-29-79
         BE    TBLSTORE           YES, GO MOVE MEM NAME  ASF  ,8-29-79
         LA    R1,1(,R1)          INCR PARM POINTER
         BCT   R2,LOOP            DECR PARM CTR & BRANCH
         LA    R2,1               CAUSE NEXT BCT TO FALL THRU
TBLSTORE EQU   *
         LR    R4,R1              END OF MEM NAME +1
         SR    R4,R3              LENGTH OF NAME
         BCTR  R4,R0              DECR 1 FOR MOVE INSTR
         EX    R4,PARMOVE         MOVE NAME TO TABLE
         LA    R5,8(,R5)          POINT TO NEXT TABLE ELEMENT
         LA    R1,1(,R1)          POINT TO NEXT MEM NAME
         LR    R3,R1              SAVE IT
         BCT   R2,LOOP            GO GET NEXT NAME
         MVI   0(R5),X'FF'        INDICATE END OF TABLE
PARMEND  EQU   *
         OPEN  (SYSUT1,,SYSPRINT,OUTPUT)
         SPACE 1
* ------------------------------------------------------------------- *
*        READ SYS1.IMAGELIB DIRECTORY ENTRIES
* ------------------------------------------------------------------- *
         SPACE 1
DIREAD   EQU   *
         FIND  SYSUT1,DIRTTRK,C   FIND DIRECTORY BLOCK
         READ  RDECB,SF,SYSUT1,DIRAREA,1024   READ DIRECTORY
         CHECK RDECB
         LA    R3,DIRAREA+2       BEGINNING OF DIRECTORY ADDR
DIR      EQU   *
         CLI   0(R3),X'FF'        END OF DIRECTORY ?
         BE    RETURN             YES, FINISH UP
         LA    R5,PARMTBL         ADDR OF NAME TABLE
PARMSCH  EQU   *
         CLC   0(8,R3),0(R5)      IS THIS MEM IN TABLE ?
PARMBR   EQU   *
         BE    GETMBR             YES, GO PROCESS IT
         CLC   0(8,R5),=CL8'ALL'  WAS ALL REQUESTED ?
         BE    GETMBR             YES, GO PROCESS
         LA    R5,8(,R5)          POINT TO NEXT ELEMENT IN TBL
         CLI   0(R5),X'FF'        END OF TABLE ?
         BNE   PARMSCH            NO, CONTINUE CHECKING TABLE
         SPACE 1
* ------------------------------------------------------------------- *
*        READ IMAGELIB MEMBERS
* ------------------------------------------------------------------- *
         SPACE 1
NXTENT   EQU   *
         MVI   MEMAREA,X'FF'      CLEAR IMAGE AREA...
         MVC   MEMAREA+1(L'MEMAREA-1),MEMAREA   ...TO AN END IDENTIFIER
         SR    R4,R4              CLEAR WORK REG
         NI    11(R3),X'1F'       CLEAR UN-WANTED BITS
         IC    R4,11(,R3)         GET NUMBER OF HALF WORDS
         SLL   R4,1               CONVERT TO BYTES
         LA    R3,12(R4,R3)       ADDR OF NEXT DIR ENTRY
         LH    R4,DIRAREA         LENGTH OF THIS DIR BLOCK
         LA    R4,DIRAREA(R4)     ADDR OF END OF BLOCK
         CLR   R3,R4              FINISHED WITH THIS BLOCK ?
         BL    DIR                NO, KEEP PROCESSING
         L     R4,DIRTTRK         GET DIR DISK ADDR
         LA    R4,256(,R4)        POINT TO NEXT BLOCK
         ST    R4,DIRTTRK         REPL DIR DISK ADDR
         B     DIREAD             GO GET NEXT BLOCK
         SPACE 1
GETMBR   EQU   *
         CLC   0(3,R3),=C'FCB'    IS THIS AN FCB IMAGE ?
         BNE   NXTENT             NO, DONT PROCESS IT
         MVC   MEMTTRK(3),12(R3)  DISK ADDR OF MEMBER
         FIND  SYSUT1,MEMTTRK,C   FIND MEMBER
         READ  MDECB,SF,SYSUT1,MEMAREA,1024    READ MEMBER
         CHECK MDECB              WAIT FOR READ TO FINISH
         LA    R6,MEMAREA         POINT TO BEGINNING OF MEMBER
         SPACE 1
* ------------------------------------------------------------------- *
*        PRINT 3211
* ------------------------------------------------------------------- *
         SPACE 1
         MVC   IMAGNAME+6(8),0(R3)  SET UP IMAGE NAME
         CLI   3(R3),C'3'         3800 IMAGE?
         BE    PR3800             YES, GO FORMAT A 3800
         CLI   3(R3),C'4'         4248 IMAGE?                    JDM1
         BE    PR4248             YES, GO FORMAT A 4248          JDM1
         CLI   3(R3),C'2'         3211 IMAGE?
         BNE   NXTENT             NO, DON'T PRINT IT
         SPACE 1
* ------------------------------------------------------------------- *
*        3211 FCB'S CAN NOT BE CREATED BY IEBIMAGE. THESE FCB'S ARE
*        NAMED AS 'FCB2' FOLLOWED BY UP TO FOUR (4) ALPHANUMERIC CHARS
*        WITH THE EXCEPTION OF A SINGLE 'C' OR 'U'. THIS NAME IS CALLED
*        THE IMAGE IDENTIFIER OR "ID". THE FCB IS CODED IN ASSEMBLER
*        AS FOLLOWS:
*
*        BYTE      INFORMATION
*        0         X'80' = DEFAULT IMAGE
*                  X'00' = NONDEFAULT IMAGE
*        1         AL1'NN' - NUMBER OF BYTES TO BE SENT TO THE CONTROL
*                  UNIT TO LOAD THE FCB IMAGE. LENGTH INCLUDES THIS
*                  BYTE
*        2         THE FIRST BYTE OF FCB IMAGE IS EITHER THE PRINT
*                  POSITION INDEXING BYTE, OR THE LINES PER INCH BYTE.
*                  THE INDEXING BYTE IS OPTIONAL AND, WHEN USED,
*                  PRECEDES THE LINES-PER-INCH BYTE. THE SPECIAL INDEX
*                  FLAG IN THE 3RD BYTE CONTAINS X'80' PLUS THE BINARY
*                  INDEX VALUE, FROM 1-32 (DEFAULT IS 1). INDEX VALUE
*                  SETS THE LEFT MARGIN: 1 IS FLUSH-LEFT; ANY OTHER
*                  VALUE INDICATES A LINE INDENTED THE SPECIFIED
*                  NUMBER OF SPACES.
*        2         IF THIS IS FIRST LINE OF THE FORM, VERSUS THE INDEX
*                  BYTE, THEN THE LPI MUST BE SPECIFIED.
*                  X'1N' - SETS 8 LPI
*                  X'0N' - SETS 6 LPI
*        N-1       ....................................
*        N         LAST LINE OF THE FORM MUST HAVE X'1N'
*
*
*
*        BITS      INFORMATION
*
*        0-7       CHANNEL CODE
*                  BINARY  HEX  CHANNEL
*                  0000     0    NULL
*                  0001     1     1
*                  0010     2     2
*                  0011     3     3
*                  0100     4     4
*                  0101     5     5
*                  0110     6     6
*                  0111     7     7
*                  1000     8     8
*                  1001     9     9
*                  1010     A    10
*                  1011     B    11
*                  1100     C    12
*
* ------------------------------------------------------------------- *
         SPACE 1
         MVC   HEADING+1(4),=C'3211'   CHANGE HEADING
         MVC   IMAGTYPE+6(11),=CL11'DEFAULT'   ASSUME DEFAULT
         TM    0(R6),X'80'        CORRECT ?
         BO    INDEX              YES, CHECK INDEXING
         MVC   IMAGTYPE+6(11),=C'NON-DEFAULT' SHOW NON-DEFAULT
INDEX    EQU   *
         MVC   IMAGINDX+7(10),=CL10'NONE' ASSUME NO INDEXING
         TM    2(R6),X'80'        CORRECT ?
         BZ    LENGTH             YES, GO FIND LENGTH
         MVC   IMAGINDX+7(L'LMASK),LMASK ASSUME LEFT INDEXING
         TM    2(R6),X'20'        CORRECT ?
         BO    CVTINDX            YES, GO CONVERT IT
         MVC   IMAGINDX+7(L'RMASK),RMASK SHOW RIGHT INDEXING
CVTINDX  EQU   *
         MVC   BYTE,2(R6)         GET INDEX BYTE
         NI    BYTE,X'1F'         KEEP ONLY INDEX VALUE
         SR    R4,R4              CLEAR WORK REG
         IC    R4,BYTE            BINARY VALUE
         CVD   R4,DEC             CVT TO PACKED
         ED    IMAGINDX+7(4),DEC+6    AND EDIT
LENGTH   EQU   *
         SR    R9,R9              CLEAR LENGTH REG
         IC    R9,1(,R6)          GET LENGTH
         STC   R9,IMAGLEN         SAVE FOR DUMP
         LA    R6,2(,R6)          POINT TO 1ST IMAGE BYTE
         TM    0(R6),X'80'        INDEXING ?
         BZ    CVTLNGTH           NO LENGTH IS GOOD
         BCTR  R9,R0              DECR 1 FOR INDEX BYTE
         LA    R6,1(,R6)          POINT 1 PAST INDEX BYTE
CVTLNGTH EQU   *
         LA    R7,6               ASSUME 6 LINES/INCH
         TM    0(R6),X'10'        CORRECT ?
         BZ    SPACING            YES, SET UP SPACING
         LA    R7,8               SHOW 8 LINES/INCH
SPACING  EQU   *
         STC   R7,IMAGSPAC+10     MOVE SPACING TO PRINT
         OI    IMAGSPAC+10,X'F0'  MAKE PRINTABLE
         BAL   R10,INCHCVT        FIND FORM LENGTH
         MVC   IMAGSIZE+14(14),IMAGCHAN+23   AND MOVE IT
         MVC   PRNTLINE,HEADING   MOVE HEADING TO PRINT
         BAL   R10,PRINT          ...AND PRINT IT
         MVC   PRNTLINE(L'IMAGNAME),IMAGNAME MOVE NAME
         BAL   R10,PRINT          ...AND PRINT IT
         MVC   PRNTLINE(L'IMAGSIZE),IMAGSIZE MOVE SIZE
         BAL   R10,PRINT          ...AND PRINT IT
         MVC   PRNTLINE(L'IMAGSPAC),IMAGSPAC MOVE SPACING
         BAL   R10,PRINT          ...AND PRINT IT
         MVC   PRNTLINE(L'IMAGTYPE),IMAGTYPE MOVE TYPE
         BAL   R10,PRINT          ...AND PRINT IT
         MVC   PRNTLINE(L'IMAGINDX),IMAGINDX MOVE INDEXING
         BAL   R10,PRINT          ...AND PRINT IT
         MVI   IMAGCHAN,C'0'      CAUSE DOUBLE SPACE
         LR    R4,R9              GET IMAGE LENGTH
         LA    R9,1               START WITH LINE 1
CHANNELS EQU   *
         TM    0(R6),X'0F'        CHAN STOP THIS LINE ?
         BZ    CHANINCR           NO, GO INCR
         SR    R8,R8              CLEAR WORK REG
         MVC   BYTE(1),0(R6)     GET CHANNEL
         NI    BYTE,X'0F'        CLEAR UNWANTED
         IC    R8,BYTE           LOAD BINARY CHANNEL
         CVD   R8,DEC            CVT TO PACKED
         OI    DEC+7,X'0F'       FIX SIGN
         UNPK  IMAGCHAN+10(2),DEC+6(2)  MOVE TO PRINT
         CVD   R9,DEC            PACKED LINE NUMBER
         MVC   IMAGCHAN+17(4),=X'40202020' EDIT MASK
         ED    IMAGCHAN+17(4),DEC+6    MOVE LINE NUMBER
         BAL   R10,INCHCVT       DETERMINE INCHES FROM LINE
         MVC   PRNTLINE(L'IMAGCHAN),IMAGCHAN   MOVE CHANNEL
         BAL   R10,PRINT         ...AND PRINT IT
         MVI   IMAGCHAN,C' '     CAUSE SINGLE SPACEING
CHANINCR EQU   *
         LA    R6,1(,R6)         INCR POINTER
         LA    R9,1(,R9)         INCR LINE COUNTER
         BCT   R4,CHANNELS       DECR LNGTH AND BRANCH
CHANEND  EQU   *
         LTR   R4,R4             SHOULD BE ZERO
         BNZ   ERROR             NO, PRINT ERROR MSG
         BCTR  R6,R0             BACK UP 1
         TM    0(R6),X'10'       SHOULD BE END BYTE
         BZ    ERROR             NO, PRINT ERROR MSG
         SPACE 1
* ------------------------------------------------------------------- *
*        FORMATTED DUMP OF IMAGE IN HEX
* ------------------------------------------------------------------- *
         SPACE 1
DUMP     EQU   *
         LA    R6,MEMAREA        BEGINNING OF IMAGE
         L     R4,FOXZERO        ADDRESS COUNTER
         SR    R7,R7             INSURE ONLY LENGTH
         IC    R7,IMAGLEN        ...AND LOAD IT
         AR    R7,R6             ENDING ADDRESS OF IMAGE
         LA    R7,2(,R7)         TO BE SURE
         LA    R9,PRNTLINE+8     BEGINNING OF DUMP
         MVI   PRNTCLER+1,X'EF'  CLEAR PRNTLINE TO 0 - 1
         MVC   PRNTLINE(L'IMAGDUMP),IMAGDUMP   MOVE DUMP HEADING
         BAL   R10,PRINT          ...AND PRINT IT
         MVI   PRNTLINE,C'0'      CAUSE DOUBLE SPACE
AGAIN    EQU   *
         UNPK  0(9,R9),0(5,R6)    UNPK 9 BYTES
         MVI   8(R9),X'EF'        CLEAR THE BAD ONE
         LA    R6,4(,R6)          POINT TO NEXT EIGHT BYTES
         CLR   R7,R6              END OF IMAGE ?
         BL    DUMPDONE           YES, FINISH UP
         LA    R9,11(,R9)         FORMAT LIKE A ZAP DUMP
         CL    R9,=A(PRNTLINE+52) END OF PRINT LINE ?
         BL    AGAIN              NOT YET, KEEP GOING
         BH    HALF2              GO CHECK FOR END
         LA    R9,2(,R9)          CENTER GETS A WIDER MARGIN
         B     AGAIN              KEEP GOING
         SPACE 1
HALF2    EQU   *
         CL    R9,=A(PRNTLINE+98) END OF PRINT LINE?
         BL    AGAIN              NO, KEEP GOING
         STCM  R4,7,PRNTLINE+2    ADDR COUNTER
         LA    R4,512(,R4)        ADD 20 TO ADDR CTR
         TR    PRNTLINE,HEXTBL    TRANSLATE EF THRU FF
         BAL   R10,PRINT          GO PRINT IT
         LA    R9,PRNTLINE+8      POINT TO BEGINNING OF LINE
         B     AGAIN              ...AND CONTINUE
         SPACE 1
DUMPDONE EQU   *
         STCM  R4,7,PRNTLINE+2    ADDR FOR FINAL LINE
         TR    PRNTLINE,HEXTBL    FINAL TRANSLATION
         LA    R9,PRNTLINE+98     PREPARE TO TRUNC BUFFER FILL CHARS
DUMPTRNK EQU   *
         CLI   0(R9),C' '         IS IT A BLANK?
         BE    DUMPDECR           YES, GET NEXT BYTE
         CLI   0(R9),C'F'         IS IT A BUFFER FILL CHARACTER?
         BNE   DUMPRNT            NO, SCAN IS DONE
         MVI   0(R9),C' '         DROP BUFFER FILL CHARACTERS
DUMPDECR EQU   *
         BCT   R9,DUMPTRNK        GET NEXT BYTE
DUMPRNT  EQU   *
         MVI   PRNTCLER+1,C' '    CLEAR TO SPACES AGAIN
         BAL   R10,PRINT          PRINT IT
         B     NXTENT             ...AND GET NEXT IMAGE
* ---------------------------------------------------------------JDM1 *
*        4248 FCB'S CONTAIN THE SAME HEADER INFO AS OTHER FCB'S. JDM1
*        FOLLOWING THE HEADER INFO IS AT LEAST 5 BYTES, A FLAG   JDM1
*        BYTE (X'7E'), A CONTROL BYTE, AN OFFSET BYTE, AND DATA  JDM1
*        BYTES DESCRIBING THE FORM, AND TERMINATING WITH AN      JDM1
*        END-OS-SHEET BYTE (X'FE').                              JDM1
*                                                                JDM1
*        BYTE      INFORMATION                                   JDM1
*        0         FLAG BYTE                                     JDM1
*                  X'00' = NON-DEFAULT IMAGE                     JDM1
*                  X'80' = DEFAULT IMAGE                         JDM1
*        1-2       LENGTH IN HEX OF MODULE, EXCLUDING 3 BYTE HD  JDM1
*        NOTE: BYTES 1-3 IS HEADER (HD)                          JDM1
*        3         FLAG BYTE - X'7E'                             JDM1
*        4         CONTROL BYTE (SEE BELOW)                      JDM1
*        5         OFFSET BYTE - FOLLOWS THE CONTROL BYTE AND IS JDM1
*                  EITHER SET TO ZERO OR TO THE PRINT POSITION   JDM1
*                  OF THE HORIZONTAL COPY (2-168).               JDM1
*        6-NN      DATA BYTES                                    JDM1
*        EOS       END-OF-SHEET OR X'FE'                         JDM1
*                                                                JDM1
*        THE CONTROL BYTE IS A BIT PATTERN DESCRIBING IF THE     JDM1
*        HORIZONTAL COPY FEATURE IS ACTIVE AND WHAT PRINTER      JDM1
*        SPEED IS TO BE SET WHEN THE FCB IS LOADED INTO THE      JDM1
*        BUFFER.                                                 JDM1
*                                                                JDM1
*        BIT       INFORMATION                                   JDM1
*        0         RESERVED - X'0'                               JDM1
*        1-2       STACKER LEVEL (IGNORED BY 3262-5, IEBIMAGE    JDM1
*                  SETS BITS TO B'00')                           JDM1
*        3         HORIZONTAL COPY FEATURE (IGNORED FOR 3262-5)  JDM1
*                  0 - DEACTIVATE                                JDM1
*                  1 - ACTIVATE                                  JDM1
*        4-5       PRINTER SPEED OR PSPEED (IGNORED FOR 3262-5)  JDM1
*                  00 - UNCHANGED                                JDM1
*                  01 - LOW OR 2200 LPM                          JDM1
*                  10 - MEDIUM OR 3000 LPM                       JDM1
*                  11 - HIGH OR 3000 LPM                         JDM1
*        6-7       STACKER DROP RATE (IGNORED FOR 3262-5,        JDM1
*                  IEBIMAGE SETS BITS TO B'00')                  JDM1
*                                                                JDM1
*                                                                JDM1
*        4248 FCB MODULE DATA BYTE                               JDM1
*                                                                JDM1
*        BITS      INFORMATION                                   JDM1
*        1-3       LINE SPACING IN LPI                           JDM1
*                  0000 = NO CHANGE                              JDM1
*                  0110 = 6 LPI                                  JDM1
*                  1000 = 8 LPI                                  JDM1
*        4-7       CHANNEL CODE                                  JDM1
*                  BINARY  HEX  CHANNEL                          JDM1
*                  0000     0    NULL                            JDM1
*                  0001     1     1                              JDM1
*                  0010     2     2                              JDM1
*                  0011     3     3                              JDM1
*                  0100     4     4                              JDM1
*                  0101     5     5                              JDM1
*                  0110     6     6                              JDM1
*                  0111     7     7                              JDM1
*                  1000     8     8                              JDM1
*                  1001     9     9                              JDM1
*                  1010     A    10                              JDM1
*                  1011     B    11                              JDM1
*                  1100     C    12                              JDM1
*                                                                JDM1
*        NOTE: THE TOTAL NUMBER OF LINES DEFINED IN THE FORM     JDM1
*              MUST BE EQUAL TO THE LENGTH OF THE FORM.          JDM1
* ---------------------------------------------------------------JDM1 *
         SPACE 1                                                 JDM1
PR4248   EQU   *
         B     NXTENT             CODE ADDITION IS PENDING       JDM1
         SPACE 1
* ------------------------------------------------------------------- *
*        PRINT 3800 IMAGES
*
*        EACH FCB MODULE CONTAINS 8 BYTES OF HEADER INFO PRECEDING
*        THE DATA.
*
*        BYTES     INFORMATION
*        0-3       1-4 ALPHANUMERCI CHAR ID OF THIS MODULE, LEFT
*                  JUSTIFIED (EXCLUDING THE SYSTEM ASSIGNED PREFIX
*                  OF FCB3)
*        4-5       RESERVED - X'0000'
*        6-7       LENGTH OF MODULE IN HEX, EXCLUDING THE 8 BYTE HD.
*
*        FCB DATA FOLLOWING THE HEADER IS A SERIES OF 1-BYTE LINE
*        CONTROL CODES FOR EACH PHYSICAL LINE OF THE FORM. THERE ARE
*        18-144 DEPENDING ON THE LENGTH OF THE FORM.
*
*
*        BITS      INFORMATION
*        0-1       RESERVED - X'00'
*        2-3       LINE SPACING IN LPI
*                  00 =  6 LPI
*                  01 =  8 LPI
*                  10 = 10 LPI
*                  11 = 12 LPI
*        4-7       CHANNEL CODE
*                  BINARY  HEX  CHANNEL
*                  0000     0    NULL
*                  0001     1     1
*                  0010     2     2
*                  0011     3     3
*                  0100     4     4
*                  0101     5     5
*                  0110     6     6
*                  0111     7     7
*                  1000     8     8
*                  1001     9     9
*                  1010     A    10
*                  1011     B    11
*                  1100     C    12
*
*        FOR 3800 PRINTING THE TOP AND BOTTOM 1/2 OF EACH PAGE IS
*        UNPRINTABLE AND THE CODES CORRESPONDING TO THESE POSITIONS
*        MUST BE VOID OF ANY CHANNEL CODES. I.E. 3 BYTES OF X'00'S
*        ARE CODED FOR EACH TOP AND BOTTOM 1/2 INCH.
*
*        THE TOTAL NUMBER OF LINES DEFINED IN THE MODULE MUST BE EQUAL
*        TO THE LENGTH OF THE FORM. THE PRINTABLE LINES DEFINED MUST
*        START 1/2 INCH BELOW THE TOP OF THE FORM AND STOP 1/2 INCH
*        FROM THE BOTTOM OF THE FORM.
* ------------------------------------------------------------------- *
         SPACE 1
PR3800   EQU   *
         MVC   HEADING+1(4),=C'3800'   CHANGE HEADING
         MVI   LASTBYTE,X'FF'     CAUSE FIRST LINE TO PRINT
         MVC   IMAGIDNT+11(4),0(R6)   SETPRT IMAGE IDENT
         SR    R9,R9              CLEAR WORK REG
         IC    R9,7(,R6)          LENGTH OF MODULE
         LA    R9,8(,R9)          PLUS EXTRA LENGTH OF 3800 HEADER
         STC   R9,IMAGLEN         SAVE FOR DUMP
         IC    R9,7(,R6)          GET LENGTH AGAIN
         BAL   R10,SIZE3800       GO ADD UP ALL THE LINE THICKNESS'S
         ST    R9,ENDLEN          FORM LENGTH IN 1/24 INCHES
         LA    R7,24              SET A DENOMINATOR
         BAL   R10,INCHCVT        GO CONVERT TO INCHES
         MVC   IMAGSIZE+14(19),IMAGCHAN+23   MOVE INTO TEXT
         MVC   PRNTLINE,HEADING   MOVE PAGE HEADING TO PRINT LINE
         BAL   R10,PRINT          AND PRINT IT
         MVC   PRNTLINE(L'IMAGNAME),IMAGNAME   MOVE NAME
         BAL   R10,PRINT          ...AND PRINT IT
         MVC   PRNTLINE(L'IMAGIDNT),IMAGIDNT   MOVE SETPRT ID TO PRINT
         BAL   R10,PRINT          AND PRINT IT
         MVC   PRNTLINE(L'IMAGSIZE),IMAGSIZE   MOVE LENGTH TO PRINT
         BAL   R10,PRINT          AND PRINT IT
         MVI   IMAGCHAN,C'0'      CAUSE DOUBLE SPACE FOR NEXT LINE
         LA    R4,1               START WITH LINE 1
         SR    R9,R9              START AT 0 LENGTH
         LA    R6,8(,R6)          GET BEGINNING OF LINES DATA
CH3800   EQU   *
         MVC   BYTE,0(R6)         SPACING AND CHANNEL FOR A LINE
         SR    R8,R8              CLEAR WORK REG
         IC    R8,BYTE            PUT IT IN A WORK REG
         SRL   R8,4               KEEP ONLY SPACING INFO
         STC   R8,BYTE            SAVE SPACING INFO
         CLC   BYTE,LASTBYTE      HAS SPACING CHANGED?
         BE    SAMESPAC           NO, DONT PRINT IT
         OI    PRSW,X'01'         CAUSE SPACING INFO TO PRINT
         STC   R8,LASTBYTE        SAVE FOR NEXT TIME AROUND
         IC    R7,LPI(R8)         CONVERT INFO TO LINES/INCH
         CVD   R7,DEC             MAKE THAT DECIMAL
         MVC   IMAGSPAC+8(4),=X'40202020'  EDIT MASK
         ED    IMAGSPAC+8(4),DEC+6   CONVERT SPACING TO EBCDIC
         MVI   IMAGSPAC+8,C'='    PUT THE "=" BACK
         MVC   PRNTLINE+42(L'IMAGSPAC-1),IMAGSPAC+1  SPACING TO PRNT
SAMESPAC EQU   *
         SR    R0,R0              CLEAR WORK REG
         IC    R0,THICKNS(R8)     GET LINE THICKNESS FOR THIS SPACING
         AR    R9,R0              ADD IT TO TOTAL FROM PAGE TOP
         ST    R9,SAVE9           SAVE THE TOTAL
         LA    R7,24              SET LOWEST COMMON DENOM FOR 6 8 12
         BAL   R10,INCHCVT        GO CONVERT TO INCHES AND FRACTION
         CVD   R4,DEC             MAKE LINE NUMBER DECIMAL
         MVC   IMAGCHAN+17(4),=X'40202020'   EDIT MASK
         ED    IMAGCHAN+17(4),DEC+6    EBCDIC LINE NUMBER
         MVC   BYTE,0(R6)         GET CHANNEL DATA
         NI    BYTE,X'0F'         PURIFY THE CHANNEL DATA
         BZ    TST3800            NO CHANNEL DATA GO TST FOR PRNT
         OI    PRSW,X'10'         CAUSE THIS LINE TO PRINT
         IC    R8,BYTE            GET CHANNEL ID IN HEX
         CVD   R8,DEC             CONVERT TO DECIMAL
         OI    DEC+7,X'0F'        FIX THE SIGN
         UNPK  IMAGCHAN+10(2),DEC+6(2)   MAKE PRINTABLE
TST3800  EQU   *
         CLI   PRSW,X'00'         ANYTHING WORTH PRINTING?
         BE    INC3800            NO, DONT PRINT
         MVC   PRNTLINE(L'IMAGCHAN),IMAGCHAN   MOVE CHANNEL TO PRNT
         TM    PRSW,X'10'         ANY CHANNEL DATA
         BO    PRNTITAL           YES, PRINT IT
         MVC   PRNTLINE+1(12),HEADING+80   BLANK OUT CHANNEL INFO
PRNTITAL EQU   *
         BAL   R10,PRINT          GO PRINT THIS LINE
         MVI   IMAGCHAN,C' '      FORCE SINGLE SPACING
         MVI   PRSW,X'00'         TURN OFF PRINT SWITCH
INC3800  EQU   *
         LA    R6,1(,R6)          INCR BUFFER PTR
         LA    R4,1(,R4)          INCR LINECTR
         CL    R9,ENDLEN          END OF BUFFER?
         BL    CH3800             NO, GO DO NEXT LINE
         LA    R4,7(,R4)          ADJUST BUFF LEN WITH HEADER LEN
         STC   R4,BYTE            AND SAVE IT FOR COMPARE
         CLC   BYTE,IMAGLEN       DID THEY COME OUT THE SAME?
         BE    DUMP               YES, GO PRINT THE IMAGE DUMP
ERROR    EQU   *
         MVC   PRNTLINE(L'ERRLINE),ERRLINE   SHOW ERROR
         BAL   R10,PRINT           ...AND PRINT IT
         B     DUMP               GO PRINT MODULE DUMP
         SPACE 1
SIZE3800 EQU   *
         STM   R5,R9,REGS         SAVE THE CHANGED REGISTERS
         SR    R5,R5              CLEAR WORK REGISTER
         SR    R7,R7              CLEAR ANOTHER ONE
         LA    R6,8(,R6)          POINT TO FIRST LINE DATA
FORMSIZE EQU   *
         IC    R5,0(,R6)          GET SPACING AND CHANNEL DATA
         SRL   R5,4               MAKE SPACING INDEX
         IC    R5,THICKNS(R5)     GET LINE THICKNESS IN 1/24 INCH
         AR    R7,R5              ADD IT TO TOTAL
         LA    R6,1(,R6)          POINT TO NEXT BYTE
         BCT   R9,FORMSIZE        GO THROUGH WHOLE IMAGE
         ST    R7,REGS+16         SAVE TOTAL LENGTH IN R9'S PLACE
         LM    R5,R9,REGS         RESTORE THE REGS, R9 GETS LENGTH
         BR    R10                RETURN
         SPACE 1
* ------------------------------------------------------------------- *
*        CONVERTS A NUMERATOR IN R9 AND A DENOMINATOR IN R7 TO A
*        MIXED FRACTION REDUCED TO THE LOWEST TERMS.
* ------------------------------------------------------------------- *
         SPACE 1
INCHCVT  EQU   *
         STM   R5,R9,REGS         SAVE THE REGISTERS USED
         LTR   R7,R7              DENOMINATOR CAN'T BE ZERO
         BZR   R10                SOMETHING'S WRONG JUST RETURN
         SR    R8,R8              CLEAR FOR DIVISION
         DR    R8,R7              DIVIDE NUMERATOR BY DENOMINATOR
         CVD   R9,DEC             CONVERT INTEGER QUOTIENT TO DEC
         MVC   IMAGCHAN+22(20),FRACTMSK  INITIALIZE EDIT AREA
         ED    IMAGCHAN+22(4),DEC+6   EDIT INTEGER PART OF FRACTION
         LTR   R9,R8              PREPARE NUMERATOR FOR REDUCTION
         BZ    INCHEVEN           NO FRACTION, MOVE OVER "INCHES"
         ST    R9,SAVE9           SAVE INITIAL VALUE OF NUMERATOR
         ST    R7,SAVE7           SAVE INITIAL VALUE OF DENOMINATOR
         LR    R5,R9              SET REDUCTION COUNTER
INCHLOOP EQU   *
         C     R5,=F'1'           LOWEST POSSIBLE?
         BE    INCHDONE           YES, MIGHT AS WELL QUIT
         SR    R8,R8              PREPARE FOR DIVISION
         DR    R8,R5              TRY TO REDUCE WITH ALL POSS VALUES
         LTR   R8,R8              EVENLY DIVISABLE BY R5?
         BZ    INCHDENM           YES, GO TRY DENOMINATOR
INCHDECR EQU   *
         L     R9,SAVE9           RESTORE NUMERATOR
         BCT   R5,INCHLOOP        GET NEXT DIVISOR AND TRY AGAIN
         B     INCHDONE           ALL DONE GO MAKE EBCDIC
         SPACE 1
INCHDENM EQU   *
         SR    R6,R6              PREPARE FOR DIVISION
         DR    R6,R5              SEE IF DENOM IS ALSO DIVISABLE
         LTR   R6,R6              IS IT?
         BZ    INCHRDUC           YES, GO REDUCE THE SAVED VALUES
         L     R7,SAVE7           NULLIFY THE DIVISION
         B     INCHDECR           GO TRY ANOTHER DIVISOR
         SPACE 1
INCHRDUC EQU   *
         ST    R7,SAVE7           SAVE NEW DENOMINATOR
         ST    R9,SAVE9           SAVE NEW NUMERATOR
         LR    R5,R9              RESET THE DIVISOR
         B     INCHLOOP           GO START FROM THE TOP
         SPACE 1
INCHDONE EQU   *
         CVD   R9,DEC             CONVERT NUMERATOR TO DECIMAL
         MVC   IMAGCHAN+26(4),=X'40202020' MOVE EDIT MASK
         ED    IMAGCHAN+26(4),DEC+6  EDIT NUMERATOR
         CVD   R7,DEC             CONVERT DENOMINATOR TO DECIMAL
         MVC   IMAGCHAN+31(4),=X'40202020'   MOVE EDIT MASK
         ED    IMAGCHAN+31(4),DEC+6  EDIT DENOMINATOR
         MVI   IMAGCHAN+30,C'/'   PUT SLASH IN FOR FRACTION
INCHEVEN EQU   *
         LA    R5,8               SET SCAN LIMIT
         LA    R6,IMAGCHAN+27     SET SCAN START
         LR    R8,R6              START WITH SAME VALUE IN R8
INCHCPRS EQU   *
         IC    R7,0(,R6)          GET A CHAR FROM EBCDIC FRACTION
         CLI   0(R6),C' '         IS IT A BLANK?
         BE    INCHDROP           YES, COMPRESS IT OUT
         STC   R7,0(,R8)          OTHERWISE MOVE IT OVER
         LA    R8,1(,R8)          INCREMENT STORE POINTER
INCHDROP EQU   *
         LA    R6,1(,R6)          INCREMENT LOAD POINTER
         BCT   R5,INCHCPRS        CONTINUE SCANING FOR BLANKS
         MVC   0(7,R8),INCHES     MOVE OVER THE WORD "INCHES"
         LM    R5,R9,REGS         RESTORE THE REGISTERS
         BR    R10                RETURN
         SPACE 1
* ------------------------------------------------------------------- *
*        COMMON PRINT ROUTINE
* ------------------------------------------------------------------- *
         SPACE 1
PRINT    EQU   *
         PUT   SYSPRINT,PRNTLINE  PRINT A LINE
PRNTCLER EQU   *
         MVI   PRNTLINE,C' '      CLEAR PRINT LINE
         MVC   PRNTLINE+1(L'PRNTLINE-1),PRNTLINE ..TO SPACES
         BR    R10                RETURN
         SPACE 1
RETURN   EQU   *
         CLOSE (SYSPRINT,,SYSUT1)
         L     R13,SA+4
         LM    R14,R12,12(R13)
         XR    R15,R15
BR14     BR    R14
         SPACE 1
* ------------------------------------------------------------------- *
         SPACE 1
         DS    0D
SYSUT1   DCB   DDNAME=SYSUT1,                                          X
               DSORG=PO,                                               X
               RECFM=U,                                                X
               BLKSIZE=1024,                                           X
               LRECL=1024,                                             X
               SYNAD=BR14,                                             X
               EODAD=RETURN,                                           X
               MACRF=(R)
         SPACE 1
SYSPRINT DCB   DDNAME=SYSPRINT,                                        X
               RECFM=FA,                                               X
               BLKSIZE=133,                                            X
               LRECL=133,                                              X
               DSORG=PS,                                               X
               MACRF=(PM)
         SPACE 1
* ------------------------------------------------------------------- *
*        LITERAL POOL FOLLOWS
* ------------------------------------------------------------------- *
         SPACE 1
         LTORG
         SPACE 1
SA       DC    9D'0'              SAVE AREA
PARMTBL  DC    100CL8' '          PARM TABLE
DIRTTRK  DC    X'00000100'        DIRECTORY BLK ADDR
MEMTTRK  DC    F'0'               MEMBER CSECT ADDR
DIRAREA  DC    XL256'00'          DIRECTORY AREA
MEMAREA  DC    XL256'00'          MEMBER AREA
PARMOVE  MVC   0(,R5),0(R3)       FOR LOADING TABLE
* ------------------------------------------------------------------- *
PRNTLINE DS    CL133          PRINT LINE
* ------------------------------------------------------------------- *
HEADING  DC    CL133'1**** FORMS CONTROL BUFFER DESCRIPTION'
IMAGNAME DC    C'0NAME=               '
IMAGSIZE DC    C'0FORM LENGTH= *** */* INCHES    '
IMAGSPAC DC    C'0SPACING= *  LINES PER INCH    '
IMAGTYPE DC    C'0TYPE=NON-DEFAULT       '
IMAGINDX DC    C'0INDEX= *** RIGHT      '
IMAGCHAN DC    C'  CHANNEL **=LINE ***, *** ***/ *** INCHES'
IMAGIDNT DC    C'0SETPRT ID=**** '
ERRLINE  DC    C'0  **IMAGE LENGTH ERROR'
IMAGDUMP DC    C'-              ***IMAGE DUMP***'
* ------------------------------------------------------------------- *
HEXTBL   EQU   *-X'EF'            UNUSED PORTION OF TABLE
         DC    C' 0123456789ABCDEF' = HEX EF THRU HEX FF
RMASK    DC    X'4020202140D9C9C7C8E3'
LMASK    DC    X'4020202140D3C5C6E340'
FRACTMSK DC    X'40202020',CL16' '  INCH INTEGER MASK
INCHES   DC    C' INCHES'
DEC      DC    D'0'               DBL WRD WORK AREA
BYTE     DC    X'00'              SINGLE BYTE WORKAREA
LASTBYTE DS    X                  PREVIOUS SPACING AND CHNL 3800
PRSW     DS    X                  PRINT SWITCH FOR 3800
REGS     DS    5F                 SAVE AREA FOR REGS R5-R9
SAVE7    DS    F                  REG 7 SAVE AREA
SAVE9    DS    F                  REG 9 SAVE AREA
ENDLEN   DS    F                  3800 BUFFER LENGTH IN 1/24 INCHES
FOXZERO  DC    X'00F0F0F0'        BEGINNING DUMP ADDRESS
IMAGLEN  DS    X
LPI      DC    AL1(6,8,8,12)      LINES PER INCH TABLE
THICKNS  DC    AL1(4,3,3,2)       TBL OF LINE THICKNESS'S PER LPI
         END
