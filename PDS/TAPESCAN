         TITLE '  ADPTPESCAN AT LEVEL 005 AS OF 03/26/82 '
*---------------------------------------------------------------------- 00002
*                                                                       00003
* 1.69                                                                  00004
*                                                                       00005
* TAPESCAN                                                              00006
*                                                                       00007
* PAGE 001                                                              00008
*                                                                       00009
*                                                                       00010
*                                                                       00011
* Abstract - A quick program to provide an overview of the data sets    00012
*            on a tape, copy files and recover data past the first end  00013
*            of volume indicator.  Information presented includes recor 00014
*            and byte count, length estimate, display of the first 100  00015
*            bytes of the first four records of each data set, and the  00016
*            physical tape file number.                                 00017
*                                                                       00018
* Requirements - Region - 10K plus buffers                              00019
*                For    - Processing a tape containing 4776 data blocks 00020
*                CPU    - 0.042 minutes                                 00021
*                I/O    - 5.122 minutes                                 00022
*                                                                       00023
* Warnings - When data is recovered past the end of volume indicator,   00024
*            the first record may have been truncated.  If accepted, it 00025
*            may lead to problems even after it is copied.  When copyin 00026
*            data sets from a standard label tape, the data set sequenc 00027
*            number stored in the header record is not changed.  This,  00028
*            so far, has caused no problems but is not supported by IBM 00029
*            Some operations are based on the number of tape marks en-  00030
*            countered.  See the IBM manual: "Tape Labels" (GC28-6680)  00031
*            for a description of tape formats with different labels.   00032
*                                                                       00033
* Restrictions - For use with tape data sets only.                      00034
*                                                                       00035
* Availability - Available on all M&DO 360 computers.                   00036
*                                                                       00037
* ddnames - SYSPRINT - A file which contains the tape overview report   00038
*                      and any I/O error messages.                      00039
*                                                                       00040
*           INPUT    - The file which references the tape to be scanned 00041
*                      or copied.                                       00042
*                                                                       00043
*           OUTPUT   - If required, will contain the copy of the data   00044
*                      sets requested from INPUT.                       00045
*                                                                       00046
* Parameters - All the parameters are keywords.  Thier meanings, defaul 00047
*              values and key words are:                                00048
*                                                                       00049
*     COPY      - Create a copy of the input data sets, labels and      00050
*                 tape marks requested on OUTPUT.  The OUTPUT DD        00051
*                 statement must be included.  NOCOUNT may not be       00052
*                 specified.  By default the parameter is assumed       00053
*                 not to be in effect.                                  00054
*                                                                       00055
*                                                                       00056
*                                                                       00057
*                                                                       00058
*                                                                       00059
*                                                                       00060
*                                                                       00061
*                                                                       00062
*                                                                       00063
*---------------------------------------------------------------------- 00064
*---------------------------------------------------------------------- 00065
*                                                                       00066
*                                                                    1. 00067
*                                                                       00068
*                                                                TAPESC 00069
*                                                                       00070
*                                                                PAGE 0 00071
*                                                                       00072
*                                                                       00073
*                                                                       00074
*        EOVMOD    - Places the input data to be copied after the last  00075
*                    data set on OUTPUT.  The OUTPUT DD statement must  00076
*                    be included.  This parameter implies COPY.  NOCOUN 00077
*                    may not be specified.  By default the parameter    00078
*                    is assumed not to be in effect.                    00079
*                                                                       00080
*        ERRLIMn   - The maximum number of I/O errors allowed before    00081
*                    PROCESSING IS TERMINATED IS SPECIFIED BY "N".  THE 00082
*                    default is ERRLIM50.                               00083
*                                                                       00084
*        LISTn     - The number of blocks which have one line produced  00085
*                    SYSPRINT IS SPECIFIED BY "N".  THE DEFAULT IS LIST 00086
*                                                                       00087
*        MAXEOVn   - Processing will continue until "n" end of volume   00088
*                    indicators have been found.  Processing will stop  00089
*                    when either MAXTMn or MAXEOVn is exceeded.  The    00090
*                    default value is MAXEOV1 and if SKIPEOVn is used   00091
*                    then MAXEOVn must be one greater than SKIPEOVn.    00092
*                                                                       00093
*        MAXTMn    - Stop processing after "n" tape marks have been     00094
*                    encountered.  This will not go past the end of vol 00095
*                    indicator.  The default is to process to the end o 00096
*                    the volume.                                        00097
*                                                                       00098
*        NOCOUNT   - To save I/O time the counting feature may be turne 00099
*                    off by this parameter.  The number of physical blo 00100
*                    the maximum, average and minimum block sizes, the  00101
*                    length and the total number of bytes processed wil 00102
*                    be reported.  This parameter may not be used with  00103
*                    or EOVMOD.  By default the parameter is assumed    00104
*                    not to be in effect.                               00105
*                                                                       00106
*        NOHEX     - Do not produce the hexadecimal equivalent of the f 00107
*                    few lines on SYSPRINT.  By default the parameter   00108
*                    is assumed to be off.                              00109
*                                                                       00110
*        NOLIST    - Functions the same as LIST0.  By default the       00111
*                    parameter is assumed not to be in effect.          00112
*                                                                       00113
*        NOSUMMARY - Do not produce the summary of data sets for a stan 00114
*                    label tape on SYSPRINT.  By default the parameter  00115
*                     is assumed not to be in effect.                   00116
*                                                                       00117
*                                                                       00118
*                                                                       00119
*                                                                       00120
*                                                                       00121
*                                                                       00122
*                                                                       00123
*                                                                       00124
*                                                                       00125
*                                                                       00126
*---------------------------------------------------------------------- 00127
*---------------------------------------------------------------------- 00128
*                                                                       00129
* 1.69                                                                  00130
*                                                                       00131
* TAPESCAN                                                              00132
*                                                                       00133
* PAGE 003                                                              00134
*                                                                       00135
*                                                                       00136
*                                                                       00137
*     NOVOLSER  - During a copy operation betweem two standard label    00138
*                 tapes, the volume header label will not be copied.    00139
*                 By default the parameter is assumed not to be in      00140
*                 effect.                                               00141
*                                                                       00142
*     SKIPEOVn  - Processing will start after "n" number of end of volu 00143
*                 indicators have been encountered.  Insure that MAXEOV 00144
*                 is at least one greater than SKIPEOVn.  The default i 00145
*                 SKIPEOV0.                                             00146
*                                                                       00147
*     SKIPTMn   - Start processing after "n" tape marks have been       00148
*                 encountered.  Processing will not start past the end  00149
*                 of volume indicator.  When both SKIPTMn and SKIPEOVn  00150
*                 are specified the maximum amount of skipping is done. 00151
*                 The default is SKIPTM0.                               00152
*                                                                       00153
* Default Parameters - LIST4,SKIPTM0,MAXEOV1,SKIPEOV0,ERRLIM50          00154
*                                                                       00155
* Control statements - None.                                            00156
*                                                                       00157
* Return codes - The job step return code is set if TAPESCAN abnormally 00158
*                terminates.  This may be tested by later job steps and 00159
*                their execution based on TAPESCAN's success.  The      00160
*                return code is:                                        00161
*                                                                       00162
*                8 - TAPESCAN has terminated before processing has been 00163
*                    completed.  This is usually caused by I/O errors o 00164
*                    INPUT.                                             00165
*                                                                       00166
* Procedure - A procedure called TAPESCAN is available.  The SYSPRINT   00167
*             and INPUT DD statements are included in the above order.  00168
*             The OUTPUT statement is not included.  The symbolic para- 00169
*             meters and their meanings are:                            00170
*                                                                       00171
*             DEN   - The density of the tape being processed.  There   00172
*                     is no specified default; the system defaults are  00173
*                     in effect.                                        00174
*                                                                       00175
*             EROPT - The processing option when an I/O error occurs.   00176
*                     The default is ACC.                               00177
*                                                                       00178
*             LABEL - The type of label processing to be used for the   00179
*                     tape associated with the INPUT DD statement.  The 00180
*                     default is BLP.                                   00181
*                                                                       00182
*             OPTCD - The processing options codes.  There is no defaul 00183
*                                                                       00184
*                                                                       00185
*                                                                       00186
*                                                                       00187
*                                                                       00188
*                                                                       00189
*---------------------------------------------------------------------- 00190
*---------------------------------------------------------------------- 00191
*                                                                       00192
*                                                                    1. 00193
*                                                                       00194
*                                                                TAPESC 00195
*                                                                       00196
*                                                                PAGE 0 00197
*                                                                       00198
*                                                                       00199
*                                                                       00200
*                T     - The volume serial number of the tape associate 00201
*                        with the INPUT DD statement.  There is no defa 00202
*                                                                       00203
*                TRACK - This specifies the number of tracks recorded o 00204
*                        the tape and the implied density.  The default 00205
*                        4, indicating a nine track tape of either 800  00206
*                        1600 bits per inch density.                    00207
*                                                                       00208
*                TRTCH - For seven track tapes this specifies the parit 00209
*                        translation and conversion of the data on the  00210
*                        There is no default specified and the system d 00211
*                        is in effect.  TRTCH does not affect nine trac 00212
*                        tapes.                                         00213
*                                                                       00214
*    Default symbolic parameter values - TRACK=4,LABEL=BLP,EROPT=ACC    00215
*                                                                       00216
*    Examples - Using the procedure analyze a nine track tape using the 00217
*               defaults.                                               00218
*                                                                       00219
*               //TAPESCAN EXEC TAPESCAN,T=TAPENR                       00220
*                                                                       00221
*               Using the procedure copy the data between the first and 00222
*               second end of volume indicators of a BLP tape skipping  00223
*               bad blocks, to the third file of another BLP tape.      00224
*                                                                       00225
*               //TAPECOPY EXEC TAPESCAN,T=BADTP,                       00226
*               //             PARM=(COPY,MAXEOV2,SKIPEOV1),EROPT=SKIP  00227
*               //OUTPUT   DD  UNIT=2400-4,LABEL=(3,BLP),VOL=SER=COPYTP 00228
*                                                                       00229
*               Copy the fourth and fifth files of a standard label sev 00230
*               track 556 BPI even parity tape needing translation and  00231
*               conversion, to the second and third files of a tape whi 00232
*               had only one file.  Do not copy the volume header recor 00233
*               or produce the hexadecimal output on SYSPRINT.  List th 00234
*               first 20 records of the input data sets.  Stop processi 00235
*               after 5 I/O errors occur.                               00236
*                                                                       00237
*               //COPYTAPE EXEC PGM=TAPESCAN,REGION=80K,PARM=(COPY,NOVO 00238
*               //             EOVMOD,SKIPTM10,MAXTM16,LIST20,NOHEX)    00239
*               //SYSPRINT DD  SYSOUT=A                                 00240
*               //INPUT    DD  UNIT=2400-7,DISP=OLD,DCB=(TRTCH=ET,DEN=1 00241
*               //             EROPT=ACC),VOL=SER=TRACK7                00242
*               //OUTPUT   DD  UNIT=2400-4,LABEL=2,VOL=SER=OTPTTP       00243
*                                                                       00244
*    References - None.                                                 00245
*                                                                       00246
*    Alternate utility - For copying and record counting: PATRICK.      00247
*                                                                       00248
*                                                                       00249
*                                                                       00250
*                                                                       00251
*                                                                       00252
*--------------------------------------------------------------------   00253**5
         SPACE                                                          00254
TSCN TITLE 'TAPESCAN 3.4  -  GSFC TAPE ANALYSIS AND COPYING UTILITY'    00255
* THIS PROGRAM, CALLED TAPESCAN, WAS WRITTEN BY WILL DALAND, SOCIAL     00256
* SCIENCE STATISTICAL LABORATORY, INSTITUTE FOR RESEARCH IN SOCIAL      00257
* SCIENCE, UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL, MARCH 1974.     00258
* SEE IRSS MEMO SSSL-7-3 FOR FURTHER DOCUMENTATION.                     00259
* SINCE PROGRAM FOR TAPESCAN WAS PUBLICALLY FUNDED, PERMISSION IS       00260
* GRANTED FOR ANYONE TO USE THIS PROGRAM IN WHOLE OR IN PART.  IT       00261
* IS REQUESTED THAT WHEN DOING SO YOU GIVE CREDIT (PREFERABLY BOTH      00262
* IN SOURCE AND DOCUMENTATION) TO WILL DALAND, IRSS, UNC@CH.            00263
* VERSION 3.1 INCLUDES EXPIRATION DATE, AVERAGE BLOCK SIZES, AND VTOC   00264
* LISTING AND WAS PRODUCED BY C. WRANDLE BARTH, GODDARD SPACE FLIGHT    00265
* CENTER, JANUARY 1975.                                                 00266
* VERSION 3.2 CORRECTED VARIOUS BUGS.                                   00267
* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.            00268
* VERSION 3.4 ADDS 6250 BPI TAPE HANDLING.                              00269
* MVS UPDATES ARE TO CHANGE 32767 TO 32760 IN THE MAX NUMBER FOR        00270
*     AN EXCP CCW                                                       00271
* PLACEMENT OF PROGRAM SECTIONS: INIT CODE, INIT SUBS, INIT VARS,       00272
* INIT LITS, COMMON ROUTINES, COMMON VARS, COMMON LITS, MAIN CODE,      00273
* MAIN SUBS, MAIN VARS, MAIN LITS.                                      00274
MSECT    DSECT                                                          00275
TRT1     DS    32D                                                      00276
BLANKBUF DS    CL136              BLANKS FOR BLANKING MSGBUF FAST       00277
TRT2     DS    32D                                                      00278
MSGBUF   DS    CL136                                                    00279
RECBUF   DS    CL136              MINIMUM ALLOC, MAX ALLOC = 32K        00280
TAPESCAN CSECT                                                          00281
R0       EQU   0   WORK REG + SYSTEM USES                               00282
R1       EQU   1   WORK REG + SYSTEM USES                               00283
R2       EQU   2   MOSTLY FOR LINKAGE TO PUTLINE & GETNUM               00284
R3       EQU   3   USED IN PARM SCANNER + VTOC ENTRY POINTER.     -CWB- 00285
R4       EQU   4   BELOW LABEL 'PROCESS' COUNTS BLKS READ FOLLOWING A  *00286
                   TAPEMARK OR THE LOAD POINT.                          00287
R5       EQU   5   WORK, INTERNAL SUBROUTINE LINKAGE                    00288
R6       EQU   6   WORK REG                                             00289
R7       EQU   7   WORK REG + LENGTH OF LAST BLK READ                   00290
R8       EQU   8   PARM FIELD LENGTH CTR, TOTAL BYTES ON TAPE CTR       00291
R9       EQU   9   BASE REG FOR DSECT MSECT                             00292
R10      EQU   10  FREE UNUSED REG                                      00293
R11      EQU   11  2ND BASE REG                                         00294
R12      EQU   12  1ST BASE REG                                         00295
R13      EQU   13                                                       00296
R14      EQU   14  WORK REG + SYSTEM USES                               00297
R15      EQU   15  WORK REG + SYSTEM USES                               00298
DCBTRTCH EQU   16                                                       00299
DCBDEN   EQU   18                                                       00300
DCBEODAD EQU   32                                                       00301
DCBDEBAD EQU   44                                                       00302
DCBOFLGS EQU   48                                                       00303
DCBBLKSI EQU   62                                                       00304
DCBIOBA  EQU   68                 PTR TO IOB'S BSAM PREFIX              00305
IOBECBPT EQU   4                                                        00306
IOBSTART EQU   16                                                       00307
DEBUCBAD EQU   32                                                       00308
JFCBTSDM EQU   52                                                       00309
JFCBLTYP EQU   66                 LABEL TYPE (AL, LTM, ETC.)            00310
JFCBFLSQ EQU   68                 FILE SEQUENCE NUMBER, 0 OR 1 =1ST     00311
JFCBVOLS EQU   118                1ST BYTE OF JFCB VOLUME LIST          00312
         PRINT NOGEN                                                    00313
         USING *,R12              BASE FOR INITIALIZATION ONLY          00314
         STM   14,12,12(13)                                             00315
         LR    R12,R15            R12 = TEMP BASE FOR INITIALIZATION    00316
         LA    R11,EXIT           PERMANENT BASE FOR MAIN AND COMMON    00317
         USING EXIT,R11                                                 00318
         LA    R9,SAVE                                                  00319
         ST    R9,8(R13)                                                00320
         ST    13,SAVE+4                                                00321
         LR    R13,R9                                                   00322
         L     R1,0(R1)           GET PTR TO PARM FIELD                 00323
         LH    R8,0(R1)           LOAD PARM FIELD LENGTH                00324
         LA    R3,2(R1)           SET PTR TO PARM FIELD CHAR STRING     00325
         LA    R9,SRCHPRM         LOAD TEMPORARY BASE FOR MSECT DSECT   00326
         USING MSECT,R9           PERMANENT DECLARATION FOR MSECT BASE  00327
         OPEN  (SYSPRINT,OUTPUT)                                        00328
         TM    SYSPRINT+DCBOFLGS,X'10'                                  00329
         BZ    EXITRC8                                                  00330
         GETMAIN VU,LA=GMCTRL,A=GMLOCS                                  00331
         L     R9,GMLOCS          THERE IS AT LEAST THE MINIMUM CORE    00332
*              ABOVE STMT SETS UP PERMANENT BASE FOR MSECT DSECT        00333
*        MVI   BLANKBUF,C' '           (POSTPONE TIL AFTER CLEAR) -CWB- 00334
*        MVC   BLANKBUF+1(135),BLANKBUF                           -CWB- 00335
         LR    R6,R9              START CLEARING GOTTEN MAIN TO        *00336
                                  SHORTEN POSSIBLE DUMPS.               00337
         L     R4,GMLOCS+4        ACTUAL LENGTH OF GOTTEN MAIN          00338
         LA    R5,256             OFT-USED CONSTANT FOR CLEARING MAIN   00339
CLOOP    CR    R4,R5              R5 CONTAINS F'256'                    00340
         BNH   LE256              BIF ONLY 256 OR FEWER BYTES LEFT      00341
         XC    0(256,R6),0(R6)    CLEAR 256 BYTES                       00342
         SR    R4,R5              R5 CONTAINS F'256'                    00343
         AR    R6,R5              R5 CONTAINS F'256'                    00344
         B     CLOOP                                                    00345
LE256    BCTR  R4,0               SET TO MACHINE LENGTH                 00346
         EX    R4,XCLEAR          CLEAR LAST 1 TO 256 BYTES             00347
XCLEAR   XC    0(0,R6),0(R6)      EXECUTED IN STMT ABOVE                00348
         MVI   BLANKBUF,C' '           CLEAR BLANK AREA.          -CWB- 00349
         MVC   BLANKBUF+1(135),BLANKBUF                           -CWB- 00350
         LA    R1,MSGBUF+46       FOR ADDRESS CONSTANT IN DYNAMIC -CWB- 00351
         ST    R1,AMSGBP46        STORAGE.                        -CWB- 00352
         LA    R1,MSGBUF+72       SECOND ADCON.                   -CWB- 00353
         ST    R1,AMSGBP72                                        -CWB- 00354
         LA    R15,RECBUF         POINT THE WRITE                       00355
         O     R15,WRTCMND        CCW TO DYNAMICALLY                    00356
         ST    R15,WRTCMND        ALLOCATED RECORD BUFFER.              00357
         LA    R15,RECBUF         SET FILE SEARCH CCW TO                00358
         O     R15,READ81CM       POINT TO                              00359
         ST    R15,READ81CM                                             00360
         LA    R15,RECBUF         INSERT POINTER IN               -CWB- 00361
         O     R15,READCMND            READ COMMAND.              -CWB- 00362
         ST    R15,READCMND                                       -CWB- 00363
         LR    R5,R9              PTR TO TRT1                           00364
         LA    R6,16                                                    00365
         LA    R7,CTABLE                                                00366
SETUPTR1 MVC   0(1,5),0(7)        MOVE SEED CHAR INTO TRT1              00367
         MVC   1(15,5),0(5)       AND PROPAGATE IT                      00368
         LA    5,16(5)                                                  00369
         LA    7,1(7)                                                   00370
         BCT   6,SETUPTR1                                               00371
         MVC   TRT2(16),CTABLE    MOVE 16 CHAR SEED INTO TRT2           00372
         MVC   TRT2+16(240),TRT2  AND PROPAGATE IT 15 TIMES             00373
         TIME  DEC                GET DATE IN R1 IN FORM 00YYJJJF       00374
         ST    R0,BADLNGTH        SAVE TIME WHILE YOU'RE AT IT          00375
         LR    R2,R1              PUT IN R2 TO PASS TO DATE SUBROUTINE  00376
         LA    R1,=A(DATERSLT)    PTR TO PTR TO DATE'S RESULT FIELD     00377
         L     R15,=V(DATE)       IRSS DATE SUBROUTINE (DATECONV)       00378
         BALR  R14,R15            CONVERT 00YYJJJF TO MM/DD/YY          00379
         ED    TIMERSLT,BADLNGTH  EDIT INTO PAGE HEADER LINE BUFFER     00380
*        SR    R0,R0              SET TO AVOID RESERVING ANY LINES      00381
*        BAL   R2,PAGECHK         PRINT PAGE HEADER                     00382
         RDJFCB (INPUT)           READ INPUT TAPE'S JFCB                00383
         LTR   R15,R15            SEE IF DD STATEMENT THERE             00384
         BNE   NOINPUT            EXIT WITH ERR MSG IF NOT              00385
         MVC   DDVOL,JFCBIN+JFCBVOLS  PUT VOL INTO PAGE HEAD.     -CWB- 00386
         MVC   JFCLTSV,JFCBIN+JFCBLTYP SAVE INPUT TAPE'S LABEL TYPE     00387
         TM    JFCLTSV,X'01'      SEE IF NL OR LTM SPECIFIED            00388
         BO    *+8                IF IT WAS THEN LEAVE IT AS IT IS      00389
         MVI   JFCBIN+JFCBLTYP,X'10' ELSE SET TO BLP                    00390
         MVC   JFCBIN+JFCBFLSQ(2),=H'1' SET FILE SEQ. NO. TO = 1        00391
         OPEN  (INPUT),TYPE=J                                           00392
         TM    INPUT+DCBOFLGS,X'10'                                     00393
         BZ    NOINPUT            TERMINAL ERROR                        00394
         L     R1,GMCTRL+4        LOAD MAXIMUM REQUESTED GETMAIN LENGTH 00395
         S     R1,GMLOCS+4        SUBTRACT LENGTH ACTUALLY GOTTEN       00396
         BZ    SENSLDPT           BIF GOT ALL CORE REQUESTED            00397
         CVD   R1,BADLNGTH        CONVERT DIFERENCE TO PACKED DECIMAL   00398
         UNPK  MORECORE+33(5),BADLNGTH                                  00399
         OI    MORECORE+37,C'0'                                         00400
         LH    R2,INPUT+DCBBLKSI  TO PREVENT DATA 'OVERRUNS'            00401
         SR    R2,R1              SUBTRACT DIFFERENCE OF MORE CORE      00402
         STH   R2,INPUT+DCBBLKSI  AND PUT BACK IN DCB                   00403
         BAL   R2,PUTLINE                                               00404
         MVC   MSGBUF(L'MORECORE),MORECORE                              00405
SENSLDPT LA    R1,=AL3(SENSCMND)  SET UP PTR FOR EXECEXCP CALL          00406
         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL             00407
         BAL   R4,EXECEXCP        CALL EXCP SUBROUTINE                  00408
         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED              00409
         BO    SRCHPRM            BIF LOAD POINT SENSED                 00410
         LA    R1,=AL3(RWNDCMND)  REWIND AND RE-SENSE COMMAND CHAIN     00411
         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL             00412
         BAL   R4,EXECEXCP                                              00413
         TM    SENSBYTS+1,X'08'   SEE IF NOW AT LOAD POINT              00414
         BO    SRCHPRM            BIF AT LOAD POINT                     00415
         BAL   R2,PUTLINE         PRINT ERROR MESSAGE                   00416
         MVC   MSGBUF(66),=C'0UNABLE TO REWIND INPUT TAPE TO LOAD POINT*00417
                - TERMINATING EXECUTION'                                00418
         B     EXITRC8                                                  00419
SRCHPRM  LTR   R8,R8              LOAD AND TEST REMAINING PARM LENGTH   00420
         BNH   ENDPARMS                                                 00421
         SR    R5,R5              ZERO CURRENT PARM LENGTH COUNTER      00422
         LR    R4,R3              SAVE PTR TO START OF PARM             00423
SRCHCOMA CLI   0(R3),C','                                               00424
         LA    R3,1(R3)           BUMP PTR TO NEXT CHAR                 00425
         BE    GOTCOMMA                                                 00426
         LA    5,1(5)             COUNTS LENGTH OF CURRENT PARM         00427
         BCT   R8,SRCHCOMA                                              00428
GOTCOMMA CLC   0(6,R4),=C'NOLIST' GET HERE IF COMMA OR END OF PARM LIST 00429
         BE    NOLIST                                                   00430
         CLC   0(4,4),=C'LIST'                                          00431
         BE    LIST                                                     00432
         CLC   0(5,4),=C'MAXTM'   INITIALLY 32767                       00433
         BE    MAXTM                                                    00434
         CLC   0(6,4),=C'SKIPTM'                                        00435
         BE    SKIPTM                                                   00436
         CLC   0(5,4),=C'NOHEX'                                         00437
         BE    NOHEX                                                    00438
         CLC   0(6,4),=C'MAXEOV'                                        00439
         BE    MAXEOV                                                   00440
         CLC   0(7,4),=C'SKIPEOV'                                       00441
         BE    SKIPEOV                                                  00442
         CLC   0(9,4),=C'NOSUMMARY'                                     00443
         BE    NOSUMARY                                                 00444
         CLC   0(5,4),=C'COUNT'                                         00445
         BE    COUNT                                                    00446
         CLC   0(7,4),=C'NOCOUNT'                                       00447
         BE    NOCOUNT                                                  00448
         CLC   0(6,4),=C'ERRLIM'                                        00449
         BE    ERRLIM                                                   00450
         CLC   0(4,4),=C'COPY'                                          00451
         BE    COPY               TAPE COPYING OPTION                   00452
         CLC   0(6,4),=C'EOVMOD'  MOD OPTION IMPLIES COPY & COUNT OPTNS 00453
         BE    EOVMOD                                                   00454
         CLC   0(8,4),=C'NOVOLSER'                                      00455
         BE    NOVOLSER                                                 00456
         CLC   0(3,4),=C'OPT'                                           00457
         BE    OPT                MISCELLANEOUS OPTIONS                 00458
UNRECOG  BAL   R2,PUTLINE                                               00459
         MVC   MSGBUF(33),=C'0ERROR - UNRECOGNIZABLE PARAMETER'         00460
PRLENERR BAL   2,PUTLINE                                                00461
         MVC   MSGBUF(32),=C'0WARNING - INVALID PARM IGNORED.'          00462
SRCHPARM BCTR  R8,0                                                     00463
         B     SRCHPRM                                                  00464
GETNUM   DS    0H                 CHAR STRNG INTGR TO BIN INTGR CONV SB 00465
         SR    6,6                CLEAR ACCUMULATOR                     00466
         CLI   0(4),C'9'          * R4=PTR TO 1ST CHAR OF NUM         * 00467
         BH    NUMERR             * R5=ACTUAL LENGTH OF NUM           * 00468
         CLI   0(4),C'0'          * RESULT RETURNED IN R6             * 00469
         BL    NUMERR             * R2,R4,R5,R6, AND R7 MODIFIED BY   * 00470
         MH    R6,=H'10'          * USING GETNUM SUBROUTINE.          * 00471
         IC    R7,0(4)            PICK UP DECIMAL CHARACTER             00472
         SLL   7,28               CHOP OFF LEFT 4 BITS                  00473
         SRL   7,28               AND SHIFT BACK                        00474
         AR    6,7                ADD DIGIT INTO RESULT                 00475
         LA    4,1(4)             BUMP PTR TO NEXT CHAR                 00476
         BCT   5,GETNUM+2         GO TO TOP OF LOOP                     00477
         BR    2                  RETURN FROM GETNUM SUBROUTINE         00478
NUMERR   BAL   R2,PUTLINE         ERROR DESCRIPTOR SUBROUTINE           00479
         MVC   MSGBUF(50),=C'0ERROR - PARAMETER HAS INVALID NUMERICAL C*00480
               OMPONENT'                                                00481
         B     PRLENERR                                                 00482
NOCOUNT  CH    R5,=H'7'                                                 00483
         BNE   PRLENERR           *** WARNING *** MODIFIED IN COPY/MOD *00484
                                                  OPTION ROUTINES.      00485
         MVI   COUNTFLG,C'N'                                            00486
         B     SRCHPARM                                                 00487
COUNT    CH    R5,=H'5'           FINAL PROCESSING OF COUNT OPTION      00488
         BNE   UNRECOG                                                  00489
         MVI   COUNTFLG,C'Y'                                            00490
         B     SRCHPARM                                                 00491
NOVOLSER CH    R5,=H'8'                                                 00492
         BNE   UNRECOG                                                  00493
         MVI   SVOUTFLG,C'Y'      SET 'NOVOLSER SPECIFIED' FLAG         00494
*        TM    JFCLTSV,X'31'      SEE IF INPUT HAD LABEL TYPE OF N-CWB- 00495
*        BNZ   SRCHPARM           BLP, OR LTM, AND BIF SO.        -CWB- 00496
         OI    WRTFLG,X'04'       OR IN 'DO NOT COPY INPUT VOL LABEL'   00497
         B     COPY+8             NOVOLSER IMPLIES COPY.          -CWB- 00498
COPY     CH    R5,=H'4'                                                 00499
         BNE   UNRECOG                                                  00500
         OI    COPYFLG,X'01'      INDICATE COPY OPTION SPECIFIED        00501
         OI    WRTFLG,X'01'       INDICATE COPY   REQUESTED (THAT BIT)  00502
         OI    NOCOUNT+5,X'F0'    NOP OUT NOCOUNT & SET FOR WARN MSG    00503
         B     COUNT+8            COPY OPTION INVOKES COUNT AUTOMATICLY 00504
EOVMOD   CH    R5,=H'6'           ADD DATASETS ONTO EOV                 00505
         BNE   UNRECOG                                                  00506
         OI    COPYFLG,X'03'      BITS = 'COPY OPT + MOD OPT REQUESTED' 00507
         B     NOVOLSER+8          MOD IMPLIES NOVOLSER OPTION.   -CWB- 00508
OPT      CH    R5,=H'3'                                                 00509
         BNH   PRLENERR                                                 00510
         LA    R4,4(R4)                                                 00511
         SH    R5,=H'4'                                                 00512
         BAL   R2,GETNUM                                                00513
         ST    R6,OPTNO                                                 00514
         B     SRCHPARM                                                 00515
ERRLIM   CH    R5,=H'5'           CHANGE SYNAD ERROR COUNT LIMIT        00516
         BNH   PRLENERR                                                 00517
         LA    R4,6(R4)                                                 00518
         SH    R5,=H'6'                                                 00519
         BAL   R2,GETNUM                                                00520
         ST    R6,SYNADNO                                               00521
         B     SRCHPARM                                                 00522
NOLIST   CH    R5,=H'6'           FINAL PROCESSING OF NOLIST PARM       00523
         BNE   UNRECOG                                                  00524
         SR    R0,R0                                                    00525
         ST    R0,LISTNO                                                00526
         B     SRCHPARM                                                 00527
LIST     CH    R5,=H'4'                                                 00528
         BNH   PRLENERR                                                 00529
         LA    R4,4(R4)                                                 00530
         SH    R5,=H'4'           GET ACTUAL LENGTH OF PRESUMED NUMBER  00531
         BAL   R2,GETNUM          GET PRESUMED NUMBER INTO BINARY FORM  00532
         ST    R6,LISTNO          STORE NONNEGATIVE BINARY INTEGER      00533
         B     SRCHPARM                                                 00534
NOHEX    CH    R5,=H'5'                                                 00535
         BNE   UNRECOG                                                  00536
         MVI   HEXFLG,C'N'                                              00537
         B     SRCHPARM                                                 00538
NOSUMARY CH    R5,=H'9'                                                 00539
         BNE   UNRECOG                                                  00540
         MVI   SUMFLG,C'N'        SET SUMMARY FLAG TO 'NOSUMMARY'       00541
         LA    R0,1               READ MINIMUM OF 1 BLK AFTER A TAPEMRK 00542
         ST    R0,READNO          SET # OF BLKS TO READ FOR SUMMARY=0   00543
         B     SRCHPARM                                                 00544
SKIPTM   CH    R5,=H'6'                                                 00545
         BNH   PRLENERR                                                 00546
         LA    R4,6(R4)                                                 00547
         SH    R5,=H'6'                                                 00548
         BAL   R2,GETNUM                                                00549
         ST    R6,SKIPTMNO                                              00550
         B     SRCHPARM                                                 00551
MAXTM    CH    R5,=H'5'                                                 00552
         BNH   PRLENERR                                                 00553
         LA    R4,5(4)                                                  00554
         SH    R5,=H'5'                                                 00555
         BAL   R2,GETNUM                                                00556
         LTR   R6,R6              MAKE SURE MAXTM IS NOT =0             00557
         BZ    NUMERR             ERROR - INVALID NUMERICAL PARM        00558
         ST    R6,MAXTMNO                                               00559
         B     SRCHPARM                                                 00560
SKIPEOV  CH    R5,=H'7'                                                 00561
         BNH   PRLENERR                                                 00562
         LA    R4,7(R4)                                                 00563
         SH    R5,=H'7'                                                 00564
         BAL   R2,GETNUM                                                00565
         ST    R6,SKPEOVNO                                              00566
         B     SRCHPARM                                                 00567
MAXEOV   CH    R5,=H'6'           CHECK LENGTH OF PARM                  00568
         BNH   PRLENERR           LENGTH MUST BE GREATER THAN 6         00569
         LA    R4,6(R4)           BUMP PTR TO START OF PARM'S NUMBER    00570
         SH    R5,=H'6'           GET ACTUAL LENGTH OF PRESUMED NUMBER  00571
         BAL   R2,GETNUM          CONVERT NUMBER FOLLOWING 'MAXEOV' PRM 00572
         LTR   R6,R6              MAKE SURE MAXEOV IS NOT=0             00573
         BZ    NUMERR             INVALID NUMERICAL COMPONENT           00574
         ST    R6,MAXEOVNO        STORE RESULT                          00575
         B     SRCHPARM                                                 00576
ENDPARMS DS    0H                                                       00577
         CLC   SKPEOVNO,MAXEOVNO  PARM VALIDITY CHECKING                00578
         BL    *+26               SKIP IF NO ERROR                      00579
         BAL   R2,PUTLINE                                               00580
         MVC   MSGBUF(48),=C'0SKIPEOV PARM GE MAXEOV; SKIPEOV SET TO MA*00581
               XEOV-1'                                                  00582
         L     R2,MAXEOVNO                                              00583
         SH    R2,=H'1'                                                 00584
         ST    R2,SKPEOVNO        STORE IT SET TO MAXEOV-1              00585
         CLC   SKIPTMNO,MAXTMNO                                         00586
         BL    *+26               SKIP IF SKIPTMNO & MAXTMNO CONSISTENT 00587
         BAL   R2,PUTLINE         PRINT ERROR MESSAGE                   00588
         MVC   MSGBUF(44),=C'0SKIPTM PARM GE MAXTM; SKIPTM SET TO MAXTM*00589
               -1'                                                      00590
         L     R2,MAXTMNO         MAXIMUM ON TAPEMARKS TO BE READ       00591
         SH    R2,=H'1'                                                 00592
         ST    R2,SKIPTMNO        STORE AS MAXTM-1                      00593
         TM    COPYFLG,X'01'      SEE IF COPY AND/OR MOD SPECIFIED      00594
         BZ    NOTBOTH            BIF COPY OPTION NOT SPECIFIED         00595
         RDJFCB (OUTPUT)          ELSE PROCESS COPY AND/OR MOD OPTIONS  00596
         LTR   R15,R15            SEE IF RDJFCB WENT ALLRIGHT           00597
         BNE   NOOUTPUT           'MISSING OR INVALID DD' ERROR MSG     00598
         MVC   POSMSG+22(6),JFCBOUT+JFCBVOLS  PUT VOL IN MSG.     -CWB- 00599
         MVC   OUTLTYP,JFCBOUT+JFCBLTYP SAVE LABEL TYPE FOR OUTPUT TAPE 00600
         TM    OUTLTYP,X'01'      SEE IF LABEL IS NL OR LTM             00601
         BO    *+8                BIF YES - IT IS NL OR LTM             00602
         MVI   JFCBOUT+JFCBLTYP,X'10' ELSE SET TO BLP                   00603
*COMMENT OI    JFCBOUT+JFCBTSDM,X'08' INHIBIT WRITING BACK OF JFCB      00604
         LA    R0,1                                                     00605
         LH    R2,JOUTFLSQ        SAVE ORIGINAL FILE SEQ. NO.           00606
         LTR   R2,R2              BUT IF IT'S                           00607
         BNZ   *+6                EQUAL TO ZERO THEN                    00608
         LR    R2,R0              SET IT TO = 1.                        00609
         STH   R0,JOUTFLSQ        TEMPORARILY SET FLSQ IN JFCB TO = 1   00610
         OPEN  (OUTPUT,OUTPUT),TYPE=J                                   00611
         TM    OUTPUT+DCBOFLGS,X'10' CHECK IF OPENED SUCCESSFULLY       00612
         BZ    NOOUTPUT                                                 00613
         LA    R1,EXCPIOBP        POINT TO IOB BSAM-TYPE PREFIX.  -CWB- 00614
         IC    R0,OUTPUT+DCBIOBA  CHANGE DCB POINTER FROM EXCP-   -CWB- 00615
         ST    R1,OUTPUT+DCBIOBA       TYPE TO BSAM-TYPE POINTER  -CWB- 00616
         STC   R0,OUTPUT+DCBIOBA       FOR "EXECEXCP" CONSISTANCY.-CWB- 00617
         STH   R2,JOUTFLSQ        RESTORE ORIGINAL FLSQ IN JFCB         00618
         TM    OUTLTYP,X'42'      SEE IF AL, AUL, SL, OR SUL            00619
         BZ    COPYOUT            BIF NOT ONE OF ABOVE                  00620
         LA    R1,=AL3(READCMND)  USE EXCP TO READ PRESUMED VOL   -CWB- 00621
         LA    R2,OUTPUT               LABEL (CHANGED FROM BSAM   -CWB- 00622
         BAL   R4,EXECEXCP             READING).                  -CWB- 00623
         LH    R7,READLENG        GET LENGTH OF READ COMMAND.     -CWB- 00624
         LH    R6,RESIDL          GET RESIDUAL LENGTH AFTER READ. -CWB- 00625
         SR    R7,R6                                                    00626
         BNH   BADREC             VERY BAD IF RECORD LENGTH LT 1        00627
         TM    OUTLTYP,X'02'      SEE IF SL OR SUL, OR AL OR AUL        00628
         BO    COPYSL             BIF SL OR SUL                         00629
*COPYAL  CLC   RECBUF(4),=X'B6AFAC51'  SEE IF ANSI 'VOL1'               00630
         BNE   BADOUTVL           AL OR AUL IN JCL, BUT LABEL NOT ANSI  00631
         C     R7,=F'80'                                                00632
         BL    BADOUTVL                                                 00633
         B     REWINDCK                                                 00634
COPYSL   C     R7,=F'80'          SEE IF PRESUMED IBM SL IS 80 BYTES    00635
         BNE   BADOUTVL           BIF PRESUMED IBM LABEL NOT 80 BYTES   00636
         CLC   RECBUF(4),=C'VOL1'                                       00637
         BNE   BADOUTVL                                                 00638
         CLC   JFCBOUT+JFCBVOLS(6),RECBUF+4 COMPARE VOL SERS            00639
         BNE   BADOUTVL                                                 00640
REWINDCK CLC   JOUTFLSQ(2),=H'1'  DO NOT REWIND IF FILE SEQ. NO. GT 1   00641
         BH    COPYOUT            DO NOT REWIND IF FILE SEQ. NO. GT 1   00642
         TM    COPYFLG,X'02'      DO NOT REWIND IF EOVMOD SPECIFIED     00643
         BO    COPYOUT            DO NOT REWIND IF EOVMOD SPECIFIED     00644
         CLI   SVOUTFLG,C'Y'      DO NOT REWIND IF NOVOLSER SPECIFIED   00645
         BE    COPYOUT            DO NOT REWIND IF NOVOLSER SPECIFIED   00646
         LA    R1,=AL3(RWNDCMND)  REWIND COMMAND CHAINED TO SENSE CMND  00647
         LA    R2,OUTPUT          OUTPUT DCB                            00648
         BAL   R4,EXECEXCP        REWIND AND SENSE                      00649
         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED              00650
         BO    COPYOUT            BIF SENSED LOADPOINT                  00651
         BAL   R2,PUTLINE                                               00652
         MVC   MSGBUF(67),=C'0UNABLE TO REWIND OUTPUT TAPE TO LOAD POIN*00653
               T - TERMINATING EXECUTION'                               00654
         B     EXITRC8                                                  00655
BADOUTVL BAL   R2,PUTLINE                                               00656
         MVC   MSGBUF(32),=C'0OUTPUT VOLUME LABEL IS INVALID:'          00657
         LR    R3,R12             PROVIDE PROPER ADDRESSABILITY.        00658
         L     R12,=A(EXIT+4096)                                        00659
         DROP  R12                                                      00660
         USING TAPESCAN,R3                                              00661
         BAL   R5,LISTON                                                00662
         B     EXITRC8                                                  00663
         LR    R12,R3             RESTORE ADDRESSABILITY.               00664
         DROP  R3                                                       00665
         USING TAPESCAN,R12                                             00666
COPYOUT  DS    0H                 IF NECESS., MOD PROCESSING DONE HERE  00667
         LA    R0,EODADOUT        ADDRESS OF NEW OUTPUT TAPE EODAD RTN  00668
         ST    R0,OUTPUT+DCBEODAD AND SET IT UP IN DCB.                 00669
FILELOOP TM    COPYFLG,X'02'      SEE IF MOD SPECIFIED                  00670
         BO    FILEFSM            IF SO THEN DO SRCH FWRD FOR TPMK      00671
         CLC   COUTFILE,JOUTFLSQ  ARE WE IN RIGHT FILE YET?             00672
         BNL   FILEMSG            BIF YES                               00673
FILEFSM  LA    R1,=AL3(FSMCMND)   FWRD SPACE JUST PAST NEXT TAPEMARK    00674
         LA    R2,OUTPUT                                                00675
         BAL   R4,EXECEXCP                                              00676
         LA    R0,1               MAINTAIN                              00677
         AH    R0,COUTFILE        CURRENT FILE                          00678
         STH   R0,COUTFILE        NUMBER.                               00679
         CH    R0,JOUTFLSQ        BIF NOT YET UP TO SPECIFIED FILE      00680
         BL    *+12               BIF NOT YET UP TO SPECIFIED FILE      00681
         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED               00682
         BZ    FILEMSG            BIF   EOVMOD NOT SPECIFIED            00683
         LA    R1,=AL3(READCMND)  PREPARE TO READ WHAT IMMEDIATELY-CWB- 00684
         LA    R2,OUTPUT               FOLLOWS THE TAPE MARK.     -CWB- 00685
         BAL   R4,EXECEXCP        (CHANGED TO EXCP FROM BSAM.)    -CWB- 00686
         B     FILELOOP           ELSE IT'S A BLOCK, SO JUST GO ON      00687
FILEPOS  DS    0H                 BACKSPACE PAST 2ND TAPEMARK OF EOV    00688
         LA    R2,OUTPUT          PTR TO OUTPUT TAPE'S DCB              00689
         LA    R1,=AL3(BSFCMND)   BACKSPACE PAST ONE TAPEMARK           00690
         BAL   R4,EXECEXCP                                              00691
         LH    R0,COUTFILE        AND                                   00692
         BCTR  R0,0               REDUCE CURRENT FILE NO. APPROPRIATELY 00693
         STH   R0,COUTFILE                                              00694
FILEMSG  DS    0H                 PRINT INITIAL OUTPUT POSITION MSG     00695
         LH    R1,COUTFILE                                              00696
         CVD   R1,BADLNGTH                                              00697
         OI    BADLNGTH+7,X'0F'                                         00698
         UNPK  POSMSG+32(4),BADLNGTH TELL WHERE 1ST FILE OUTPUT GO-CWB- 00699
         MVC   POSMSG+47(4),POSMSG+32 MOVE INTO EXPLANATORY COMMEN-CWB- 00700
         BAL   R2,PUTLINE                                               00701
         MVC   MSGBUF(L'POSMSG),POSMSG                                  00702
         B     NOTBOTH                                                  00703
EODADOUT LA    R0,1               COUNT                                 00704
         AH    R0,COUTFILE        THIS                                  00705
         STH   R0,COUTFILE        TAPEMARK (THE 2ND ONE OF AN EOV).     00706
         CH    R0,JOUTFLSQ        SEE IF UP TO SPECIFIED TAPEMARK       00707
         BL    TOPT456            BIF NOT UP TO SPECIFIED TAPEMARK      00708
         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED               00709
         BO    FILEPOS            BIF EOVMOD SPECIFIED                  00710
         TM    OPTNO,X'10'        SEE IF 'IGNORE EOV'S UNTIL FLSQ SATIS 00711
         BO    FILEPOS            BIF IT IS SPECIFIED                   00712
         B     BADEOV             GIVE 'EM HELL, HARRY!                 00713
TOPT456  TM    OPTNO,X'10'        TEST FOR OPT268435456                 00714
         BO    FILELOOP           AND IF SPECIFIED IGNORE DOUBLE TPMK   00715
BADEOV   BAL   R2,PUTLINE                                               00716
         MVC   MSGBUF(83),=C'0ERROR - EOV INDICATION ENCOUNTERED BEFORE*00717
                OUTPUT TAPE FINISHED INITIAL POSITIONING'               00718
         B     EXITRC8                                                  00719
EODADBAD BAL   R2,PUTLINE                                               00720
         MVC   MSGBUF(092),=C'0ERROR - OUTPUT TAPE HAD TAPEMARK FOLLOWI*00721
               NG LOAD POINT, BUT NEITHER LTM OR BLP WAS SPECIFIED'     00722
*                                 (LENGTH FIELD CORRECTED.)       -CWB- 00723
         B     EXITRC8                                                  00724
NOTBOTH  DS    0H                                                       00725
         L     R12,=A(EXIT+4096)  LOAD 2ND BASE REG FOR MAIN CODE       00726
         DROP  R12                DROP R12 FOR COMMON STUFF, ONLY R11   00727
         B     SKIPEOVP           INITIALIZATION ENDS HERE              00728
         USING TAPESCAN,R12                                             00729
NOOUTPUT MVC   BADINPUT+1(6),=C'OUTPUT'                                 00730
NOINPUT  BAL   R2,PUTLINE         BAD OR MISSING DD ROUTINE             00731
         MVC   MSGBUF(L'BADINPUT),BADINPUT                              00732
         B     EXITRC8                                                  00733
         DROP  R12                                                      00734
BSFCMND  CCW   X'2F',0,X'70',1    BSF, CC,SLI,SKIP                      00735
         CCW   X'04',SENSBYTS,X'20',24 SENSE SLI UP TO 24 BYTES         00736
READ81CM CCW   2,0,X'60',81       SET TO POINT TO RECBUF DYNAMICALLY    00737
         CCW   4,SENSBYTS,X'20',24 AND SENSE FOR DEBUG                  00738
JFCBOUT  DS    22D                                                      00739
JOUTFLSQ EQU   JFCBOUT+JFCBFLSQ                                         00740
EXLSTOUT DC    0F'0',X'87',AL3(JFCBOUT)                                 00741
GMCTRL   DC    A(RECBUF+136-TRT1)  MINIMUM LENGTH FOR THE GETMAIN       00742
         DC    A(RECBUF-TRT1+32768) MAXIMUM LENGTH FOR THE GETMAIN      00743
GMLOCS   DC    2F'0'                                                    00744
EXITLIST DS    0F                 INPUT DCB EXIT LIST FOR RDJFCB        00745
         DC    X'87'              LAST ENTRY AND RDJFCB                 00746
         DC    AL3(JFCBIN)        BUFFER FOR INPUT TAPE'S JFCB          00747
BADINPUT DC    C'0INPUT  DD STATEMENT MISSING OR INVALID'               00748
POSMSG   DC    C'0FIRST OUTPUT FILE ON VVVVVV IS 0000 -- LABEL=(0000,BL*00749
               P)'                                                -CWB- 00750
MORECORE DC    C'0WARNING:  TAPESCAN SHOULD HAVE 00000 MORE BYTES OF CO*00751
               RE FOR RELIABLE OPERATION; PROCESSING WILL BE ATTEMPTED *00752
               ANYWAY.'                                                 00753
CTABLE   DC    C'0123456789ABCDEF'                                      00754
SVOUTFLG DC    C'N'               C'Y' = 'SAVE OUTPUT VOL LABEL '       00755
VERIFLG  DC    C'N'                                                     00756
OUTLTYP  DC    C'0'               FOR SAVING OUTPUT TAPE'S LABEL TYPE   00757
COPYFLG  DC    X'00'              COPY AND MOD OPTION REQUEST BITS      00758
         LTORG                                                          00759
* COMMON ROUTINES FOR BOTH INITIALIZATION AND MAIN ARE HERE.            00760
EXIT     MVI   RCINSTR+3,X'00'    NORMAL END, SET RET CODE = 0          00761
EXITRC8  DS    0H                                                 -CWB- 00762
         TM    OUTPUT+DCBOFLGS,X'10'  IS OUTPUT DCB OPEN?         -CWB- 00763
         BZ    CLOSEIN            IF NOT, SKIP CLOSE.             -CWB- 00764
         LA    R1,EXCPIOB         RESTORE IOB POINTER IN DCB      -CWB- 00765
         IC    R0,OUTPUT+DCBIOBA       TO POINT TO TRUE IOB, NOT  -CWB- 00766
         ST    R1,OUTPUT+DCBIOBA       BSAM-TYPE IOB PREFIX.      -CWB- 00767
         STC   R0,OUTPUT+DCBIOBA                                  -CWB- 00768
         NI    OUTPUT+DCBOFLGS,X'7F'   PRETEND LAST I/O WAS A     -CWB- 00769
         OI    OUTPUT+DCBOFLGS,X'04'   READ TO AVOID WRITING A    -CWB- 00770
*                                      TAPE MARK.                 -CWB- 00771
         CLOSE  OUTPUT            CLOSE OUTPUT TAPE.              -CWB- 00772
CLOSEIN  TM    INPUT+DCBOFLGS,X'10'  IS INPUT TAPE OPEN?          -CWB- 00773
         BZ    NOTOPEN            PROGRAM DIDN'T GET VERY FAR,    -CWB- 00774
*                                      DID IT.                    -CWB- 00775
         CLOSE INPUT              CLOSE INPUT TAPE.               -CWB- 00776
NOTOPEN  DS    0H                                                 -CWB- 00777
         L     R13,SAVE+4         MAY BYPASS UNRELEASED SYNAD AREA      00778
         LM    14,12,12(13)                                             00779
RCINSTR  LA    15,8                                                     00780
         BR    R14                FINAL EXIT FROM TAPESCAN IN ALL CASES 00781
PUTLINE  DS    0H                 GENERAL PRINTING SUBROUTINE, ENTRY 1  00782
         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER FAST                     00783
PUTLINE2 EX    0,0(R2)            GENERAL PRINTING SUBROUTINE, ENTRY 2  00784
PUTLINE3 CLI   MSGBUF,C' '        GENERAL PRINTING SUBROUTINE, ENTRY 3  00785
         BE    LNCOUNT-4          BIF CARR. CTRL  CHAR IS A BLANK       00786
         CLI   MSGBUF,C'0'        SEE IF CARRIAGE CONTROL CHAR IS ZERO  00787
         BE    C0                 BIF IS A ZERO                         00788
         LA    R0,3               NO BLANK OR ZERO, MUST BE A MINUS     00789
         B     LNCOUNT                                                  00790
C0       LA    R0,2               COUNT TWO LINES                       00791
         B     LNCOUNT                                                  00792
         LA    R0,1               COUNT ONE LINE                        00793
LNCOUNT  A     R0,LINENO                                                00794
         ST    R0,LINENO                                                00795
         C     R0,=F'60'           SEC MOD                              00796
         BNH   SAMEPAGE                                                 00797
         MVC   PAGECHAR,=X'40202120' EDIT PATTERN                       00798
         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB- 00799
         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB- 00800
         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB- 00801
         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB- 00802
         ED    PAGECHAR,DBLPAGE+6                                 -CWB- 00803
         MVI   LINENO+3,X'00'                                           00804
         PUT   SYSPRINT,PAGEHDR                                         00805
SAMEPAGE PUT   SYSPRINT,MSGBUF                                          00806
         B     6(R2)              RETURN FROM PUTLINE SUBROUTINE        00807
PAGECHK  DS    0H                 LINE RESERVATION SUBROUTINE           00808
         A     R0,LINENO          ADD LINES TO BE RESERVED TO LINE NO   00809
         C     R0,=F'79'          COMPARE TO MAXIMUM LINE  NUMBER -CWB- 00810
         BCR   13,R2              RETURN IF CURRENT PAGE HAS ENUF ROOM  00811
         MVI   LINENO+3,0         ZERO LINE COUNTER                     00812
*        AP    PAGEPACK,=P'1'     COUNT NEW PAGE                  -CWB- 00813
         MVC   PAGECHAR,=X'40202120'                                    00814
*        ED    PAGECHAR,PAGEPACK                                  -CWB- 00815
         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB- 00816
         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB- 00817
         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB- 00818
         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB- 00819
         ED    PAGECHAR,DBLPAGE+6                                 -CWB- 00820
         PUT   SYSPRINT,PAGEHDR                                         00821
         BR    R2                                                       00822
*BADREC  WTL   'BAD (0) BLOCK SIZE' (OFTEN MEANS TAPE OFF END OF REEL)  00823
BADREC   DS    0H                                               -CWB-   00824
         BAL   R2,PUTLINE                                               00825
         MVC   MSGBUF(L'BADRECM),BADRECM                                00826
         B     EXITRC8                                                  00827
SYNERR   SYNADAF ACSMETH=BSAM                                           00828
SYNERR2  ST    R14,SVR14                                                00829
         CH    R0,=H'4'           CHECK SYNADAF'S RETURN CODE           00830
         BNE   DIRECT                                                   00831
         LH    R14,12(R1)         LOAD NO. OF BYTES READ                00832
         CVD   R14,BADLNGTH                                             00833
         OI    BADLNGTH+7,X'0F'                                         00834
         UNPK  32(5,R1),BADLNGTH                                        00835
         MVC   8(24,R1),=C'0I/O ERROR - BYTES READ='                    00836
DIRECT   BAL   R2,PUTLINE         PRINT SYNAD ERROR MESSAGE             00837
         MVC   MSGBUF(120),8(R1)                                        00838
         LA    R14,1                                                    00839
         A     R14,ERRCOUNT       INCREMENT ERROR COUNT                 00840
         ST    R14,ERRCOUNT                                             00841
         C     R14,SYNADNO        COMPARE ERROR COUNT WITH ERROR LIMIT  00842
         BH    TOOMANY            PRINT MSG & EXIT IF ERR LIM EXCEEDED  00843
         SYNADRLS                                                       00844
         L     R14,SVR14                                                00845
         BR    R14                                                      00846
TOOMANY  BAL   R2,PUTLINE         YOU SHOULD PROBABLY SET ERRLIM TO 0 - 00847
         MVC   MSGBUF(55),=C'0TAPESCAN TERMINATING DUE TO EXCESSIVE I/O*00848
                ERROR COUNT.'                                           00849
         B     EXITRC8            FOR TAPE COPYING OPERATIONS.          00850
EXECEXCP DS    0H                 EXCP SUBROUTINE, R2=PTR TO DCB, AND  *00851
                                  R1=PTR TO 3-BYTE ADCON WHICH POINTS  *00852
                                  TO CHANNEL PROGRAM.                   00853
         ST    R2,EXCPDCB         SAVE DCB POINTER.               -CWB- 00854
         L     R2,DCBIOBA(R2)     GET PTR TO A BSAM IOB PREFIX          00855
         MVC   STARTSAV(3),IOBSTART+9(R2) SAVE PTR TO BSAM'S CCW        00856
         MVC   IOBSTART+9(3,R2),0(R1) MOVE IN PTR TO CHAN PROG          00857
         LA    R1,4(R2)           LOAD PTR TO ECB IN PREFIX             00858
         ST    R1,IOBECBPT+8(R2)  STORE PTR TO ECB                      00859
         XC    0(4,R1),0(R1)      CLEAR ECB IN IOB PREFIX               00860
         EXCP  8(R2)              EXCP USING BSAM'S IOB AND ECB         00861
         WAIT  ECB=4(R2)                                                00862
         L     R1,IOBSTART+8(R2)  RESTORE CCW POINTER.            -CWB- 00863
         MVC   IOBSTART+9(3,R2),STARTSAV RESTORE PTR TO BSAM'S CCW      00864
         CLI   4(R2),X'7F'        SEE IF EXCP WORKED PERFECTLY          00865
         BCR   8,R4               RETURN IF IT DID                      00866
         CLI   4(R2),X'41'        DID PERMANENT ERROR OCCUR?      -CWB- 00867
         BNE   DOSYN              OTHER ERRORS BRANCH.            -CWB- 00868
         CLI   0(R1),X'02'        WAS COMMAND CODE A READ?        -CWB- 00869
         BNE   DOSYN              IF NOT, DO ERROR.               -CWB- 00870
         LH    R1,6(R1)           GET COMMAND LENGTH.             -CWB- 00871
         CH    R1,22(R2)          IS RESIDUAL LENGTH THE SAME?    -CWB- 00872
         BNE   DOSYN              IF NOT, BRANCH FOR ERROR.       -CWB- 00873
         L     R1,EXCPDCB         ELSE, MUST BE TAPE MARK READ.   -CWB- 00874
         L     R1,DCBEODAD(R1)    GO TO EODAD ROUTINE.            -CWB- 00875
         BR    R1                                                 -CWB- 00876
DOSYN    DS    0H                                                 -CWB- 00877
         LA    R1,8(R2)           GET PTR TO IOB FOR SYNADAF MACRO      00878
         SYNADAF ACSMETH=EXCP     WORKS OK EVEN THO IOBSTART RESTORED   00879
         BAL   R14,SYNERR2        NOW DO REST OF ANALYSIS WITH SYNERR   00880
         BR    R4                                                       00881
SAVE     DS    9D                                                       00882
JFCBIN   DS    22D                176 BYTES                             00883
BADLNGTH DC    D'0'                                                     00884
DBLPAGE  DC    D'0'               CVD WORK AREA FOR PAGE NUMBER.  -CWB- 00885
FSMCMND  CCW   X'3F',0,X'30',1    FWRD SPACE FILE, SKIP/SLI             00886
RWNDCMND CCW   7,0,X'60',1        REWIND TAPE, CHAIN CMND, SLI          00887
SENSCMND CCW   4,SENSBYTS,X'20',24 SENSE UP TO 24 BYTES, SLI            00888
READCMND CCW   X'02',0,X'20',32760  READ COMMAND.                 *MVS* 00889
READLENG EQU   READCMND+6           READ LENGTH FIELD.            -CWB- 00890
WRTCMND  CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GM. -CWB- 00891
WTMCMND  CCW   X'1F',0,X'60',1    WRITE TM, SLI, CC TO SENSE.     -CWB- 00892
         CCW   X'04',SENSBYTS,X'20',1  SENSE CHAINED FOR DEV END. -CWB- 00893
*                                 ABOVE FIELDS MOVED HERE FROM    -CWB- 00894
*                                      LATTER PART OF PROGRAM TO  -CWB- 00895
*                                      CORRECT ADDRESSABILITY.    -CWB- 00896
SENSBYTS DC    3CL8'SENSBYTS'     BUFFER FOR SENSE BYTES                00897
AMSGBP46 DC    A(0)               A(MSGBUF+46) SET UP DURING INIT -CWB- 00898
AMSGBP72 DC    A(0)               A(MSGBUF+72) AS ABOVE.          -CWB- 00899
ERRCOUNT DC    F'0'               NUMBER OF SYNAD EXITS TAKEN (I/O ERRS 00900
OPTNO    DC    F'0'               BIT ORIENTED OPTIONS - MISC/DEBUG     00901
LINENO   DC    F'90'                                              -CWB- 00902
LISTNO   DC    F'4'               NUMBER OF BLKS TO LIST PER DATASET    00903
SKIPTMNO DC    F'0'                                                     00904
MAXTMNO  DC    F'32767'                                                 00905
SKPEOVNO DC    F'0'                                                     00906
MAXEOVNO DC    F'1'                                                     00907
SYNADNO  DC    F'50'              MAX SYNAD EXITS BEFORE TERMINATION    00908
READNO   DC    F'3'               SET TO ONE  FOR NOSUMMARY OPTION      00909
PAGECNT  DC    F'0'               PAGE COUNTER.                   -CWB- 00910
SVR14    DC    F'0'                                               -CWB- 00911
COUTFILE DC    H'1'               CURRENT OUTPUT FILE SEQ. NO.          00912
*PAGEPACK DC   PL2'0'             (REPL'D BY PAGECNT)             -CWB- 00913
BADRECM  DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED'                       00914
ERRSUMSG DC    C'0NUMBER OF I/O ERRORS=XXXXX'                           00915
PAGEHDR  DC    CL60'1TAPESCAN 3.4  -  GSFC TAPE ANALYSIS AND COPYING PR*00916
               OGRAM    '                                   -CWB-       00917
DATERSLT DC    CL8'MM/DD/YY'      DATE WILL BE PLACED HERE              00918
         DC    CL2'  '                                                  00919
TIMERSLT DC    XL11'4021207A20207A20204B20'                             00920
         DC    C'   INPUT VOL='                                   -CWB- 00921
DDVOL    DC    CL6'VVVVVV'                                        -CWB- 00922
         DC    CL22'   (LAST MOD-12/08/76)'                       -CWB- 00923
         DC    CL7'   PAGE'                                             00924
PAGECHAR DC    X'40202120'        EXAMPLE EDIT PATTERN FOR PAGE NUMBER  00925
         DC    CL12'           '  PAGE TRAILING BLANKS                  00926
JFCLTSV  DC    X'FF'              FOR SAVING JFCBLTYP BYTE              00927
EXCPIOBP DC    0D'0',A(*)         IOB BSAM-TYPE PREFIX.           -CWB- 00928
EXCPECB  DC    F'0'                                               -CWB- 00929
EXCPIOB  DC    B'01000010',XL3'0',A(EXCPECB,0),H'0'  IOB PROPER.  -CWB- 00930
RESIDL   DC    H'0'               RESIDUAL COUNT.                 -CWB- 00931
EXCPCCW  DC    A(0)               ADDRESS OF CHANNEL PROGRAM.     -CWB- 00932
         DC    A(OUTPUT,0,0)                                      -CWB- 00933
EXCPDCB  DC    A(0)               DCB ADDRESS SAVE AREA.          -CWB- 00934
STARTSAV DC    C'SAV'             FOR SAVING BSAM'S IOBSTART FIELD      00935
WRTFLG   DC    X'00'              TWO BIT COPY FLAG, X'03'=WRITE BLOCK  00936
COUNTFLG DC    C'Y'               COUNT OPTION DEFAULT VALUE            00937
HEXFLG   DC    C'Y'                                                     00938
SUMFLG   DC    C'Y'                                                     00939
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,            *00940
               BLKSIZE=3458,LRECL=133                                   00941
INPUT    DCB   DDNAME=INPUT,MACRF=RC,DSORG=PS,RECFM=U,DEVD=TA,         *00942
               BLKSIZE=32760,EODAD=EODS,SYNAD=SYNERR,EXLST=EXITLIST VS* 00943
OUTPUT   DCB   DDNAME=OUTPUT,MACRF=(E),EODAD=EODADBAD,DSORG=PS,   -CWB-*00944
               IOBAD=EXCPIOB,DEVD=TA,EXLST=EXLSTOUT               -CWB- 00945
         LTORG                                                          00946
* MAIN LOOP AND MAIN LINE CODE STARTS HERE                              00947
SKIPEOVP DS    0H                 SKIPEOV OPTION CONTROL ROUTINE        00948
         USING EXIT+4096,R12                                            00949
         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB- 00950
*                                      BLOCK ENTRY.               -CWB- 00951
         CLC   CEOVNO,SKPEOVNO                                          00952
         BNL   SKIPTMPR                                                 00953
         SR    R4,R4              ZERO TO GET GOOD BLK CNT EVEN IF     *00954
                                  SKIPTM OR SKIPEOV USED.               00955
         SR    R8,R8              (RE)-ZERO BYTE COUNTER                00956
         ST    R8,BLKCNT          (RE)-ZERO BLKCNT                      00957
         BAL   R5,READER          CHECK FOR DOUBLE TAPEMARK             00958
         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)   00959
         BNE   CONTROL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *00960
                                                    LABEL).             00961
         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *00962
                                  TAPEMARK OR THE LOAD POINT.           00963
         BNE   CONTROL            BIF IT ISN'T THE FIRST                00964
         CLC   RECBUF(4),=C'EOV1'                                       00965
         BNE   CONTROL                                                  00966
         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'       00967
         B     CONTROL            POSITION PAST TAPEMARK AND GOTO EODS  00968
SKIPTMPR CLC   CTPMKNO,SKIPTMNO   SKIPTM OPTION CONTROL ROUTINE         00969
         BL    SKIPEOVP+12                                              00970
         SR    R8,R8              CLEAR CTR FOR TOTAL BYTES ON TAPE     00971
         ST    R8,BLKCNT          (RE)-ZERO BLKCNT                      00972
         OI    WRTFLG,X'02'       OR IN  'ALL TM & EOV SKIPPING DONE'   00973
         L     R1,CTPMKNO         GET TAPEMARK COUNT.             -CWB- 00974
         SR    R0,R0              CALCULATE NUMBER OF SL FILES    -CWB- 00975
         D     R0,=F'3'                WE HAVE SKIPPED.           -CWB- 00976
         ST    R1,TRUESEQN        SAVE AS LABEL= VALUE.           -CWB- 00977
         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB- 00978
*                                      BLOCK ENTRY.               -CWB- 00979
PROCESS  DS    0H                 TOP OF OUTER MAIN LOOP                00980
         SR    R4,R4              ZERO BLK COUNTER                      00981
         ST    R4,FILEBYTS        CLEAR FILE BYTE COUNT.          -CWB- 00982
         ST    R4,MAX             RESET MAX BLKSIZE WATCHER             00983
         MVC   MIN,=F'32760'      RESET MIN BLKSIZE WATCHER       *MVS* 00984
         MVC   PREVHDR1,HDR1FLAG     SAVE PREV LABEL INDICATION.  -CWB- 00985
         MVI   HDR1FLAG,C'N'             ASSUME NO HDR1 LABEL.    -CWB- 00986
         MVI   LABLFLAG,C'N'      ASSUME THIS FILE IS NOT A LABEL.-CWB- 00987
PROCESS2 DS    0H                 TOP OF MAIN INNER LOOP                00988
         C     R4,READNO          SEE IF BLK IS TO BE READ FOR SUMMARY  00989
         BNL   OTHRCHKS                                                 00990
         BAL   R5,READON          READ BLK, CALC LENGTH, DO MIN/MAX     00991
         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)   00992
         BNE   NOLABEL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *00993
                                                    LABEL).             00994
         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *00995
                                  TAPEMARK OR THE LOAD POINT.           00996
         BNE   *+18               BIF IT ISN'T THE FIRST                00997
         CLC   RECBUF(4),=C'EOV1'                                       00998
         BNE   *+8                                                      00999
         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'       01000
         CLI   SUMFLG,C'Y'        SEE IF SUMMARY OPTION IS YES          01001
         BE    CHKLABEL           DO SUMMARY PROCESSING IF SO           01002
NOLABEL  C     R4,LISTNO                                                01003
         BNH   LISTER             BRANCH TO LIST BLOCK                  01004
         B     PROCESS2                                                 01005
OTHRCHKS C     R4,LISTNO                                                01006
         BNL   CHKCNT             BRANCH IF EVERYTHING ALREADY LISTED   01007
         BAL   R5,READON                                                01008
LISTER   BAL   R5,LISTON                                                01009
         B     PROCESS2                                                 01010
CHKCNT   CLI   COUNTFLG,C'N'                                            01011
         BE    CONTROL                                                  01012
         BAL   R5,READER          TOP    OF MAIN COUNTBLK OPTION LOOP   01013
         B     *-4                BOTTOM OF MAIN COUNTBLK OPTION LOOP   01014
CONTROL  CNTRL INPUT,FSM          FORWARD SPACE TO NEXT TAPEMARK,      *01015
                                  THEN BACKSPACE OVER IT.               01016
         SR    R4,R4              RE-ZERO CURRENT BLK COUNT             01017
         ST    R4,MAX             ZERO MAX TO INHIBIT BLK COUNT MSG     01018
         SR    R8,R8              IS THIS NECESSARY?                    01019
         BAL   R5,READON          NOW READ THE TAPEMARK                 01020
         BAL   R5,LISTON          RETURN HERE IF NO TAPEMARK - ERROR!   01021
         BAL   R2,PUTLINE         PRINT ERR MSG                         01022
         MVC   MSGBUF(37),=C'0ERROR - EXPECTED TAPEMARK NOT FOUND.'     01023
         B     EXITRC8                                                  01024
READON   DS    0H                                                       01025
         MVC   RECBUF,BLANKBUF    CLEAR FIRST PART OF BUFFER FAST       01026
READER   XC    TAPE(4),TAPE       CLEAR ECB                             01027
         LA    R2,RECBUF                                                01028
         READ  TAPE,SF,INPUT,(R2),'S' READ A BLK OR TAPEMARK (WE HOPE)  01029
         CHECK TAPE                                                     01030
         MVI   MARK,X'00'         SET TO X'FF' WHEN TAPEMARK READ (EOD) 01031
         LA    R4,1(R4)           COUNT THE BLK JUST READ FOR DATASET   01032
         L     R6,TAPE+16         GET PTR TO IOB                        01033
         LH    R6,14(R6)          GET RESIDUAL COUNT                    01034
         LH    R7,INPUT+DCBBLKSI                                        01035
         SR    R7,R6              COMPUTE BLOCK'S LENGTH                01036
         BNH   BADREC             BIF ZERO OR NEG RECORD LENGTH         01037
         L     R1,FILEBYTS        ADD BLOCK LENGTH TO TOTAL       -CWB- 01038
         AR    R1,R7                   BYTE COUNT FOR THIS        -CWB- 01039
         ST    R1,FILEBYTS             FILE.                      -CWB- 01040
         AR    R8,R7              COUNT ALL BYTES READ DURING RUN       01041
         C     R7,MAX             COMPARE CURRENT BLK'S SIZE WITH MAX   01042
         BNH   *+8                SKIP IF OLD MAX IS BIGGER             01043
         ST    R7,MAX             STORE NEW MAX BLK LENGTH              01044
         C     R7,MIN             COMPARE BLK'S SIZE WITH PREVIOUS MIN  01045
         BNL   *+8                SKIP IF OLD MIN IS SMALLER            01046
         ST    R7,MIN             STORE NEW MINIMUM BLOCK LENGTH        01047
         TM    WRTFLG,X'03'       SEE IF SHOULD WRITE TO OUTPUT TAPE    01048
         BNO   READEREX                                                 01049
         TM    WRTFLG,X'04'       HAS EOVMOD BEEN HANDLED?        -CWB- 01050
         BZ    COPOUT             IF SO, BRANCH.                  -CWB- 01051
         C     R7,=F'80'          IS THIS AN 80-BYTE BLOCK?       -CWB- 01052
         BNE   COPOUT             IF NOT, GO COPY.                -CWB- 01053
         CLC   RECBUF(4),=C'VOL1' IS THIS A VOL LABEL?            -CWB- 01054
         BE    READEREX           IF SO, BYPASS COPY.             -CWB- 01055
COPOUT   EQU   *                                                  -CWB- 01056
         STH   R7,WRTCMND+6       STORE BLK LENGTH IN WRITE CCW         01057
         LA    R1,=AL3(WRTCMND)                                         01058
         LA    R2,OUTPUT                                                01059
         LR    R6,R4              SAVE R4 (CURRENT FILE BLK CNT)        01060
         BAL   R4,EXECEXCP                                              01061
         LR    R4,R6              RESTORE R4 (CURRENT FILE BLK COUNT)   01062
READEREX NI    WRTFLG,X'03'       ZERO OFF POSSIBLE 'NOVOLSER' BIT      01063
         BR    R5                 RETURN FROM READON SUBROUTINE         01064
LISTON   MVI   MSGBUF,C'0'                                              01065
         LA    R0,4               PREPARE TO RESERVE 4 LINES            01066
         BAL   R2,PAGECHK         RESERVE 4 LINES                       01067
         BAL   R2,PUTLINE2        LIST THE FIRST PART OF THE BLOCK      01068
         MVC   MSGBUF+1(132),RECBUF                                     01069
HEXON    CLI   HEXFLG,C'N'        SEE IF HEXLIST SPECIFIED              01070
         BCR   8,R5               BER R5 RETURN IF HEXLIST NOT SPECIFID 01071
         MVC   MSGBUF+1(132),RECBUF                                     01072
         MVI   TRINT1+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES 01073
         MVI   TRINT2+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES 01074
         C     R7,=F'132'         SEE IF LENGTH OF BLK EXCEEDS 1 LINE   01075
         BH    TRINT1             BRANCH IF LE 132 BYTES                01076
         BCTR  R7,0               CONVERT BLK LENGTH TO MACHINE LENGTH  01077
         STC   R7,TRINT1+1        AND STORE IN 1ST TR INSTRUCTION       01078
         STC   R7,TRINT2+1        AND IN THE SECOND ONE                 01079
TRINT1   TR    MSGBUF+1(132),TRT1 MODIFIED INSTRUCTION (LENGTH)         01080
         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL                  01081
         BAL   R2,PUTLINE3        PRINT FIRST LINE OF HEX               01082
         DC    C'TRT111'                                                01083
         MVC   MSGBUF+1(132),RECBUF                                     01084
TRINT2   TR    MSGBUF+1(132),TRT2 MODIFIED INSTRUCTION (LENGTH)         01085
         BAL   R2,PUTLINE3        PRINT SECOND LINE OF HEX              01086
         DC    C'TRT222'          FILLER                                01087
         BR    R5                 RETURN FROM LISTON OR HEXON SUBR      01088
CHKLABEL DS    0H                                                       01089
         MVI   LABLFLAG,C'Y'      NOTE WE HAVE A LABEL.           -CWB- 01090
         MVI   MSGBUF,C'0'                                              01091
         MVC   MSGBUF+1(132),RECBUF                                     01092
         CLC   RECBUF(4),=C'HDR1'                                       01093
         BE    HDR1                                                     01094
         CLC   RECBUF(4),=C'EOF1'                                       01095
         BE    EOF1EOV1                                                 01096
         CLC   RECBUF(4),=C'HDR2'                                       01097
         BE    HDR2                                                     01098
         CLC   RECBUF(4),=C'EOF2'                                       01099
         BE    EOF2EOV2                                                 01100
         CLC   RECBUF(4),=C'VOL1'                                       01101
         BE    VOL1                                                     01102
         CLC   RECBUF(4),=C'EOV1'                                       01103
         BE    EOF1EOV1                                                 01104
         CLC   RECBUF(4),=C'EOV2'                                       01105
         BE    EOF2EOV2                                                 01106
         MVI   LABLFLAG,C'N'      OOPS, NO LABEL.                 -CWB- 01107
         B     NOLABEL            IT'S NOT A LABEL AFTER ALL            01108
HDR1     DS    0H                                                       01109
         MVI   HDR1FLAG,C'Y'      NOTE HEADER LABEL FILE.         -CWB- 01110
         LA    R0,14              PREPARE TO RESERVE 14 LINES           01111
         BAL   R2,PAGECHK                                               01112
         MVC   MSGBUF,BLANKBUF    CLEAR PRINT BUFFER FAST               01113
         MVI   MSGBUF+43,C'*'     MOVE IN SEED FOR FILL                 01114
         MVC   MSGBUF+44(33),MSGBUF+43 FILL IN REST OF ASTERISKS  -CWB- 01115
         MVI   MSGBUF,C'-'                                              01116
         BAL   R2,PUTLINE3        PRINT LINE OF ASTERISKS               01117
         DC    C'HDR222'                                                01118
         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL TO BLANK         01119
         BAL   R2,PUTLINE3        PRINT 2ND LINE OF ASTERISKS           01120
         DC    C'HDR333'                                                01121
         MVC   MSGBUF+45(30),=C' DATASET SEQUENCE NUMBER 0000 '   -CWB- 01122
*        MVC   MSGBUF+70(4),RECBUF+31  MOVE IN DATASET SEQUENCE NU-CWB- 01123
*        MVC   MSGBUF+83(4),RECBUF+31  AND MOVE IT IN AGAIN       -CWB- 01124
         L     R5,CURRVTOC        POINT TO CURRENT VTOC BLOCK.    -CWB- 01125
         CLI   0(R5),VTOCEPB      IS THIS BLOCK FULL?             -CWB- 01126
         BL    NXTENTRY           IF NOT, BRANCH.                 -CWB- 01127
         GETMAIN  R,LV=VTOCBLSZ   ELSE, GET CORE FOR ANOTHER BLOCK-CWB- 01128
         ST    R1,0(R5)           SAVE FOREWARD POINTER.          -CWB- 01129
         MVI   0(R5),VTOCEPB      REINSERT THE ENTRY COUNT.       -CWB- 01130
         LR    R5,R1              MAKE NEW BLOCK CURRENT.         -CWB- 01131
         ST    R1,CURRVTOC                                        -CWB- 01132
         LA    R3,8(R5)           STEP OVER INITIAL DOUBLEWORD.   -CWB- 01133
*                                      R3 POINTS AT CURRENT ENTRY.-CWB- 01134
         SR    R0,R0              CLEAR ENTRY COUNT AND FORWARD   -CWB- 01135
         ST    R0,0(R5)                POINTER IN NEW BLOCK.      -CWB- 01136
         MVI   0(R5),1            CHANGE ENTRY COUNT TO 1.        -CWB- 01137
         B     CLEARVEN           GO CLEAR THE FIRST ENTRY.       -CWB- 01138
NXTENTRY LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT VTOC ENTRY.     -CWB- 01139
         SR    R1,R1              INCREMENT ENTRY COUNT.          -CWB- 01140
         IC    R1,0(R5)                                           -CWB- 01141
         LA    R1,1(R1)                                           -CWB- 01142
         STC   R1,0(R5)                                           -CWB- 01143
         USING VTOC,R3            R3 WILL ALWAYS POINT TO ENTRY.  -CWB- 01144
CLEARVEN MVC   VTOC(VTOCSIZE),BLANKBUF  CLEAR OUT VTOC ENTRY.     -CWB- 01145
         L     R1,TRUESEQN        ADVANCE THE TRUE DATA SET       -CWB- 01146
         LA    R1,1(R1)                SEQUENCE NUMBER COUNT.     -CWB- 01147
         ST    R1,TRUESEQN                                        -CWB- 01148
         L     R1,TRUESEQN        USE TRUE SEQUENCE NUMBER (AS    -CWB- 01149
         CVD   R1,DBLWORK              OPPOSED TO WHAT THE LABEL  -CWB- 01150
         OI    DBLWORK+7,X'0F'         SAYS) IN MESSAGE BOX.      -CWB- 01151
         UNPK  MSGBUF+70(4),DBLWORK                               -CWB- 01152
         MVC   VTOCSEQN,MSGBUF+70 ALSO USE IT IN VTOC.            -CWB- 01153
         CLC   MSGBUF+70(4),RECBUF+31 DO COUNT AND LABEL          -CWB- 01154
         BE    PRINTBOX                 AGREE?  IF SO, BRANCH.    -CWB- 01155
         MVC   MSGBUF+79(31),=C'(LABEL SEQ FIELD CONTAINS 0001)'  -CWB- 01156
         MVC   MSGBUF+105(4),RECBUF+31  ELSE SHOW DIFFERENCE.     -CWB- 01157
PRINTBOX EQU   *                                                  -CWB- 01158
         BAL   R2,PUTLINE3        PRINT MSG BETWEEN TWO LINES OF STARS  01159
         DC    C'HDR444'                                                01160
         MVC   MSGBUF+44(33),MSGBUF+43 REFILL WITH ASTERISKS      -CWB- 01161
         MVC   MSGBUF+79(31),MSGBUF+78           ASSURE BLANKS.   -CWB- 01162
         BAL   R2,PUTLINE3                                              01163
         DC    C'HDR555'                                                01164
         BAL   R2,PUTLINE3                                              01165
         DC    C'HDR666'                                                01166
         MVC   MSGBUF+40(56),BLANKBUF CLEAR ASTERISKS TO BLANKS         01167
         MVC   MSGBUF+1(80),RECBUF                                      01168
         MVC   MSGBUF+82(35),=C'1ST HEADER LABEL RECORD,  FILE NO. '    01169
         MVC   MSGBUF+116(4),RECBUF+31 MOVE IN DATASET SEQUENCE #       01170
         MVC   DATASEQ,RECBUF+31  SAVE DATASET SEQUENCE #               01171
         MVI   MSGBUF,C'-'        CCTRL FOR 2 BLANK LINES, THEN PRINT   01172
         BAL   R2,PUTLINE3                                              01173
         DC    C'HDR111'                                                01174
         BAL   R5,HEXON           PRINT HEX IF OPTION IS YES            01175
         CLC   RECBUF+54(6),=C'000000' SEE IF BLK CNT = 0               01176
         BNE   DOBLKCNT                                                 01177
         MVC   MSGBUF,BLANKBUF                                          01178
LBL1     DS    0H                                                       01179
         MVC   MSGBUF+6(7),=C'DSNAME='                                  01180
         MVC   MSGBUF+13(17),RECBUF+4                                   01181
         LTR   R3,R3                  DO WE HAVE A VTOC ENTRY?    -CWB- 01182
         BZ    *+10                   IF NOT, SKIP DSN SAVE.      -CWB- 01183
         MVC   VTOCDSN,RECBUF+4   SAVE DSN FOR VTOC.              -CWB- 01184
         MVC   MSGBUF+32(14),=C'CREATION DATE=' (MOVED OVER)      -CWB- 01185
         PACK  BADLNGTH+4(4),RECBUF+42(5)   CONVERT FOR DATE SUBROUTINE 01186
         L     R2,BADLNGTH+4                                            01187
         LA    R1,AMSGBP46        PTR TO PTR TO DATE SUBR'S RSULT -CWB- 01188
         L     R15,=V(DATE)       IRSS DATECONV SUBROUTINE              01189
         BALR  R14,R15            DATE SUBROUTINE                       01190
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB- 01191
         BZ    *+10               IF NOT, SKIP SAVE.              -CWB- 01192
         MVC   VTOCCREA,MSGBUF+46 SAVE DATE FOR VTOC.             -CWB- 01193
         CLC   RECBUF+48(5),=C'00000'  DOES TAPE HAVE EXP DATE?   -CWB- 01194
         BE    EXPIRED            IF NOT, BRANCH.                 -CWB- 01195
         MVC   MSGBUF+56(16),=C'EXPIRATION DATE='  ELSE, LIST IT. -CWB- 01196
         PACK  BADLNGTH+4(4),RECBUF+48(5)                         -CWB- 01197
         L     R2,BADLNGTH+4      DO CONVERSION AS BEFORE.        -CWB- 01198
         LA    R1,AMSGBP72                                        -CWB- 01199
         L     R15,=V(DATE)                                       -CWB- 01200
         BALR  R14,R15                                            -CWB- 01201
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB- 01202
         BZ    *+10               IF NOT, SKIP SAVE.              -CWB- 01203
         MVC   VTOCEXPR,MSGBUF+72 SAVE EXP DATE FOR VTOC.         -CWB- 01204
EXPIRED  EQU   *                                                  -CWB- 01205
         MVI   MSGBUF,C'0'                                              01206
         BAL   R2,PUTLINE3                                              01207
         DC    CL6'LBL111'                                              01208
         B     PROCESS2                                                 01209
EOF1EOV1 DS    0H                                                       01210
         CLC   DATASEQ,RECBUF+31  COMPARE OLD DATASET SEQ. NO. TO  THE *01211
                                  CURRENT ONE.                          01212
         BE    NEWSEQNO           SKIP ERROR MSG IF EQUAL               01213
         CLI   DATASEQ,C'N'       SEE IF 'NONE' STILL IN DATASEQ        01214
         BE    NEWSEQNO           SKIP ERR MSG IF NO PREVIOUS HDR1      01215
         BAL   R2,PUTLINE2                                              01216
         MVC   MSGBUF(100),=C'0ERROR - THE DATASET SEQ. NO. ON THE FOLL*01217
               OWING LABEL DOES NOT MATCH THAT ON THE PRECEDING HDR1 LA*01218
               BEL'                                                     01219
         LA    R0,6               PREPARE TO RESERVE 6 LINES            01220
         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINTOUT           01221
         MVC   MSGBUF+1(132),RECBUF RESTORE MSGBUF                      01222
NEWSEQNO MVC   DATASEQ,RECBUF+31  GET NEW DATASET SEQUENCE NUMBER       01223
         MVC   MSGBUF+82(35),=C'1ST TRAILER LABEL RECORD, FILE NO. '    01224
         MVC   MSGBUF+116(4),RECBUF+31                                  01225
         BAL   R2,PUTLINE3                                              01226
         DC    C'EOF1EV'                                                01227
         BAL   R5,HEXON                                                 01228
DOBLKCNT MVC   MSGBUF,BLANKBUF                                          01229
         MVC   MSGBUF+82(12),=C'BLOCK COUNT=' (MOVED OVER.)       -CWB- 01230
         MVC   MSGBUF+94(6),RECBUF+54                             -CWB- 01231
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB- 01232
         BZ    LBL1               IF NOT, SKIP SAVE.              -CWB- 01233
         CLI   VTOCOUNT,C' '      HAS THE TRUE BLOCK COUNT BEEN   -CWB- 01234
         BNE   LBL1                    FILLED IN?  IF SO, BRANCH. -CWB- 01235
         MVC   VTOCOUNT,RECBUF+54 ELSE, FILL IT IN FROM THE LABEL.-CWB- 01236
         B     LBL1                                                     01237
EOF2EOV2 DS    0H                                                       01238
         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT   01239
         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINT              01240
         MVC   MSGBUF+82(35),=C'2ND TRAILER LABEL RECORD, FILE NO. '    01241
         B     LBL2                                                     01242
HDR2     DS    0H                                                       01243
         LA    R0,8               PREPARE TO RESERVE 8 LINES  FOR PRINT 01244
         BAL   R2,PAGECHK         RESERVE PRINT                         01245
         MVC   MSGBUF+82(35),=C'2ND HEADER LABEL RECORD,  FILE NO. '    01246
LBL2     DS    0H                                                       01247
         MVC   MSGBUF+116(4),DATASEQ                                    01248
         BAL   R2,PUTLINE3                                              01249
         DC    C'HDR222'                                                01250
         BAL   R5,HEXON                                                 01251
         MVC   BLKSIZE(5),RECBUF+5                                      01252
         MVC   LRECL(5),RECBUF+10                                       01253
         MVC   DENSITY(1),RECBUF+15                                     01254
         CLI   DENSITY,C'0'                                             01255
         BNE   *+10                                                     01256
         MVC   DENSITY+2(9),=C'(200 BPI)'                               01257
         CLI   DENSITY,C'1'                                             01258
         BNE   *+10                                                     01259
         MVC   DENSITY+2(9),=C'(556 BPI)'                               01260
         CLI   DENSITY,C'2'                                             01261
         BNE   *+10                                                     01262
         MVC   DENSITY+2(9),=C'(800 BPI)'                               01263
         CLI   DENSITY,C'3'                                             01264
         BNE   *+10                                                     01265
         MVC   DENSITY+2(10),=C'(1600 BPI)'                             01266
         CLI   DENSITY,C'4'                                       -CWB- 01267
         BNE   *+10                                               -CWB- 01268
         MVC   DENSITY+2(10),=C'(6250 BPI)'                       -CWB- 01269
         MVC   RECFM(1),RECBUF+4  MOVE F, U, OR V PART OF RECFM DESC.   01270
         SR    R1,R1                                                    01271
         CLI   RECBUF+38,C'R'     SEE IF BLOCKING ATTRIBUTE IS 'BS'     01272
         BNE   *+18               BIF NOT BS (BS AS IN 'VBS')           01273
         LA    R1,2                                                     01274
         MVC   RECFM+1(2),=C'BS'                                        01275
         B     CTRLCHAR                                                 01276
         CLI   RECBUF+38,C' '     SEE IF BLOCKING ATTRIBUTE IS UNBLKED  01277
         BE    CTRLCHAR           BIF UNBLOCKED                         01278
         MVC   RECFM+1(1),RECBUF+38   MOVE B OR S BLOCK ATTRIBUTE CHAR  01279
         LA    R1,1               BUMP PTR PAST THE B OR S              01280
CTRLCHAR LA    R1,RECFM+1(R1)                                           01281
         MVC   0(1,R1),RECBUF+36                                        01282
         MVC   TRTCH(2),RECBUF+34                                       01283
         CLC   TRTCH(2),LBL2MSG+1 SEE IF IT'S 2 BLANKS                  01284
         BNE   *+10                                                     01285
         MVC   TRTCH(8),=C'STANDARD' 9-TRK OR 7-TRK                     01286
         BAL   R2,PUTLINE                                               01287
         MVC   MSGBUF(109),LBL2MSG                                      01288
         CLI   RECBUF,C'H'        SEE IF IS 'HDR2'                      01289
         BNE   PROCESS2           BIF IT WAS EOF2 OR EOV2               01290
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB- 01291
         BZ    NOVSTUFF           IF NOT, SKIP SAVES.             -CWB- 01292
         MVC   VTOCRECF,RECFM     COPY DATA FOR VTOC.             -CWB- 01293
         MVC   VTOCLREC,LRECL                                     -CWB- 01294
         MVC   VTOCBLKS,BLKSIZE                                   -CWB- 01295
         MVC   VTOCDEN,DENSITY+3                                  -CWB- 01296
         MVC   VTOCTRTC,RECBUF+34                                 -CWB- 01297
         MVC   VTOCJOBN,RECBUF+17                                 -CWB- 01298
         MVC   VTOCSTEP,RECBUF+26                                 -CWB- 01299
NOVSTUFF EQU   *                                                  -CWB- 01300
         MVC   MSGBUF+2(120),MSGBUF+1    CLEAR MOST OF MSGBUF           01301
         MVC   CRMSG+15(8),RECBUF+17                                    01302
         MVC   CRMSG+32(8),RECBUF+26                                    01303
         BAL   R2,PUTLINE2                                              01304
         MVC   MSGBUF+6(L'CRMSG),CRMSG                                  01305
         B     PROCESS2                                                 01306
VOL1     DS    0H                                                       01307
         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT   01308
         BAL   R2,PAGECHK         AND RESERVE THEM                      01309
         MVC   MSGBUF+82(19),=C'VOLUME LABEL RECORD'                    01310
         MVI   MSGBUF,C'0'                                              01311
         BAL   R2,PUTLINE3                                              01312
         DC    C'VOL111'                                                01313
         BAL   R5,HEXON                                                 01314
         MVC   MSGBUF,BLANKBUF                                          01315
         MVC   MSGBUF+6(21),=C'VOLUME SERIAL NUMBER='                   01316
         MVC   MSGBUF+27(6),RECBUF+4                                    01317
         MVC   MSGBUF+40(19),=C'OWNER INFORMATION='''                   01318
         MVC   MSGBUF+59(10),RECBUF+41                                  01319
         MVI   MSGBUF+69,C''''                                          01320
         MVC   VSNSAVE,RECBUF+4   SAVE VSN AND OWNER FOR USE      -CWB- 01321
         MVC   OWNERSAV,RECBUF+41      IN VTOC LISTING.           -CWB- 01322
         MVI   MSGBUF,C'0'                                              01323
         BAL   R2,PUTLINE3                                              01324
         DC    C'VOL222'                                                01325
         CLC   JFCBIN+JFCBVOLS(6),RECBUF+4 SEE IF JCL MATCHES VOLSER    01326
         BE    PROCESS2           BIF SAME                              01327
         BAL   R2,PUTLINE                                               01328
         MVC   MSGBUF(098),=C'0WARNING - VOLUME SERIAL NUMBER IN ABOVE *01329
               LABEL DOES NOT MATCH THAT SPECIFIED ON INPUT DD STATEMEN*01330
               T'                                                       01331
         TM    WRTFLG,X'01'       ARE WE MAKING A COPY?        -CWB-    01332
         BZ    PROCESS2           IF NOT, CONTINUE PROCESSING. -CWB-    01333
         L     R0,CTPMKNO         GET CURRENT TAPEMARK NUMBER           01334
         LTR   R0,R0              SEE IF IT'S ZERO (NO TAPEMARKS YET)   01335
         BNZ   PROCESS2           BIF A TAPEMARK HAS ALREADY BEEN READ  01336
         TM    JFCLTSV,X'02'      SEE IF 'SL' (OR SUL) BIT IS ON        01337
         BZ    PROCESS2           IF IT'S NOT THEN 'NO VERIFY' (BLP OR *01338
                                  AL) WAS SPECIFIED IN JCL; SO KEEP ON. 01339
         BAL   R2,PUTLINE         PRINT OPERATOR ERROR TERMINATION MSG  01340
         MVC   MSGBUF(38),=C'0TERMINATION DUE TO WRONG TAPE MOUNTED'    01341
         B     EXITRC8                                                  01342
EODS     DS    0H                                                       01343
*        AP    MARKNO,=P'1'       COUNT THE TAPEMARK              -CWB- 01344
*        UNPK  MARKNUM,MARKNO                                     -CWB- 01345
         L     R1,MARKNO          COUNT THE TAPEMARK (COUNT       -CWB- 01346
         LA    R1,1(R1)                STORED IN BINARY FORM).    -CWB- 01347
         ST    R1,MARKNO                                          -CWB- 01348
         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB- 01349
         UNPK  MARKNUM,DBLWORK                                    -CWB- 01350
         OI    MARKNUM+3,X'F0'                                          01351
         LA    R1,1                                                     01352
         A     R1,CTPMKNO         CURRENT NUMBER OF TAPEMARKS PASSED    01353
         ST    R1,CTPMKNO         IS NOW UPDATED TO ACTUAL VALUE        01354
         L     R1,BLKCNT          BLKS IN PREVIOUS DATASETS             01355
         AR    R1,R4              ADD NO. OF BLKS IN DATASET JUST READ  01356
         ST    R1,BLKCNT          TO GET TOTAL BLKS READ SO FAR (EXCEPT*01357
                                  FOR SKIPPING - SKIPEOV OR SKIPTM).    01358
         TM    WRTFLG,X'03'       SEE IF COPY BEING DONE NOW      -CWB- 01359
         BNO   *+24               SKIP WRITING TAPEMARK IF NOT    -CWB- 01360
         LA    R1,=AL3(WTMCMND)   PTR TO PTR TO WTM CCW FOR OUTPUT TAPE 01361
         LA    R2,OUTPUT          DCB FOR WTM EXCP OUTPUT               01362
         ST    R4,SVR4            SAVE R4 FOR EXEC ESCP CALL            01363
         BAL   R4,EXECEXCP        CAL SUBROUTINE TO ISSUE EXCP          01364
         L     R4,SVR4            RESTORE R4                            01365
         CLI   COUNTFLG,C'N'                                            01366
         BE    SIMPLETM           BIF COUNT OPTION NOT SPECIFIED        01367
         L     R0,MAX                                                   01368
         LTR   R0,R0                                                    01369
         BZ    SIMPLETM           BIF NO COUNTING WORK HAS BEEN DONE    01370
         LTR   R4,R4              BYPASS MAX/MIN/AVG IF           -CWB- 01371
         BZ    SIMPLETM                NO RECORDS.                -CWB- 01372
         L     R1,MIN                                                   01373
         CVD   R1,BADLNGTH                                              01374
         OI    BADLNGTH+7,X'0F'                                         01375
         UNPK  MINMSG,BADLNGTH                                          01376
         L     R1,MAX                                                   01377
         CVD   R1,BADLNGTH                                              01378
         OI    BADLNGTH+7,X'0F'                                         01379
         UNPK  MAXMSG,BADLNGTH                                          01380
         LR    R1,R4              COPY COUNT OF RECORDS AND DIVIDE-CWB- 01381
         SRA   R1,1                    BY 2 TO ROUND THE AVERAGE. -CWB- 01382
         A     R1,FILEBYTS        ADD NUMBER OF BYTES IN FILE.    -CWB- 01383
         SR    R0,R0              CLEAR R0 FOR DIVIDE.            -CWB- 01384
         ST    R0,FILEBYTS        ALSO CLEAR FILEBYTS FOR NEXT    -CWB- 01385
*                                      FILE.                      -CWB- 01386
         DR    R0,R4              DIVIDE FOR AVERAGE BLOCK SIZE.  -CWB- 01387
         CVD   R1,BADLNGTH        MAKE AVERAGE SIZE PRINTABLE.    -CWB- 01388
         OI    BADLNGTH+7,X'0F'                                   -CWB- 01389
         UNPK  AVGMSG,BADLNGTH                                    -CWB- 01390
         CVD   R4,BADLNGTH                                              01391
         OI    BADLNGTH+7,X'0F'                                         01392
         UNPK  COUNTMSG,BADLNGTH                                        01393
         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB- 01394
         BZ    NOSAVE             IF NOT, BRANCH.                 -CWB- 01395
         CLI   LABLFLAG,C'Y'      IS THIS A LABEL FILE?           -CWB- 01396
         BE    NOSAVE             IF SO, DON'T SAVE STAT'S.       -CWB- 01397
         MVC   VTOCMINB,MINMSG    SAVE MIN, MAX, AVG, AND COUNT   -CWB- 01398
         MVC   VTOCMAXB,MAXMSG         FOR VTOC LISTING.          -CWB- 01399
         MVC   VTOCAVGB,AVGMSG                                    -CWB- 01400
         MVC   VTOCOUNT,COUNTMSG                                  -CWB- 01401
NOSAVE   EQU   *                                                  -CWB- 01402
*        MVI   EOVM+1,120         SET LENGTH FOR POSSIBLE LONG EOV-CWB- 01403
         MVI   EOVM+1,CNTSEND-TPMKMSG-1  SET LENGTH FOR MVC.      -CWB- 01404
*        MVI   MSGBUF+100,C' '    PREPARE TO CLEAR PART OF MSG BUF-CWB- 01405
*        MVC   MSGBUF+101(32),MSGBUF+100 CLEAR LAST PART OF  BUFFE-CWB- 01406
         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER COMPLETELY.        -CWB- 01407
*        MVC   MSGBUF+18(87),EOVNUM+3                             -CWB- 01408
         MVC   MSGBUF+18(CNTSEND-EOVNUM-3),EOVNUM+3 COPY MESG.    -CWB- 01409
         LA    R5,PUTLINE2        SPECIFY LONG TYPE OF TAPEMARK MSG     01410
         B     TMSGDONE                                                 01411
SIMPLETM MVI   EOVM+1,33          SET LENGTH OF POSSIBLE EOV MSG        01412
         LA    R5,PUTLINE         SPECIFY SHORT TPMK FOUND MSG IF ANY   01413
*TMSGDONE CLI   MARK,X'FF'                                              01414
*        BE    EOVPROC                                                  01415
*        MVI   MARK,X'FF'                                               01416
TMSGDONE DS    0H                                                 -CWB- 01417
         CLI   EOV1FLG,C'Y'                                             01418
         BE    EOVPROC            BIF 'EOV PENDING' FLAG SET            01419
         CLI   MARK,X'FF'         TWO CONSECUTIVE MARKS?          -CWB- 01420
         BNE   SKPCHK             IF NOT, BRANCH.                 -CWB- 01421
         CLI   PREVHDR1,C'N'      PREV FILE A HDR1 LABEL?         -CWB- 01422
         BE    EOVPROC            IF NOT, GO DO EOV.              -CWB- 01423
SKPCHK   MVI   MARK,X'FF'         NOTE THIS MARK FOUND.           -CWB- 01424
         CLC   SKPEOVNO,CEOVNO    SKIP SKIPTM PROCESSSING IF            01425
         BH    SKIPEOVP           SKIPEOV PROCESSING IS BEING DONE      01426
         CLC   CTPMKNO,SKIPTMNO   COMPARE CTPMKNO WITH SKIPTMNO         01427
         BL    SKIPTMPR           BRANCH TO DO POSSIBLE SKIPTM PROCESS  01428
         BALR  R2,R5              TO PUTLINE OR PUTLINE2                01429
         MVC   MSGBUF(18),TPMKMSG                                       01430
         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY      01431
         CLC   CTPMKNO,MAXTMNO                                          01432
         BL    PROCESS                                                  01433
         TM    WRTFLG,X'01'       CHECK IF COPY BEING DONE        -CWB- 01434
         BNO   *+16               SKIP IF IT'S NOT BEING DONE     -CWB- 01435
         LA    R1,=AL3(WTMCMND)   OTHERWISE WRITE AN EXTRA TAPEMARK,    01436
         LA    R2,OUTPUT          JUST TO MAKE SURE.  THIS COULD        01437
         BAL   R4,EXECEXCP        RESULT  IN 3 TAPEMARKS IN LAST EOV.   01438
         B     PRENDMSG                                                 01439
EOVPROC  DS    0H                 HANDLES END-OF-VOLUME INDICATIONS     01440
         MVI   EOV1FLG,C'N'       CLEAR 'EOV PENDING' FLAG              01441
*        AP    EOVNO,=P'1'        COUNT EOV'S                     -CWB- 01442
*        UNPK  EOVNUM,EOVNO                                       -CWB- 01443
         L     R1,EOVNO           COUNT EOV'S (COUNT STORED       -CWB- 01444
         LA    R1,1(R1)                IN BINARY FORM).           -CWB- 01445
         ST    R1,EOVNO                                           -CWB- 01446
         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB- 01447
         UNPK  EOVNUM,DBLWORK                                     -CWB- 01448
         OI    EOVNUM+2,X'F0'                                           01449
*        MVC   WRITELOG+11(3),EOVNUM                              -CWB- 01450
*WRITELOG WTL  'EOV000 ENCOUNTERED'                               -CWB- 01451
         BAL   R2,PUTLINE                                               01452
EOVM     MVC   MSGBUF(00),TPMKMSG LENGTH SPECIFIED IN EODS EXIT         01453
         LA    R1,1                                                     01454
         A     R1,CEOVNO                                                01455
         ST    R1,CEOVNO                                                01456
         C     R1,SKPEOVNO                                              01457
         BL    SKIPEOVP           BIF SKIPEOV BEING DONE                01458
         BNE   NOTJUST            BIF SKIPEOV PROCESSING NOT JUST DONE  01459
         CLC   CTPMKNO,SKIPTMNO   SEE IF SKIPTM PROCESSING COMPLETED    01460
         BL    NOTJUST            BIF NOT, SKIPTMNO SHOULD BECOME      *01461
                                  ACTUAL NUMBER OF TAPEMARKS SKIPPED.   01462
         MVC   SKIPTMNO,CTPMKNO   MORE THAN SKIPTMNO WERE SKIPPED DUE  *01463
                                  SKIPEOV; RESET SKIPTMNO TO INDICATE  *01464
                                  ACTUAL NUMBER SKIPPED (FOR LNGTH EST) 01465
NOTJUST  DS    0H                                                       01466
*        OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY-CWB- 01467
         CLC   CEOVNO,MAXEOVNO                                          01468
         BL    PROCESS                                                  01469
PRENDMSG DS    0H                                                       01470
         CLI   COUNTFLG,C'N'                                            01471
         BE    SHORT              SKIP TO NOT PRINT COUNTS              01472
         LA    R0,6               PREPARE TO RESERVE 6 LINES FOR PRINT  01473
         BAL   R2,PAGECHK         RESERVE THEM                          01474
         LA    R1,=AL3(SENSCMND)  RE-SENSE AT END OF PROCESSING         01475
         LA    R2,INPUT           PTR TO DCB FOR EXCP CALL              01476
         BAL   R4,EXECEXCP                                              01477
         L     R2,DCBDEBAD+INPUT  FIND UCB.                       -CWB- 01478
         L     R2,DEBUCBAD(R2)                                    -CWB- 01479
         TM    19(R2),X'03'       IS THIS A 2400?                 -CWB- 01480
         BNO   ITS2400            IF SO, BRANCH.                  -CWB- 01481
         TM    SENSBYTS+6,X'80'   IS THIS A 7 TRACK DRIVE?        -CWB- 01482
         BO    SEVENTRK           IF SO, BRANCH.                  -CWB- 01483
         MVI   INDEX+3,4          SET INDEX FOR NO-CONVERT.       -CWB- 01484
         LA    R2,3               ASSUME DEN=3.                   -CWB- 01485
         TM    SENSBYTS+6,X'10'   IS IT 1600 BPI?                 -CWB- 01486
         BZ    ADDDEN2            IF SO, GO.                      -CWB- 01487
         LA    R2,4               ASSUME DEN=4.                   -CWB- 01488
         TM    SENSBYTS+6,X'08'   IS THIS A MODEL 4, 6, OR 8?     -CWB- 01489
         BO    ADDDEN2            IF SO, GO.                      -CWB- 01490
         LA    R2,2               ELSE, DEN=2.                    -CWB- 01491
         B     ADDDEN2                                            -CWB- 01492
ITS2400  TM    SENSBYTS+1,X'10'   CHECK IF 7-TRK, 1 BIT = 7-TRK   -CWB- 01493
         BO    SEVENTRK                                                 01494
         MVI   INDEX+3,4          SINCE 9-TRK, LOAD OFFSET FOR NO CONV  01495
         TM    SENSBYTS+3,X'04'   CHECK IF PE, 1 = PE = 1600 BPI        01496
         BNO   EIGHTBPI           BIF 800 BPI 9-TRK                     01497
         MVI   DCBDEN+INPUT,X'C3' SET DEN=1600 BPI INDICATOR            01498
         B     ADDDEN                                                   01499
EIGHTBPI DS    0H                                                       01500
         MVI   INPUT+DCBDEN,X'83' SET DEN=800 BPI INDICATOR             01501
         B     ADDDEN                                                   01502
SEVENTRK DS    0H                                                       01503
         MVI   SAVETRK,C'7'                                       -CWB- 01504
         MVI   INDEX+3,40         LOAD OFFSET FOR 7-TRK           -CWB- 01505
         LA    R0,3900            LOAD TAPEMARK LENGTH FOR 7-TRK        01506
         STH   R0,TMLENGTH                                              01507
         MVC   LNGTHEST+57(14),=C'C (CONVERSION)'                 -CWB- 01508
         CLI   INPUT+DCBTRTCH,X'13' SEE IF CONVERSION SPECIFIED         01509
         BE    ADDDEN             BIF IT IS, OFFSET=0 FOR CONV          01510
         MVI   INDEX+3,44         SET OFFSET FOR 7-TRK, NO CONVERS-CWB- 01511
         MVC   LNGTHEST+57(19),=C'7-TRK NO CONVERSION'            -CWB- 01512
ADDDEN   DS    0H                                                       01513
         SR    R2,R2                                                    01514
         IC    R2,INPUT+DCBDEN                                          01515
         SRL   R2,6               SHIFT INTO RIGHT-HAND 2 BITS          01516
         LTR   R2,R2              SEE IF DEN=0 SPECIFIED                01517
         BNE   ADDDEN2            BIF DEN=0 NOT SPECIFIED               01518
         L     R2,DCBDEBAD+INPUT  GET PTR TO DEB                        01519
         L     R2,DEBUCBAD(R2)    GET PTR TO UCB                        01520
         TM    19(R2),X'03'       SEE IF IT'S A 3400 SERIES OR THE LIKE 01521
         LA    R2,0               CLEAR R2 WITHOUT RESETTING CC         01522
         BNO   ADDDEN2            BIF IT ISN'T, IT'S OK                 01523
         LA    R2,1               SET DENSITY USED FOR LENGTH ESTIMATE *01524
                                  TO 556 BPI BECAUSE 3400 SERIES       *01525
                                  DOESN'T SUPPORT 200 BPI (EXCEPT 3410) 01526
ADDDEN2  DS    0H                                                       01527
         LA    R0,X'F0'           LOAD C'0' FOR OR OPERATION            01528
         OR    R0,R2              GET PRINTABLE DENSITY CHARACTER       01529
         STC   R0,LNGTHEST+45     STORE PRINTABLE DENSITY MSG     -CWB- 01530
         STC   R0,TRUEDEN         PUT INTO TRUE DEN MESG.         -CWB- 01531
         SLL   R2,3               MULTIPLY BY 8 TO GET DEN OFFSET       01532
         A     R2,INDEX           ADD PREVIOUS OFFSETS                  01533
         ST    R2,INDEX           STORE COMPLETED OFFSET FOR BPIBGTBL   01534
*         FORMULA FOR LENGTH IN INCHES FOLLOWS:                         01535
*         INCHES=R8/BPI+(IBG*BLKCNT+CTPMKNO*TMLENGTH)/1000              01536
         L     R15,CTPMKNO        LOAD NUMBER OF TAPEMARKS READ         01537
         S     R15,SKIPTMNO       SUBTRACT NUMBER OF TAPEMARKS SKIPPED  01538
         MH    R15,TMLENGTH       MULTIPLY BY (TAPEMARK LENGTH*1000)    01539
         L     R2,INDEX           LOAD INDEX INTO BPI/IBG TABLE         01540
         L     R1,BLKCNT          LOAD BLOCK COUNT                      01541
         MH    R1,BPIBGTBL-20(R2) MULTIPLY TO GET TOTAL GAP LENGTH*1000 01542
         AR    R1,R15             GET TOTAL GAP + TAPEMARK LENGTH*1000  01543
         SR    R0,R0                                                    01544
         D     R0,=F'1000'        GET TOTAL TAPEMARK+ GAP LENGTH INCHES 01545
         LR    R15,R1             SAVE THIS FOR LATER                   01546
         LH    R2,BPIBGTBL-18(R2) LOAD PHYSICAL BPI (NOT LOGICAL BPI)   01547
         LR    R1,R8              LOAD TOTAL BYTE COUNT                 01548
         SR    R0,R0                                                    01549
         DR    R0,R2              DIVIDE BYTE COUNT BY PHYSICAL BPI     01550
         AR    R1,R15             GET TOTAL LENGTH IN INCHES            01551
         SR    R0,R0                                                    01552
         D     R0,=F'12'          GET FEET IN R1, INCHES IN R0          01553
         CVD   R1,BADLNGTH                                              01554
         OI    BADLNGTH+7,X'0F'                                         01555
         UNPK  LNGTHEST+17(4),BADLNGTH                                  01556
         CVD   R0,BADLNGTH                                              01557
         OI    BADLNGTH+7,X'0F'                                         01558
         UNPK  LNGTHEST+27(2),BADLNGTH                                  01559
         BAL   R2,PUTLINE         PRINT TRUE DEN MESG.            -CWB- 01560
         MVC   MSGBUF(TRUEDLEN),TRUEDMSG                          -CWB- 01561
         BAL   R2,PUTLINE                                               01562
         MVC   MSGBUF(76),LNGTHEST                                -CWB- 01563
         BAL   R2,PUTLINE                                               01564
         MVC   MSGBUF(106),LNGTHACC                                     01565
         MVI   SHORTNOW+1,111     MACHINE LENGTH OF LONG MSG FOR COUNTS 01566
         CVD   R8,BADLNGTH        TOTAL BYTES READ (FOR COUNT OPT ONLY) 01567
         OI    BADLNGTH+7,X'0F'   SET SIGN NIBBLE                       01568
         UNPK  BYTES,BADLNGTH                                           01569
         L     R8,BLKCNT          TOTAL BLKS READ ON TAPE, EXCLUDING   *01570
                                  THOSE READ DURING SKIP PROC%SSING.    01571
         CVD   R8,BADLNGTH                                              01572
         OI    BADLNGTH+7,X'0F'                                         01573
         UNPK  NBLKS,BADLNGTH                                           01574
SHORT    BAL   R2,PUTLINE         PRINT 'SUCCESSFUL END' MSG            01575
SHORTNOW MVC   MSGBUF(L'ENDMSG),ENDMSG (LENGTH MODIFIED FOR COUNTBLKS)  01576
         L     R2,ERRCOUNT        COUNT OF SYNAD EXITS TAKEN            01577
         LTR   R2,R2              SEE IF ZERO                           01578
*        BZ    EXIT               EXIT IF SO                      -CWB- 01579
         BZ    LISTVTOC           GO DO VTOC IF SO.               -CWB- 01580
         CVD   R2,BADLNGTH                                              01581
         OI    BADLNGTH+7,X'0F'                                         01582
         UNPK  ERRSUMSG+22(5),BADLNGTH                                  01583
         BAL   R2,PUTLINE                                               01584
         MVC   MSGBUF(L'ERRSUMSG),ERRSUMSG                              01585
*        B     EXIT                                               -CWB- 01586
         SPACE 3                                                        01587
LISTVTOC CLC   FRSTVTOC+1(3),=AL3(0)  DID WE MAKE A VTOC?         -CWB- 01588
         BE    EXIT               IF NOT, SKIP IT.                -CWB- 01589
         LA    R0,100             RESERVE 100 LINES (FORCE EJECT).-CWB- 01590
         BAL   R2,PAGECHK                                         -CWB- 01591
         BAL   R2,PUTLINE         OUTPUT VTOC HEADING.            -CWB- 01592
         MVC   MSGBUF(VHEADLEN),VTOCHEAD                          -CWB- 01593
         BAL   R2,PUTLINE         OUTPUT COLUMN HEADINGS.         -CWB- 01594
         MVC   MSGBUF(L'VTOCHED2),VTOCHED2                        -CWB- 01595
         L     R4,FRSTVTOC        GET ADDRESS OF FIRST VTOC BLOCK.-CWB- 01596
         SR    R8,R8              CLEAR R8 FOR 1-BYTE COUNTS.     -CWB- 01597
NEXTVBLK LA    R3,8(R4)           GET ADDRESS OF FIRST ENTRY IN   -CWB- 01598
*                                      THE VTOC BLOCK.            -CWB- 01599
         IC    R8,0(R4)           GET THE NUMBER OF ENTRIES IN    -CWB- 01600
*                                      THIS VTOC BLOCK.           -CWB- 01601
NEXTLINE MVC   MSGBUF,BLANKBUF    BUILD THE VTOC ENTRY LINE:      -CWB- 01602
         MVC   MSGBUF+1(4),VTOCSEQN    DATA SET SEQUENCE NUMBER.  -CWB- 01603
         MVC   MSGBUF+7(17),VTOCDSN    DATA SET NAME.             -CWB- 01604
         MVC   MSGBUF+26(4),VTOCRECF   RECFM.                     -CWB- 01605
         MVC   MSGBUF+32(5),VTOCLREC   LRECL.                     -CWB- 01606
         MVC   MSGBUF+40(5),VTOCBLKS   BLKSIZE.                   -CWB- 01607
         MVC   MSGBUF+47(4),VTOCDEN    DENSITY.                   -CWB- 01608
         MVC   MSGBUF+53(2),VTOCTRTC   TRTCH.                     -CWB- 01609
         MVC   MSGBUF+59(5),VTOCMAXB   MAXIMUM BLOCK SIZE.        -CWB- 01610
         MVC   MSGBUF+68(5),VTOCMINB   MINIMUM BLOCK SIZE.        -CWB- 01611
         MVC   MSGBUF+77(5),VTOCAVGB   AVERAGE BLOCK SIZE.        -CWB- 01612
         MVC   MSGBUF+86(6),VTOCOUNT   NUMBER OF BLOCKS.          -CWB- 01613
         MVC   MSGBUF+95(8),VTOCCREA   CREATION DATE.             -CWB- 01614
         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.                  -CWB- 01615
         MVC   MSGBUF+115(8),VTOCSTEP  STEP NAME.                 -CWB- 01616
         MVC   MSGBUF+125(8),VTOCEXPR  EXPIRATION DATE.           -CWB- 01617
         BAL   R2,PUTLINE3        OUTPUT THE LINE.                -CWB- 01618
         DC    CL6'VTOC--'        REQUIRED DEAD SPACE.            -CWB- 01619
         LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT ENTRY.          -CWB- 01620
         BCT   R8,NEXTLINE        LOOP IF MORE IN THIS BLOCK.     -CWB- 01621
         LR    R1,R4              POINT TO VTOC BLOCK.            -CWB- 01622
         L     R4,0(R4)           GET ADDRESS OF NEXT BLOCK.      -CWB- 01623
         LA    R0,VTOCBLSZ        GET VTOC BLOCK SIZE.            -CWB- 01624
         FREEMAIN  R,LV=(0),A=(1) FREE UP VTOC BLOCK'S CORE.      -CWB- 01625
         LA    R4,0(R4)           CLEAR HIGH-ORDER BYTE.          -CWB- 01626
         LTR   R4,R4              IS FOREWARD POINTER ZERO?       -CWB- 01627
         BZ    EXIT               IF SO, WE'RE DONE.              -CWB- 01628
         B     NEXTVBLK           ELSE, GO DO NEXT BLOCK.         -CWB- 01629
         EJECT                                                          01630
*WRTCMND CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GETM-CWB- 01631
*WTMCMND CCW   X'1F',0,X'60',1    WRITE TAPEMARK, SLI, CC TO SENSE-CWB- 01632
*        CCW   X'04',SENSBYTS,X'20',1 SENSE CHAINED FOR DEVICE END-CWB- 01633
*                                 ABOVE MOVED FOR ADDRESSABILITY. -CWB- 01634
CTPMKNO  DC    F'0'               # OF TAPEMARKS ALREADY ENCOUNTERED    01635
CEOVNO   DC    F'0'               # OF DOUBLE TAPEMARKS PASSED          01636
SVR4     DC    F'0'               FOR SAVING R4 TEMPORARILY             01637
*SVR14   DC    F'0'                                               -CWB- 01638
BLKCNT   DC    F'0'               KEEPS TRACK OF TOTAL BLKS READ ON TAPE01639
                                  EXCLUDING THOSE READ DURING SKIPPING. 01640
MAX      DC    F'0'               KEEPS TRACK OF MAXIMUM BLK LENGTH     01641
MIN      DC    F'32760'           KEEPS TRACK OF MINIMUM BLK LENGTH VS* 01642
TMLENGTH DC    H'3750'            DEFAULT TAPEMARK LENGTH*1000 (9-TRK)  01643
INDEX    DC    F'0'               NOCONV=+4, 7-TRK=+40, +DEN*8    -CWB- 01644
*TBLORG EQU BPIBGTBL-20           THEORETICAL ORIGIN OF BPIBGTBL        01645
*                                 WHICH IS LIKE A 3-D ARRAY:            01646
*                                 7-TRK=+40,  NOCONV=+4, +DEN*8   -CWB- 01647
BPIBGTBL DC    H'601,800'   800 BPI NOCONV 9-TRK                        01648
         DC    H'1,1'      1600 BPI CONV   9-TRK (NOT USED)             01649
         DC    H'651,1600' 1600 BPI NOCONV 9-TRK                        01650
         DC    H'300,4687'        6250 BPI, CONV   9-TRK (NOT USED)     01651
         DC    H'300,6250'        6250 BPI, NOCONV 9-TRK          -CWB- 01652
         DC    H'752,150'   200 BPI CONV   7-TRK                        01653
         DC    H'752,200'   200 BPI NOCONV 7-TRK                        01654
         DC    H'751,417'   556 BPI CONV   7-TRK                        01655
         DC    H'751,556'   556 BPI NOCONV 7-TRK                        01656
         DC    H'751,600'   800 BPI CONV   7-TRK                        01657
         DC    H'751,800'   800 BPI NOCONV 7-TRK                        01658
*MARKNO  DC    PL3'0'                                             -CWB- 01659
*EOVNO   DC    PL2'0'                                             -CWB- 01660
MARKNO   DC    F'0'               NUMBER OF TAPE MARKS READ.      -CWB- 01661
EOVNO    DC    F'0'               NUMBER OF EOV'S PROCESSED.      -CWB- 01662
TPMKMSG  DC    C'0TAPEMARK NO. '                                        01663
MARKNUM  DC    C'    '                                                  01664
         DC    C' -- EOV NO. '                                          01665
EOVNUM   DC    CL3'000'                                                 01666
         DC    C'    BLOCK LENGTHS:  MIN='                        -CWB- 01667
MINMSG   DC    C'00000'                                                 01668
         DC    C'  MAX='                                          -CWB- 01669
MAXMSG   DC    C'00000'                                                 01670
         DC    C'  AVG='                                          -CWB- 01671
AVGMSG   DC    C'00000'                                           -CWB- 01672
         DC    C'    NUMBER OF BLOCKS='                                 01673
COUNTMSG DC    C'000000'                                                01674
CNTSEND  EQU   *                                                  -CWB- 01675
DATASEQ  DC    CL4'NONE'                                                01676
ENDMSG   DC    C'0SUCCESSFUL PROCESSING OF THIS TAPE COMPLETED'         01677
         DC    C':    TOTAL BYTES READ='                                01678
BYTES    DC    C'XXXXXXXX'                                              01679
         DC    C'    NUMBER OF DATA BLOCKS READ='                       01680
NBLKS    DC    C'XXXXXX'                                                01681
TRUEDMSG DC    C'-TRUE DENSITY AT END OF PROCESSING:  DEN='       -CWB- 01682
TRUEDEN  DC    C'3'                                               -CWB- 01683
TRUEDLEN EQU   *-TRUEDMSG                                         -CWB- 01684
LNGTHEST DC    C'0LENGTH ESTIMATE=XXXX FEET YY INCHES FOR DEN=X AND TRT*01685
               CH=STANDARD           '                            -CWB- 01686
LNGTHACC DC    C'0(LENGTH ESTIMATE USUALLY ACCURATE WITHIN PLUS OR MINU*01687
               S TEN PERCENT;  ALMOST ALWAYS WITHIN TWENTY PERCENT)'    01688
*BADRECM DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED' (MOVED)         -CWB- 01689
LBL2MSG  DC    CL12'0     RECFM='                                       01690
RECFM    DC    CL16'        BLKSIZE='                                   01691
BLKSIZE  DC    CL16'XXXXX     LRECL='                                   01692
LRECL    DC    CL25'XXXXX     LABEL DEN SPEC='                          01693
DENSITY  DC    CL24'                  TRTCH='                           01694
TRTCH    DC    CL16' '                                                  01695
CRMSG    DC    C'CREATED BY JOB          IN STEP         '              01696
MARK     DC    X'00'              'TAPEMARK JUST READ' FLAG (00 = NOT)  01697
EOV1FLG  DC    C'N'               SET EOV1FLG =C'Y' WHENEVER 1ST BLK   *01698
                                  AFTER A TAPEMARK IS 80 BYTES LONG &  *01699
                                  STARTS WITH 'EOV1'.                   01700
LABLFLAG DC    C'N'               INDICATES WHETHER WE ARE        -CWB- 01701
*                                      PROCESSING A LABEL FILE.   -CWB- 01702
PREVHDR1 DC    C'N'               C'Y' IF PREV FILE A HDR1 LABEL. -CWB- 01703
HDR1FLAG DC    C'N'               C'Y' IF CURRENT FILE A HDR1.    -CWB- 01704
DBLWORK  DC    D'0'               CVB/CVD WORK AREA.              -CWB- 01705
CURRVTOC DC    A(FRSTVTOC)        CURRENT VTOC BLOCK.             -CWB- 01706
FRSTVTOC DC    AL1(VTOCEPB),AL3(0)  ADDRESS OF FIRST VTOC BLOCK;  -CWB- 01707
*                                      HIGH-ORDER BYTE SET TO     -CWB- 01708
*                                      FORCE FIRST GETMAIN.       -CWB- 01709
FILEBYTS DC    F'0'               NUMBER OF BYTES IN THIS FILE.   -CWB- 01710
TRUESEQN DC    F'0'               LABEL= VALUE SEQUENCE NUMBER.   -CWB- 01711
VTOCHEAD DC    C'-VOLUME TABLE OF CONTENTS FOR '                  -CWB- 01712
VSNSAVE  DC    C'VSNVSN',C'    '                                  -CWB- 01713
SAVETRK  DC    C'9 TRACK    '                                     -CWB- 01714
OWNERSAV DC    CL10'          '                                   -CWB- 01715
VHEADLEN EQU   *-VTOCHEAD                                         -CWB- 01716
VTOCHED2 DC    C'-SEQ.  DATA SET NAME     RECFM  LRECL  BLKSIZE DEN TRT*01717
               CH  MAX BLK  MIN BLK  AVG BLK  BLK COUNT  CREATED  JOB N*01718
               AME  STEP      EXPIRES'                            -CWB- 01719
         LTORG                                                          01720
         SPACE 5                                                        01721
VTOC     DSECT                                                          01722
VTOCSEQN DS    CL4                SEQUENCE NUMBER                 -CWB- 01723
VTOCDSN  DS    CL17               DATA SET NAME.                  -CWB- 01724
VTOCRECF DS    CL4                RECFM.                          -CWB- 01725
VTOCLREC DS    CL5                LRECL.                          -CWB- 01726
VTOCBLKS DS    CL5                BLKSIZE.                        -CWB- 01727
VTOCDEN  DS    CL4                DENSITY.                        -CWB- 01728
VTOCTRTC DS    CL2                TRTCH.                          -CWB- 01729
VTOCMAXB DS    CL5                MAXIMUM BLOCK SIZE.             -CWB- 01730
VTOCMINB DS    CL5                MINIMUM BLOCK SIZE.             -CWB- 01731
VTOCAVGB DS    CL5                AVERAGE BLOCK SIZE.             -CWB- 01732
VTOCOUNT DS    CL6                BLOCK COUNT.                    -CWB- 01733
VTOCCREA DS    CL8                CREATION DATE.                  -CWB- 01734
VTOCJOBN DS    CL8                JOB NAME.                       -CWB- 01735
VTOCSTEP DS    CL8                STEP NAME.                      -CWB- 01736
VTOCEXPR DS    CL8                EXPIRATION DATE.                -CWB- 01737
         DS    0D                 ADVANCE TO DOUBLE WORD BNDRY.   -CWB- 01738
VTOCSIZE EQU   *-VTOC             SIZE OF VTOC ENTRY.             -CWB- 01739
VTOCEPB  EQU   10                 NUMBER OF ENTRIES PER BLOCK.    -CWB- 01740
VTOCBLSZ EQU   VTOCEPB*VTOCSIZE+8 SIZE OF VTOC BLOCK.             -CWB- 01741
         END                                                            01742
TDAT TITLE 'TAPESCAN 3.4 - ''DATA'' ROUTINE'                            01743
DATE     CSECT                                                          01744
R0       EQU   0                                                        01745
R1       EQU   1                                                        01746
R2       EQU   2                                                        01747
R3       EQU   3                                                        01748
R4       EQU   4                                                        01749
R5       EQU   5                                                        01750
R13      EQU   13                                                       01751
R14      EQU   14                                                       01752
R15      EQU   15                                                       01753
         USING *,R15                                                    01754
         STM   R14,R5,12(R13)                                           01755
         L     R1,0(R1)           GET PTR TO RESULT FIELD               01756
         SR    R3,R3              ACCUMULATOR OF MONTH-DAYS             01757
         SR    R4,R4              MONTH COUNTER                         01758
         STM   R3,R4,DEC          CLEAR DEC TO ZEROS                    01759
         LA    R2,0(R2)          CLEAR HIGH-ORDER BYTE.                 01760
         ST    R2,TEMP            STORE 00YYJJJF, (ESPECIALLY YY)       01761
         STH   R2,DEC+6           SAVE JJJF FOR LATER CVB               01762
         OI    DEC+7,X'0F'        FORCE SIGN TO X'F'.                   01763
         SRL   R2,20              GET TENS PART OF YY                   01764
         MH    R2,=H'6'           GET HEX DEC SUBTRACTION FACTOR        01765
         LH    R0,TEMP            RELOAD YY                             01766
         SR    R0,R2              SUBTRACT TO GET BIN RESULT            01767
         STC   R0,CHAR1           STORE RESULT FOR TM                   01768
         TM    CHAR1,X'03'        SEE IF YEAR IS DOUBLY EVEN            01769
         MVI   MONTH+3,29         MOVE IN LEAPYEAR FEBRUARY             01770
         BZ    *+8                SKIP IF IT'S REALLY A LEAP YEAR       01771
         MVI   MONTH+3,28         MOVE IN REGULAR FEBRUARY              01772
         CVB   R0,DEC             GET JJJ INTO R0                       01773
         C     R0,=F'366'         IS DAY VALID?                         01774
         BNH   GOODDAY            IF SO, GO CONVERT.                    01775
         MVC   0(8,R1),=C'????????' ELSE RETURN BAD DATE.               01776
         B     RETURN             GO BACK.                              01777
GOODDAY  LA    R2,MONTH           PTR TO TBL OF # OF DAYS IN EACH MONTH 01778
NEXT     LR    R5,R3              SAVE PREVIOUS MONTH-DAYS TOTAL        01779
         AH    R3,0(R2)                                                 01780
         LA    R2,2(R2)                                                 01781
         LA    R4,1(R4)           COUNT THIS MONTH                      01782
         CR    R3,R0              COMPARE TOTAL MONTH-DAYS TO JJJ       01783
         BL    NEXT                                                     01784
         CVD   R4,DEC             CONVERT MONTHNUMBER TO DEC            01785
         MVO   TEMP-1(2),DEC+6(2) PUT MONTH INTO PLACE FOR EDIT         01786
         SR    R0,R5              GET DAY#                              01787
         CVD   R0,DEC             CONVERT DAY TO DEC                    01788
         MVO   CHAR1(2),DEC+6(2)                                        01789
         MVC   TEMP(1),CHAR1                                            01790
         MVC   DEC-1(9),=X'F02120612020612020' MOVE IN EDIT PATTERN     01791
         ED    DEC-1(9),TEMP-1                                          01792
         MVC   0(8,R1),DEC        MOVE RESULT TO FINAL RESTING PLACE    01793
RETURN   LM    R14,R5,12(R13)                                           01794
         BR    R14                                                      01795
MONTH    DC    H'31,28,31,30,31,30,31,31,30,31,30,31,32767'             01796
DEC      DC    D'0'               FOR CVB & CVD                         01797
CHAR1    DC    C'FUCK'            TEMP                                  01798
TEMP     DC    F'0'               TEMP                                  01799
         END                                                            01800
