         TITLE '   T O D       '
*---------------------------------------------------------------------*
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. FEDERAL POWER COMMISSION.
*        DATE WRITTEN. JAN 31 1977.
*        DATE UPDATED.
*        ATTRIBUTES. RE-ENTRANT.
*
* PURPOSE:  REFORMAT STCK OUTPUT TO MAKE IT DISPLAYABLE
*
* SYNTAX :  TOD nnn   where nnn is the number of iterations to
*                     invoke the STCK instruction.  (default is 10)
*
* CHNGE LOG:  7JUL90 - CLEANED UP THE CODE  JIM MARSHALL
*            23MAR14 - MERGED SOURCE WITH TODCNVRT PROGRAM   -  SBG
*                    - FIXED ERROR IN TIMEZONE PROCESSING.
*                    - ADD HEADERS TO EXPLAIN OUTPUT OF PROGRAM.
*                    - USE APUT AND EPUTL TO MAKE PUTLINE OUTPUT.
*             2APR14 - GET REPEAT COUNT FROM CPPLCBUF
*---------------------------------------------------------------------*
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         SPACE
TOD      CSECT
         B     BEGINN-*(,15)
         DC    AL1(8)
         DC    CL8'&SYSDATE'
         DC    CL2' '
         DC    CL8'&SYSTIME'
         DC    CL4'TOD '
         DC    CL4'V1.4'
BEGINN   DS    0H
         STM   14,12,12(13)
         LR    R12,R15                 LOAD BASE
         LR    R11,R1                  SAVE R1 - HAS PARMS OR CPPL
         USING TOD,R12
         GETMAIN R,LV=MYDSECTL
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R14,R13
         LR    R13,R1
         L     R1,24(,R14)             RESTORE R1
         USING MYDSECT,R13
         L     R0,=V(TODCNVRT)         ENTRY PT OF TODCNVRT PROGRAM
         ST    R0,ENTRY                SAVE ITS ENTRY POINT
         ST    R11,PARMSAVE            SAVE THE PARM REGISTER
INITCON  DS    0H
         ZAP   ITCOUNT,=P'0'           ZERO COUNTER
*
TITLEPR  DS    0H                      PRINT TITLE LINE
         APUT  HEADR1,L'HEADR1
         APUT  HEADR2,L'HEADR2
         APUT  TITLEW,L'TITLEW
         APUT  DASHES,L'DASHES
*
         LA    R9,10                   DEFAULT NUMBER OF ITERATIONS
*              GET OVERRIDING REPEAT COUNT FROM COMMAND LINE
*              R1 POINTS TO CPPL, 1ST WORD OF CPPL POINTS TO CBUF
*              CBUF STARTS WITH 2 HALFWDS: LENGTH+4 AND OPERAND OFFSET
*              IF OPERAND OFFSET + 4 = LENGTH, NO OPERANDS.
*              CBUF WITHOUT ANY OPERANDS LOOKS LIKE THIS:
*               AL2(7,3),C'TOD'
*              CBUF WITH 1-DIGIT OPERAND LOOKS LIKE THIS:
*               AL2(9,4),C'TOD 6'
*              CBUF WITH 2-DIGIT OPERAND LOOKS LIKE THIS:
*               AL2(10,4),C'TOD 12'
*              CBUF WITH 1-DIGIT OPERAND AND 2 SPACES LOOKS LIKE THIS:
*               AL2(10,5),C'TOD  6'
         L     R1,PARMSAVE             POINT TO CPPL
         L     R14,0(,R1)              POINT TO CBUF USING 1ST WORD
         LH    R15,0(,R14)             GET CMD LINE LENGTH + 4
         SH    R15,=H'4'               GET CMD LINE LENGTH
         SH    R15,2(,R14)             COMPUTE ARG LENGTH
         BZ    PARMX                   IF NO ARG THEN LEAVE R9 AS IS
         AH    R14,2(,R14)             POINT TO OPERANDS - 4
         AH    R14,=H'4'               POINT TO OPERANDS
         CH    R15,=H'5'               IF ARGS TOO LONG (5 DIGITS MAX)
         BH    PARMX                     LEAVE R9 UNCHANGED
         BCTR  R15,0                   LENGTH MINUS 1 FOR EX
         EX    R15,CHEKNUM             VERIFY PARM IS NUMERIC
         BNZ   PARMX                     IF NOT, LEAVE R9 UNCHANGED
         EX    R15,PACKNUM             PACK INTO DOUBLEWORD WORKA
         CVB   R15,WORKA               GET REPEAT COUNT INTO R15
         LTR   R15,R15                 IF VALUE OF ARG IS ZERO
         BZ    PARMX                     LEAVE R9 UNCHANGED
         LR    R9,R15                  SET REPEAT COUNT IN R9
         B     PARMX
CHEKNUM  TRT   0(0,R14),NUMERIC    TRT CHANGES R1 AND R2
*                                  BUT WE ONLY NEED THE CONDITION CODE
PACKNUM  PACK  WORKA(8),0(0,R14)
PARMX    EQU   *
         L     R15,16                  CVT
         L     R15,X'130'(,R15)        TIME ZONE OFFSET - CVTTZ
         ST    R15,TIMEZONE            SAVE IT FOR TODCNVRT CALL
TODLOOP  DS    0H
         AP    ITCOUNT,=P'1'           COUNT THIS ITERATION
         MVI   TIMEFMT-1,X'40'         BLANK OUTPUT LINE
         MVC   TIMEFMT,TIMEFMT-1
         SPACE
         STCK  CLOCK
         SPACE
         MVI   ANSWER,C' '             CLEAR TODCNVRT ANSWER AREA
         MVC   ANSWER+1(L'ANSWER-1),ANSWER
*
         MVI   OPTION,1
*                                      LOAD PARAM LIST FOR TODCNVRT
         LA    R1,PARAM                POINT TO PARAM LIST AND LOAD IT
         LA    R15,TIMEZONE
         ST    R15,0(,R1)              TIME ZONE
         LA    R15,CLOCK
         ST    R15,4(,R1)              STCK VALUE
         LA    R15,ANSWER
         ST    R15,8(,R1)              ANSWER PLACE
         LA    R15,=X'01'
         ST    R15,12(,R1)             OPTION
         LA    R15,WORKA
         ST    R15,16(,R1)             ADDRESS OF WORK AREA
*
         L     R15,ENTRY               LOAD TODCNVRT ENTRY POINT
         BALR  R14,R15                 CALL TODCNVRT
*                                      FORMAT THE ANSWER FOR DISPLAY
         MVC   TIMEFMT(4),ANSWER
         MVI   TIMEFMT+4,C'.'
         MVC   TIMEFMT+5(3),ANSWER+4
         MVC   TIMEFMT+10(15),ANSWER+7
         MVI   TIMEFMT+12,C':'
         MVC   TIMEITC(6),MASK6
         ED    TIMEITC(6),ITCOUNT+2
         APUT  TIMEFMT,L'TIMEFMT
*
         BCT   R9,TODLOOP              DO IT R9 NUMBER OF TIMES.
*
EXIT0    SR    R15,R15                 ZERO RETURN CODE
EXIT     LR    R1,R13                  EXIT
         L     R13,4(,R13)
         ST    R15,16(,R13)
         FREEMAIN R,A=(1),LV=MYDSECTL
         LM    R14,R12,12(R13)
         BR    R14
         SPACE
*---------------------------------------------------------------------*
*        CONSTANTS
*---------------------------------------------------------------------*
         SPACE
HEADR1   DC    CL33'     TOD PROGRAM - V1.4    '
HEADR2   DC    CL33'      STCK  FORMATTING     '
TITLEW   DC    CL33'CCYY.DDD  HH:MM.SS.THTTHM ITERATE'
DASHES   DC    CL33'----.---  --------.------ -------'
MASK6    DC    XL6'402020202120'
NUMERIC  DC    240X'FF',10X'00',6X'FF'
         LTORG
         SPACE
*---------------------------------------------------------------------*
*        DSECTS
*---------------------------------------------------------------------*
         SPACE
MYDSECT  DSECT
         DS    18F                 REGISTER SAVEAREA
*                                  TODCNVRT PARAMETER LIST
ENTRY    DS    F                1  LOADED ENTRY POINT OF TODCNVRT
PARAM    DS    5F               2  PARAMETER LIST FOR TODCNVRT PROGRAM
CLOCK    DS    D                3  TARGET AREA OF STCK INSTRUCTION
TIMEZONE DS    F                4  FILLED IN FROM CVTTZ
ANSWER   DS    CL64             5  ANSWER PLACE FOR TODCNVRT PROGRAM
         DS    C
TIMEFMT  DS    CL64                FORMAT FOR DATE AND TIME DISPLAY
TIMEITC  EQU   TIMEFMT+27
OPTION   DS    C
WORKA    DS    10D
PARMSAVE DS    F
ITCOUNT  DS    PL5
MYDSECTL EQU   *-MYDSECT
         YREGS
         END
         TITLE '   T O D C N V R T  '
*---------------------------------------------------------------------*
*                                                                     *
*        'TODCNVRT'                                                   *
*                                                                     *
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.    *
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.            *
*        DATE WRITTEN. DECEMBER 7 1976.                               *
*        DATE UPDATED. JANUARY 31 1977.                               *
*        ATTRIBUTES. RE-ENTRANT.                                      *
*                                                                     *
*        DESCRIPTION.                                                 *
*         THIS SUBPROGRAM CONVERTS THE RESULTS OF A                   *
*         'STORE CLOCK' INSTRUCTION TO EBCDIC. THE LOGIC              *
*         IS TAKEN STRAIGHT OUT OF MODULE 'AMDPRSEG' IN               *
*         AMDPRDMP (5752-SC113), VS2 RELEASE 3.0                      *
*         WITH A FEW MODIFICATIONS TO MAKE THE PASSING                *
*         OF PARAMETERS MORE CONVENTIONAL.                            *
*                                                                     *
*            INPUT - LIST OF 5 ADDRESSES POINTED TO BY REG 1          *
*                       1) PTR TO CVTTZ VALUE                         *
*                       2) PTR TO 8-BYTE TOD CLOCK VALUE              *
*                       3) PTR TO OUTPUT AREA                         *
*                       4) PTR TO OPTION BYTE X'01' OR X'02'          *
*                       5) PTR TO 80-BYTE WORKAREA                    *
*                    REG 15 = ENTRY ADDRESS  REG 14 = RETURN ADDRES   *
*                    REG 13 = 72 BYTE REGISTER SAVEAREA ADDRESS       *
*                                                                     *
*            OUTPUT - EBCDIC TIME IN OUTPUT AREA                      *
*                     REG 15 = 4 IF INPUT CLOCK TIME ALL ZEROES       *
*                     REG 15 = 0 ALL OTHER CASES.                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
TODCNVRT CSECT
         SAVE  (14,12),,&SYSDATE
         LR    R12,15
         USING TODCNVRT,R12
         L     R1,16(,R1)              SAVEPTR
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R14,R13
         LR    R13,R1
         L     R1,24(,R14)             RESTORE R1
         USING MYDSECT,R13
         USING PARAMS,R1
         SPACE 1
         L     R7,TODPTR
         MVC   CVRTAREA(8),0(R7)
         SPACE
*---------------------------------------------------------------------*
*        CHANGE TOD TO LOCAL TIME
*---------------------------------------------------------------------*
         SPACE
         L     R7,CVTTZPTR         GET ADDR OF TZ FIELD
         L     R7,0(,R7)           R7 = TZ VALUE
         L     R15,MINUS1
         CLR   R7,R15              IS TZ = MINUS 1?
         BNE   TZADD               NO - USE TZ FROM CALLER
         L     R7,16               YES - USE TZ FROM CVT
         L     R7,X'130'(,R7)      GET CVTTZ
TZADD    EQU   *
         AL    R7,CVRTAREA         ADD TZ TO FIRST WORD
         ST    R7,CVRTAREA
         SPACE
         LM    R4,R5,CVRTAREA
         SRDL  R4,12               REMOVE INSIGNIFICANT BITS
         D     R4,SIXTYMIL         DIVIDE BY 60,000,000
         SPACE
         L     R7,OPTION
         CLI   0(R7),2
         BE    RELTVTME
         B     FULLDATE
         SPACE
*---------------------------------------------------------------------*
*        RELATIVE TIME CONVERSION -- THIS ROUTINE CONVERTS THE TOD
*        VALUE TO RELATIVE SECONDS.MICROSECONDS FROM 0 A.M. OF THE
*        CURRENT DAY REFLECTED BY THE TOD VALUE. THE CONVERTED TIME
*        IS PLACED LEFT JUSTIFIED IN THE OUTPUT AREA IN THE FORM
*        SSSSS.MMMMMM (EBCDIC).   UPON ENTRY TO THIS ROUTINE THE TOD
*        VALUE HAS ALREADY BEEN CHANGED TO TOTAL MINUTES (IN R5) AND
*        NUMBER OF MICROSECONDS INTO CURRENT MINUTE (IN R4).
*---------------------------------------------------------------------*
         SPACE
RELTVTME EQU   *
         L     R7,TODPTR
         CLC   0(8,R7),=XL8'00'
         BNE   RNOTZERO
         L     R7,OUTAREA
         MVI   12(R7),C' '
         MVC   13(11,R7),12(R7)
         MVC   0(12,R7),=C'00000.000000'
         LA    R15,4
         B     EXIT
         SPACE
RNOTZERO EQU   *
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT MINUTE
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R4
         SLR   R14,R14
         D     R14,MILLION
         ST    R15,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSEC INTO CURRENT SECOND
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14              REMAINDER IN R4
         SPACE
         L     R2,OUTAREA
         LA    R2,6(,R2)           OUT LOC FOR MICROSEC
         SPACE
*---------------------------------------------------------------------*
*        CONVERT MICROSEC TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(6,R2),CVRTAREA+4(4)
         OI    5(R2),X'F0'
         SPACE
         L     R7,OUTAREA
         MVI   5(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT DAY
*        AND CONVERT TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R5              R4=((R5//1440)*60)+SECONDS
         SRDA  R14,32
         D     R14,=F'1440'
         MH    R14,=H'60'
         LA    R15,TIMELEFT
         LA    R14,0(,R15)         ADD SECONDS
         LR    R4,R14
         SPACE
         LR    R2,R7               POINT TO OUTPUT AREA
         CVD   R4,CVRTAREA
         UNPK  0(5,R2),CVRTAREA+5(3)  UNPACK SECONDS
         OI    4(R2),X'F0'
         SPACE
         B     EXIT0
         SPACE
*---------------------------------------------------------------------*
*        FULL DATE AND TIME CONVERSION -- THIS ROUTINE
*        CONVERTS THE TOD VALUE TO YEAR, JULIAN DAY, HOURS
*        MINUTES, SECONDS, AND MICROSECONDS. THE CONVERTED
*        TIME IS PLACED LEFT-JUSTIFIED IN THE OUTPUT AREA
*        IN THE FORM YYYYDDDHH.MM.SS.MMMMMM (EBCDIC). UPON
*        ENTRY TO THIS ROUTINE, THE TOD VALUE HAS ALREADY
*        BEEN CHANGED TO TOTAL MINUTES SINCE EPOCH (IN R5)
*        AND NUMBER OF MICROSECS INTO CURRENT MINUTE (R4).
*---------------------------------------------------------------------*
         SPACE
FULLDATE EQU   *
         L     R7,TODPTR
         CLC   0(8,R7),=XL8'00'
         BNE   FNOTZERO
         L     R7,OUTAREA
         MVI   22(R7),C' '
         MVI   23(R7),C' '
         MVC   0(22,R7),=C'000000000.00.00.000000'
         LA    R15,4
         B     EXIT
         SPACE
FNOTZERO EQU   *
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NUMBER OF SECONDS (R4/1,000,000)
*---------------------------------------------------------------------*
         SPACE
         LA    R7,TIMELEFT
         LR    R15,R4
         SLR   R14,R14
         D     R14,MILLION
         ST    R15,0(,R7)
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSECONDS (R4//1,000,000)
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
*---------------------------------------------------------------------*
*        CONVERT MICROSEC TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         L     R7,OUTAREA
         LA    R2,16(,R7)
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(6,R2),CVRTAREA+4(4)
         OI    5(R2),X'F0'
         SPACE
         MVI   15(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CONVERT SECONDS TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         L     R4,TIMELEFT
         LA    R2,13(,R7)
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
         MVI   12(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MINUTES INTO CURRENT HOUR.
*        R5 CONTAINS TOTAL NO. OF MINUTES FROM THE EPOCH.
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R5
         SLR   R14,R14
         D     R14,=F'60'
         ST    R15,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE MINUTES INTO CURRENT HOUR
*        R4 = R5//60
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
         LA    R2,10(,R7)
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
         MVI   9(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF HOURS INTO CURRENT DAY.
*        TIMELEFT CONTAINS TOTAL NO. OF HOURS SINCE EPOCH.
*---------------------------------------------------------------------*
         SPACE
         L     R5,TIMELEFT
         LR    R15,R5
         SLR   R14,R14
         D     R14,=F'24'
         ST    R15,TIMELEFT        TOTAL DAYS SINCE EPOCH
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF HOURS INTO CURRENT DAY.
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
         LA    R2,7(,R7)
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE THE CURRENT YEAR AND JULIAN DAY
*        USING 'TIMELEFT' WHICH CONTAINS THE TOTAL NUMBER
*        OF ELAPSED DAYS SINCE 1900. FIRST CHECK WHETHER
*        THE TIME IS IN THE 1900 THRU 1903 ERA (I.E. LESS
*        THAN 1460 ELAPSED DAYS). IF SO, THE TIME MUST BE
*        HANDLED IN A SPECIAL WAY SINCE 1900 IS NOT A LEAP
*        YEAR AND EACH YEAR IN THAT 4 YEAR SPAN THUS CON-
*        TAINS 365 DAYS. IF THE ELAPSED TIME HOWEVER IS
*        GREATER THAN 1459 DAYS, THEN EVERY 4 YEARS CON-
*        TAIN 1461 DAYS RATHER THAN 1460 AND THE FIRST
*        YEAR OF EACH GROUP IS A LEAP YEAR. THESE FOUR
*        YEAR GROUPS ARE REFERRED TO AS LEAP YEAR GROUPS.
*        THE YEAR AND THE DAY WHEN THE ELAPSED TIME FALLS
*        INTO ONE OF THESE GROUPS MUST BE CALCULATED USING
*        STANDARD FORMULAS DIFFERENT FROM THE FORMULAS
*        USED WHEN THE TIME IS WITHIN 1900 TO 1903.
*---------------------------------------------------------------------*
         SPACE
         L     R7,TIMELEFT
         CH    R7,=H'1460'
         BNL   POST1903
         SPACE
NOLEAPYR EQU   *
         SPACE
*---------------------------------------------------------------------*
*        R3 = (TIMELEFT//365)+1   CURRENT DAY
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R7
         SRDA  R14,32
         D     R14,=F'365'
         AH    R14,=H'1'
         LR    R3,R14
         SPACE
*---------------------------------------------------------------------*
*        R6 = (TIMELEFT/365)     CURRENT YEAR
*---------------------------------------------------------------------*
         SPACE
         AH    R15,=H'1900'
         LR    R6,R15
         B     DATECOM
         SPACE
*---------------------------------------------------------------------*
*        THE TIME ELAPSED IS 1460 OR MORE DAYS.
*        CALCULATE R5, THE RELATIVE LEAP YEAR GROUP SINCE
*        1904, AND R4, THE NUMBER OF DAYS ELAPSED IN THE
*        CURRENT LEAP YEAR GROUP. USE THESE VALUES IN THE
*        FORMULAS.  IN THE FORMULA USED TO CALCULATE THE
*        JULIAN DAY, THE EXPRESSION IN PARENTHESES IS THE
*        NUMBER OF WHOLE DAYS THAT HAVE PAST IN THE
*        CURRENT YEAR. BECAUSE THE CURRENT DAY HAS NOT YET
*        ELAPSED, IT IS NOT INCLUDED IN THE RESULT PRO-
*        DUCED BY THE EXPRESSION AND THEREFORE 1 MUST BE
*        ADDED TO GET THE ACTUAL JULIAN DAY.
*        WITHIN THE EXPRESSION THE FIRST TERM, R, MUST BE
*        ADJUSTED BY 1 (I.E, L/731) IF THE TOTAL DAYS INTO
*        THE LEAP YEAR GROUP IS GREATER THAN OR EQUAL TO
*        2 YEARS, AND AGAIN BY 1 (I.E, L/1096) IF THE
*        TOTAL DAYS IS EQUAL TO OR GREATER THAN 3 YEARS.
*        THE AFFECT OF THIS IS THAT THE 2ND AND 3RD YEARS
*        ARE FORCED TO 366 DAYS ONCE THE TOTAL DAYS INTO
*        THE GROUP EXCEEDS EACH OF THESE YEARS. THIS IS
*        NECESSARY BECAUSE A DIVISOR OF 366 IS USED.
*        THE SECOND TERM (W * 4) YIELDS THE RELATIVE
*        NUMBER OF YEARS SINCE 1904 UP TO AND INCLUDING
*        THE LEAP YEAR IN THE CURRENT GROUP. THE THIRD
*        TERM ( (L-1)/365 ) YIELDS THE RELATIVE YEAR
*        WITHIN THE CURRENT LEAP YEAR GROUP. THUS IF THE
*        CURRENT YEAR IS A LEAP YEAR THE RELATIVE YEAR IS
*        ZERO AND THE THIRD TERM WILL RESULT IN ZERO.
*---------------------------------------------------------------------*
         SPACE
POST1903 EQU   *
LEAPYR   EQU   *
         SPACE
*---------------------------------------------------------------------*
*        TIMELEFT=TIMELEFT-1460  1904 BASE
*---------------------------------------------------------------------*
         SPACE
         L     R7,TIMELEFT
         SH    R7,=H'1460'
         STH   R7,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        R5 = TIMELEFT/1461
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R7
         SRDA  R14,32
         D     R14,=F'1461'
         LR    R5,R15
         SPACE
*---------------------------------------------------------------------*
*        R4 = TIMELEFT//1461
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
*---------------------------------------------------------------------*
*        R3 = ((L+L/731+L/1096)//336)+1  JULIAN DAY
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R4
         SLR   R14,R14
         D     R14,=F'731'
         LR    R14,R15
         ALR   R14,R4
         LR    R3,R14
         LR    R15,R4
         SLR   R14,R14
         D     R14,=F'1096'
         LR    R14,R15
         ALR   R14,R3
         SRDA  R14,32
         D     R14,=F'366'
         AH    R14,=H'1'
         LR    R3,R14
         SPACE
*---------------------------------------------------------------------*
*        R6 = 1904+(W*4)+(L-1)/365       YEAR
*---------------------------------------------------------------------*
         SPACE
         LR    R6,R5
         SLA   R6,2
         AH    R6,=H'1904'
         LR    R14,R4
         BCTR  R14,0
         SRDA  R14,32
         D     R14,=F'365'
         ALR   R6,R15
         SPACE
DATECOM  EQU   *
         L     R7,OUTAREA
         LA    R2,4(,R7)
         CVD   R3,CVRTAREA
         UNPK  0(3,R2),CVRTAREA+6(2)
         OI    2(R2),X'F0'
         SPACE
         LA    R2,0(,R7)
         CVD   R6,CVRTAREA
         UNPK  0(4,R2),CVRTAREA+5(3)
         OI    3(R2),X'F0'
         SPACE
EXIT0    SR    15,15
EXIT     LR    1,13
         L     13,4(,13)
         ST    15,16(,13)
         LM    14,12,12(13)
         BR    14
         SPACE
*---------------------------------------------------------------------*
*        CONSTANTS
*---------------------------------------------------------------------*
         SPACE
MILLION  DC    F'1000000'
SIXTYMIL DC    F'60000000'
MINUS1   DC    F'-1'
         LTORG
         SPACE
*---------------------------------------------------------------------*
*        DSECTS
*---------------------------------------------------------------------*
         SPACE
MYDSECT  DSECT
TIMELEFT DS    0F                  1ST FULLWORD OF SAVEAREA
         DS    18F                 REGISTER SAVEAREA
CVRTAREA DS    D
MYDSECTL EQU   *-MYDSECT
         SPACE
PARAMS   DSECT
CVTTZPTR DS    A                   ADDR OF CVTTZ VALUE
TODPTR   DS    A                   ADDR OF TOD CLOCK VALUE
OUTAREA  DS    A                   ADDR OF OUTPUT AREA
OPTION   DS    A                   ADDR OF OPTION BYTE
SAVEPTR  DS    A                   ADDR OF SAVEAREA
         SPACE
         YREGS
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END
