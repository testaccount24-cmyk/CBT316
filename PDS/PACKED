         TITLE '   P A C K E D   '
* SHOW WHICH MEMBERS OF A PDS ARE IN ISPF PACKED FORMAT
* WRITTEN JAN 10 2018
* MUCH OF THE SOURCE CODE IS COPIED FROM PDSMATCH
PACKED   START
         USING *,R10
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'PACKED'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   14,12,12(R13)
         LR    R10,15
         LR    R4,R1               SAVE PARM POINTER
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)          OLD ADDR IN NEW AREA
         ST    R1,8(,R13)          NEW ADDR IN OLD AREA
         LR    R13,R1
         USING @DATA,R13
         SR    R15,R15
         STH   R15,RC
         STC   R15,STATUS
         MVC   DDNAMEP,=CL8'SYSPRINT'
         MVC   DDNAME1,=CL8'SYSLIB'
         MVI   LINE-1,C' '
         MVC   LINE,LINE-1
         MVI   MESG-1,C' '
         ZAP   REPORTPG,=P'0'
         ZAP   REPORTLN,=P'0'
         ZAP   REPORTMX,=P'60'
         MVI   REPORTO-1,C' '
         MVI   JFCB1,C' '
         MVC   JFCB1+1(175),JFCB1
************************************************************
*         OPEN THE PRINT FILE                              *
************************************************************
         MVC   PRTDCBW(PRTDCBL),PRTDCB
         LA    R2,PRTDCBW
         MVC   DDNAM(8,R2),DDNAMEP
         MVI   OPEN,X'80'
         OPEN  ((R2),OUTPUT),MF=(E,OPEN)
         TM    OFLGS(R2),X'10'
         BNO   EXIT12
         OI    STATUS,PRTOPEN
         B     PRTX
PRTEXITO CLC   62(2,R1),=H'0'      IS BLKSIZE ZERO
         BNE   0(R14)              NO
         MVC   62(2,R1),82(R1)     YES - MAKE IT SAME AS LRECL
         BR    R14
PRTX     EQU   *
************************************************************
*         OPEN THE PDS DIRECTORY                           *
************************************************************
         MVC   DIRDCBW(DIRDCBL),DIRDCB
         LA    R2,DIRDCBW          ADDRESS OF DCB
         MVC   DDNAM(8,R2),DDNAME1 CHANGE THE DDNAME
         LA    R3,DDNAM(,R2)       POINT TO DDNAME FOR DEVTYPE
         DEVTYPE (R3),DEVAREA
         LTR   R15,R15             IS DDNAME ALLOCATED
         BNZ   EXIT12              NO, BRANCH
         SPACE
         LA    R1,DIREXLST         PUT EXLST
         IC    R0,EXLST(,R2)        ADDRESS
         ST    R1,EXLST(,R2)         IN
         STC   R0,EXLST(,R2)          DCB
         LA    R0,JFCB1            PUT JFCB ADDRESS
         ST    R0,0(,R1)            IN EXLST
         MVI   0(R1),X'87'           AND INDICATE EXLST ENTRY TYPE
         MVI   RDJFCB,X'80'
         RDJFCB ((R2)),MF=(E,RDJFCB)
         SPACE
         MVI   OPEN,X'80'
         OPEN  ((R2),INPUT),MF=(E,OPEN)
         TM    OFLGS(R2),X'10'
         BNO   EXIT12
         OI    STATUS,DIROPEN
         SPACE
         MVC   LINE,LINE-1         BLANK LINE
         MVC   LINE+1(3),=C'---'
         LA    R15,LINE+5
         MVC   0(44,R15),JFCB1
         LA    R15,44(,R15)
APPENDV1 CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,APPENDV1
         MVC   2(2,R15),=C'ON'
         MVC   5(6,R15),JFCB1+118  VOLUME SERIAL
         BAL   R14,REPORTL         PUT HEADING LIBRARY1 DSN
         SPACE
         L     R0,DIRSIZE          8 + (260 * 100) 100 DIR BLKS
         GETMAIN R,LV=(0)
         XC    0(8,R1),0(R1)       MARK THIS AS FIRST GETMAIN
         L     R0,DIRSIZE
         STM   R0,R1,LASTGM        SAVE MOST RECENT GETMAIN
         LA    R3,8(,R1)           1ST DIR BLOCK AT OFFSET 8
         ST    R3,DIRPTR1          SAVE FOR WALKING THRU DIR 1
         LR    R15,R0              GET LENGTH
         LA    R15,0(,R15)         CLEAR SUBPOOL
         SR    R14,R14
         SH    R15,=H'8'           LENGTH MINUS 8
         D     R14,=F'260'         # DIR BLOCKS PER GETMAIN
         LR    R1,R3               POINT TO 1ST 260-BYTE AREA
GMDIR1   LA    R0,260(,R1)         POINT TO NEXT 260-BYTE AREA
         ST    R0,256(,R1)         STORE THAT ADDRESS AFTER CURR
         LR    R1,R0               POINT TO NEXT 260-BYTE AREA
         BCT   R15,GMDIR1
         S     R1,=F'4'            BACK UP TO LAST WORD OF PREV
         SR    R0,R0
         ST    R0,0(,R1)           ZERO IT TO FORCE A GETMAIN
         ST    R1,LASTNEXT         REMEMBER IT FOR NEXT GETMAIN
         OI    STATUS,GOTMAIN
         MVC   DIRDECBW(DIRDECBL),DIRDECB
         MVI   DIRSW,0
         BAL   R8,DIRIN
         CLOSE ((R2)),MF=(E,OPEN)
         NI    STATUS,255-DIROPEN
         TM    DIRSW,1             WAS DIRECTORY VALID
         BZ    EXIT12              NO, QUIT
         B     PROCESS
************************************************************
*         READ THE DIRECTORY INTO STORAGE                  *
************************************************************
DIRIN    XC    DIRBLKS,DIRBLKS
         XC    DIRBLKSU,DIRBLKSU
         XC    MEMBERS,MEMBERS
         XC    ALIASES,ALIASES
         B     HAVENEXT
*IRREAD  LA    R3,256(,R3)
DIRREAD  BAL   R14,NEXTDIR
HAVENEXT DC    0H'0'
         READ  DIRDECBW,SF,(R2),(R3),256,MF=E
         CHECK DIRDECBW
         TM    DIRSW,2             I/O ERROR
         BO    DIRERR              YES, BRANCH
         LA    R1,1
         A     R1,DIRBLKS
         ST    R1,DIRBLKS
*        TM    DIRSW,1             ARE WE PAST USED BLOCKS
*        BO    DIRREAD             YES, BRANCH
         LR    R1,R3               POINT TO DATA JUST READ
         LH    R0,0(,R1)           GET NUMBER OF BYTES IN USE
         LTR   R0,R0               IS THIS NEGATIVE
         BM    DIRINV              YES, NOT A DIRECTORY BLOCK
         CH    R0,=H'256'          IS THIS TOO LARGE
         BH    DIRINV              YES, NOT A DIRECTORY BLOCK
         AR    R0,R1               POINT PAST LAST BYTE
         LA    R1,2(,R1)           POINT TO FIRST MEMBER
DIRENTRY CLC   0(8,R1),=8X'FF'     END OF MEMBERS
         BE    DIRUSED
         TM    11(R1),X'80'        ALIAS
         BO    DIRALIAS
         LA    R15,1               COUNT NON-ALIAS MEMBERS
         A     R15,MEMBERS
         ST    R15,MEMBERS
         B     DIRNEXT
DIRALIAS LA    R15,1               COUNT ALIAS MEMBERS
         A     R15,ALIASES
         ST    R15,ALIASES
DIRNEXT  SLR   R15,R15
         IC    R15,11(,R1)
         N     R15,=F'31'          SET OFF ALL BUT LAST 5 BITS
         SLL   R15,1               CHANGE HALFWORDS TO BYTES
         LA    R1,12(R15,R1)       POINT PAST USER DATA
         CR    R1,R0               END OF BLOCK
         BL    DIRENTRY            NO, BRANCH
         B     DIRREAD             YES, READ NEXT BLOCK
DIRUSED  EQU   *
         OI    DIRSW,1             STOP COUNTING MEMBERS
         MVC   DIRBLKSU,DIRBLKS    SAVE NUMBER OF USED BLOCKS
*        B     DIRREAD             GO COUNT UNUSED BLOCKS
         B     DIREND
         SPACE
NEXTDIR  L     R3,256(,R3)         POINT TO WHERE NEXT BLOCK WILL GO
         LTR   R3,R3               IF NOT ZERO
         BNZR  R14                  RETURN
         ST    R14,NEXTD14         IF ZERO, PREPARE TO GET MORE MEM
         L     R0,DIRSIZE          8 + (260 * 100)
         GETMAIN R,LV=(0)
         MVC   0(8,R1),LASTGM      SAVE PREVIOUS GETMAIN INFO
         L     R0,DIRSIZE
         STM   R0,R1,LASTGM        UPDATE MOST RECENT GETMAIN
         LA    R3,8(,R1)           1ST 260-BYTE BLOCK AT OFFSET 8
         L     R14,LASTNEXT        LAST BLOCK OF PREV GETMAIN
         ST    R3,0(,R14)          POINTS TO 1ST BLOCK OF NEW GETMAIN
         LR    R15,R0              GET LENGTH
         LA    R15,0(,R15)         CLEAR SUBPOOL
         SR    R14,R14
         SH    R15,=H'8'           LENGTH MINUS 8
         D     R14,=F'260'         COMPUTE # DIR BLOCKS THAT WILL FIT
         LR    R1,R3               POINT TO 1ST 260-BYTE AREA
GMDIR2   LA    R0,260(,R1)         POINT TO NEXT 260-BYTE AREA
         ST    R0,256(,R1)         STORE THAT ADDRESS AT END OF CURRENT
         LR    R1,R0               POINT TO NEXT 260-BYTE AREA
         BCT   R15,GMDIR2
         S     R1,=F'4'            BACK UP TO LAST WORD OF LAST 260
         SR    R0,R0
         ST    R0,0(,R1)           ZERO IT
         ST    R1,LASTNEXT         REMEMBER IT FOR NEXT GETMAIN
         L     R14,NEXTD14
         BR    R14
         SPACE
DIRSYN   EQU   *
         SYNADAF ACSMETH=BSAM
         MVC   MESSAGE(72),50(R1)
         OI    DIRSW,2
         SYNADRLS
         BR    R14
DIRINV   LA    R1,MSGINV
         LA    R0,L'MSGINV
         BAL   R14,PRTMSG
         OI    DIRSW,4
         B     DIREND
DIRERR   LA    R1,MESSAGE
         LA    R0,72
         BAL   R14,PRTMSG
         OI    DIRSW,4
         B     DIREND
DIREOF   LA    R1,MSGEOF
         LA    R0,L'MSGEOF
         BAL   R14,PRTMSG
         OI    DIRSW,4
DIREND   EQU   *
         BR    R8
************************************************************
*         PROCESS ROUTINE                                  *
************************************************************
PROCESS  EQU   *
*
*        OPEN PDSDCB FOR READING MEMBERS
*
         MVC   PDSDCBW(PDSDCBL),PDSDCB
         LA    R2,PDSDCBW          ADDRESS OF DCB
         MVC   DDNAM(8,R2),DDNAME1 CHANGE THE DDNAME
         MVI   OPEN,X'80'
         OPEN  ((R2),INPUT),MF=(E,OPEN)
         TM    OFLGS(R2),X'10'
         BNO   EXIT12
         OI    STATUS,PDSOPEN
         SPACE
         L     R1,DIRPTR1          POINT TO FIRST BLOCK OF PDS1
         ST    R1,PDSWORK1+8
         LH    R0,0(,R1)           GET NUMBER OF BYTES IN USE
         AR    R0,R1               POINT PAST LAST BYTE
         LA    R1,2(,R1)           POINT TO FIRST MEMBER
         LA    R5,PDSWORK1
         BAL   R8,GETMEM1          GET FIRST MEMBER NAME OR END OF DIR
         CLI   20(R5),X'FF'
         BE    EXIT
READMEM  MVC   LINE,LINE-1
         MVC   LINE+1(8),20(R5)    MEMBER NAME
*
*        ADD LOGIC HERE TO READ FIRST RECORD OF MEMBER
*
         MVC   TTR(3),16(R5)       TTR
         MVI   TTR+3,0
         FIND  (R2),TTR,C
         LA    R4,RBUF
         XC    0(7,R4),0(R4)
         READ  PDSDECBW,SF,(R2),(R4),'S',MF=E
         CHECK PDSDECBW
*
*        CHECK FIRST 3 BYTES FOR HEX 00 01 40
*
         LA    R1,RBUF
         TM    PDSDCBW+RECFM,X'80' RECFM F
         BO    CLCPACK
         LA    R1,RBUF+4           RECFM V POINT PAST RDW
         TM    PDSDCBW+RECFM,X'10' RECFM VB
         BZ    CLCPACK
         LA    R1,RBUF+8           RECFM VB POINT PAST BDW AND RDW
CLCPACK  CLC   0(3,R1),=X'000140'  COMPARE TO PACKED SIGNATURE
         BNE   NOTP                NOT PACKED
         MVC   LINE+10(8),=C'>PACKED<'
         B     REPTIT              REPORT STATUS OF MEMBER
MEMEOF   DS    0H                  HERE IF MEMBER IS EMPTY
         MVC   LINE+10(12),=C'EMPTY MEMBER'
         B     REPTIT              REPORT STATUS OF MEMBER
NOTP     DS    0H
         MVC   LINE+10(10),=C'NOT PACKED'
REPTIT   DS    0H                  REPORT STATUS OF MEMBER
         BAL   R14,REPORTL
         BAL   R8,GETMEM           GET NEXT MEMBER NAME
         CLI   20(R5),X'FF'
         BE    EXIT
         B     READMEM
************************************************************
*         END OF DIRECTORY                                 *
************************************************************
DONE     B     EXIT
************************************************************
*         SUBROUTINE TO GET NEXT MEMBER FROM DIRECTORY     *
************************************************************
GETMEM   LM    R0,R1,0(R5)
         CLC   0(8,R1),=8X'FF'     END OF MEMBERS
         BE    GETEOF
GET1R    SLR   R15,R15
         IC    R15,11(,R1)
         N     R15,=F'31'          SET OFF ALL BUT LAST 5 BITS
         SLL   R15,1               CHANGE HALFWORDS TO BYTES
         LA    R1,12(R15,R1)       POINT PAST USER DATA
         CR    R1,R0               END OF BLOCK
         BL    GETMEM1             NO, BRANCH
*        LA    R1,256              YES, READ NEXT BLOCK
*        A     R1,8(,R5)           YES, READ NEXT BLOCK
*        ST    R1,8(,R5)           YES, READ NEXT BLOCK
         L     R1,8(,R5)           NEW WAY TO GET NEXT BLOCK
         L     R1,256(,R1)         NEW WAY TO GET NEXT BLOCK
         ST    R1,8(,R5)           NEW WAY TO GET NEXT BLOCK
         LH    R0,0(,R1)           GET NUMBER OF BYTES IN USE
         AR    R0,R1               POINT PAST LAST BYTE
         LA    R1,2(,R1)           POINT TO FIRST MEMBER
*        B     GET1R
GETMEM1  STM   R0,R1,0(R5)
         MVC   20(8,R5),0(R1)      SAVE MEMBER NAME
         CLC   0(8,R1),=8X'FF'     END OF MEMBERS
         BE    GETEOF
         MVC   16(4,R5),8(R1)      SAVE TTR, ALIAS BIT, ETC
         XC    28(64,R5),28(R5)    ZERO USER DATA AREA
*              COPY USER DATA
         SLR   R15,R15
         IC    R15,11(,R1)
         N     R15,=F'31'          SET OFF ALL BUT LAST 5 BITS
         SLL   R15,1               CHANGE HALFWORDS TO BYTES
         ST    R15,12(,R5)         SAVE LENGTH OF USER DATA
         AGO   .SKIP1
         LTR   R15,R15
         BZ    GETZERO
         TM    OPTIONS,OPTUSER     IS USERDATA TO BE COMPARED
         BZ    GETZERO             NO, BRANCH
         CLI   15(R5),30           IS LENGTH 30
         BNE   *+8                 NO
         OI    12(R5),SPFFLAG      YES, INDICATE IT MAY BE SPF STATS
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
         B     *+10
         MVC   28(0,R5),12(R1)     EXECUTED
         EX    R15,*-6             MOVE THE USER DATA
         TM    11(R1),B'01100000'  ANY TTR'S IN THE USER DATA
         BZ    GETZERO             NO, BRANCH
         NI    12(R5),255-SPFFLAG  YES, CAN'T BE SPF
         IC    R15,11(,R1)         YES, PREPARE TO ZERO THEM
         N     R15,=A(X'0000007F') SET OFF ALIAS BIT
         SRL   R15,5               SHIFT OUT RIGHT 5 BITS
         LA    R14,28(,R5)         POINT TO FIRST TTR IN USER DATA
GETUTTR  XC    0(3,R14),0(R14)     ZERO THE TTR IN THE USER DATA
         LA    R14,4(,R14)         POINT TO NEXT TTR IN THE USER DATA
         BCT   R15,GETUTTR         REPEAT UNTIL R15 ZERO
GETZERO  EQU   *
.SKIP1   ANOP
GETEOF   BR    R8
************************************************************
*         MESSAGE ROUTINE                                  *
************************************************************
PRTMSG   STM   R14,R1,PRTMSGS
         MVC   MESG,MESG-1
         LR    R15,R0
         BCTR  R15,0
         B     *+10
         MVC   MESG+1(0),0(R1)
         EX    R15,*-6
         LA    R1,MESG
         LA    R0,L'MESG
         BAL   R14,REPORT
         LM    R14,R1,PRTMSGS
         BR    R14
************************************************************
*         REPORT WRITER                                    *
************************************************************
REPORTL  LA    R1,LINE
         LA    R0,121
REPORT   STM   R14,R3,REPORTS
         LA    R3,PRTDCBW          POINT R3 TO DCB
         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED
         BL    *+10                NO
         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE
         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?
         BE    REPORTH             YES, GO PRINT HEADING
REPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?
         BNL   REPORTP             YES, BRANCH
         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA
         LTR   R14,R0              COPY LENGTH
         BNP   REPORTB             BLANK LINE IF < 1
         BCTR  R14,0               LENGTH MINUS 1
         B     *+10
         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE
         EX    R14,*-6             EXECUTE MVC
REPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE
REPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE
         PUT   (R3),(R2)           WRITE OUTPUT LINE
         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER
REPORTX  LM    R14,R3,REPORTS      RESTORE REGS
         BR    R14                 RETURN
REPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER
         MVC   REPORTO,REPORTO-1   BLANK HEADING
         MVI   REPORTO,C'1'        CC = NEW PAGE
         MVC   REPORTO+1(L'HEAD1),HEAD1
         LA    R1,REPORTO+79-9     RIGHT EDGE PAGE NO
         MVC   3(6,R1),=X'402020202020' EDIT MASK
         ED    3(6,R1),REPORTPG    UNPACK PAGE NO
         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'
         PUT   (R3),REPORTO        PUT HEADING LINE 1
         MVC   REPORTO,REPORTO-1   BLANK LINE
         PUT   (R3),REPORTO        PUT HEADING BLANK LINE
         AP    REPORTLN,=P'2'      COUNT HEADING LINES
REPORTHX LM    R0,R1,REPORTS+8     RESTORE R0 AND R1
         B     REPORTD             GO PRINT DETAIL LINE
         SPACE
************************************************************
*         TERMINATION                                      *
************************************************************
MEMSYN   EQU   *
         SYNADAF ACSMETH=BSAM
         MVC   MESSAGE(72),50(R1)
         OI    MEMSW,2
         SYNADRLS
         BR    R14
************************************************************
*         TERMINATION                                      *
************************************************************
EXIT12   MVI   RC+1,12
EXIT     EQU   *
*        MVC   COMPMEM,=8X'FF'     INDICATE CLOSE
*        CALL  PDSCOMP,COMPMEM,VL
         TM    STATUS,GOTMAIN      IS DIRECTORY AREA GOTTEN
         BZ    EXITGOTX            NO, BYPASS FREEMAIN
EXITGOTL LM    R0,R1,LASTGM
         LTR   R0,R0
         BZ    EXITGOTX
         LM    R14,R15,0(R1)       POINT TO PREVIOUS GETMAIN INFO
         STM   R14,R15,LASTGM
*        L     R0,DIRSIZE
*        L     R1,DIRFREE
         FREEMAIN R,LV=(0),A=(1)
         B     EXITGOTL
EXITGOTX EQU   *
         TM    STATUS,PDSOPEN      IS SYSLIB OPEN
         BZ    EXITPDSX            NO - BYPASS CLOSE
         LA    R2,PDSDCBW
         MVI   CLOSE,X'80'
         CLOSE ((R2)),MF=(E,CLOSE)
*        FREEPOOL (R2)
EXITPDSX EQU   *
         TM    STATUS,PRTOPEN      IS SYSPRINT OPEN
         BZ    EXITPRTX            NO - BYPASS CLOSE
         LA    R2,PRTDCBW
         MVI   CLOSE,X'80'
         CLOSE ((R2)),MF=(E,CLOSE)
         FREEPOOL (R2)
EXITPRTX EQU   *
         LH    R15,RC
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
************************************************************
*        CONSTANTS                                         *
************************************************************
         LTORG
HEAD1    DC    C'--- PDS PACKED DATA CHECKER ---'
*IRSIZE  DC    0F'0',AL1(1),AL3(128*1024)  128K FOR 2 DIRECTORIES
*IRSIZE  DC    0F'0',AL1(1),AL3(2000*512)  1000K FOR 2 DIRECTORIES
DIRSIZE  DC    0F'0',AL1(1),AL3(8+260*100) 100 DIR BLOCKS PER GETMAIN
*              DIRSIZE SHOULD BE 8 + A MULTIPLE OF 260
         PRINT NOGEN
PRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      +
               RECFM=FBA,LRECL=121,EXLST=PRTEXLST
PRTDCBL  EQU   *-PRTDCB
         SPACE
DIRDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R,EODAD=DIREOF,SYNAD=DIRSYN,X
               RECFM=U,BLKSIZE=256
DIRDCBL  EQU   *-DIRDCB
         SPACE
PDSDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R,EODAD=MEMEOF,SYNAD=MEMSYN
PDSDCBL  EQU   *-PDSDCB
         PRINT GEN
PRTEXLST DC    0F'0',X'85',AL3(PRTEXITO)
DIRREADM READ  DIRDECB,SF,MF=L
DIRDECBL EQU   *-DIRDECB
PDSREADM READ  PDSDECB,SF,MF=L
PDSDECBL EQU   *-PDSDECB
         PRINT GEN
MSGINV   DC    C'INVALID DIRECTORY BLOCK'
MSGEOF   DC    C'NO END-OF-DIRECTORY INDICATOR FOUND'
         DC    0D'0'
EODAD    EQU   32
RECFM    EQU   36
EXLST    EQU   36
DDNAM    EQU   40
OFLGS    EQU   48
SYNAD    EQU   56
BLKSI    EQU   62
LRECL    EQU   82
         DC    0D'0'
*OMPMEM  DS    CL08
************************************************************
*        DSECTS                                            *
************************************************************
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
DOUBLE   DS    D
HALF     EQU   DOUBLE,2
FULL     EQU   DOUBLE,4
DDNAMEP  DS    CL8
DDNAME1  DS    CL8
DDNAME2  DS    CL8
RC       DS    H
STATUS   DS    X
PRTOPEN  EQU   X'80'
DIROPEN  EQU   X'40'
GOTMAIN  EQU   X'20'
PDSOPEN  EQU   X'10'
OPTIONS  DS    X
OPTUSER  EQU   X'80'
OPTEQO   EQU   X'40'
OPTNEO   EQU   X'20'
OPTDATA  EQU   X'10'
OPTSUMS  EQU   X'08'
LASTGM   DS    2F
LASTNEXT DS    F
NEXTD14  DS    F
DIRPTR1  DS    F
DIRSW    DS    F
DIRBLKS  DS    F
DIRBLKSU DS    F
MEMSW    DS    F
MEMBERS  DS    F
ALIASES  DS    F
PRTDCBW  DS    0F,(PRTDCBL)X
DIRDCBW  DS    0F,(DIRDCBL)X
DIRDECBW DS    0F,(DIRDECBL)X
PDSDCBW  DS    0F,(PDSDCBL)X
PDSDECBW DS    0F,(PDSDECBL)X
DIREXLST DS    F
DEVAREA  DS    2F
TTR      DS    F
CLOSE    DS    0F
OPEN     DS    F
RDJFCB   DS    F
REPORTS  DS    6F
REPORTPG DS    PL3
REPORTLN DS    PL2
REPORTMX DS    PL2
PRTMSGS  DS    4F
PDSWORK1 DS    3F
         DS    F                   USER DATA LENGTH
SPFFLAG  EQU   X'80'               USER DATA CONTAINS SPF STATISTICS
         DS    XL3                 TTR
         DS    X                   ALIAS BIT AND USER DATA LENGTH
         DS    CL8                 MEMBER NAME
         DS    CL64                USER DATA
LINEB    DS    C  (LINE-1)
LINE     DS    CL133
MESGB    DS    C  (MESG-1)
MESG     DS    CL133
MESSAGE  DS    CL72
REPORTOB DS    C (REPORTO-1)
REPORTO  DS    CL133
JFCB1    DS    0D,CL176
         DS    0D
RBUF     DS    32768C
@DATAL   EQU   *-@DATA
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
